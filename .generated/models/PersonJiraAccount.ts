/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `PersonJiraAccount` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model PersonJiraAccount
 *
 */
export type PersonJiraAccountModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PersonJiraAccountPayload>

export type AggregatePersonJiraAccount = {
  _count: PersonJiraAccountCountAggregateOutputType | null
  _min: PersonJiraAccountMinAggregateOutputType | null
  _max: PersonJiraAccountMaxAggregateOutputType | null
}

export type PersonJiraAccountMinAggregateOutputType = {
  id: string | null
  personId: string | null
  jiraAccountId: string | null
  jiraEmail: string | null
  jiraDisplayName: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PersonJiraAccountMaxAggregateOutputType = {
  id: string | null
  personId: string | null
  jiraAccountId: string | null
  jiraEmail: string | null
  jiraDisplayName: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PersonJiraAccountCountAggregateOutputType = {
  id: number
  personId: number
  jiraAccountId: number
  jiraEmail: number
  jiraDisplayName: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type PersonJiraAccountMinAggregateInputType = {
  id?: true
  personId?: true
  jiraAccountId?: true
  jiraEmail?: true
  jiraDisplayName?: true
  createdAt?: true
  updatedAt?: true
}

export type PersonJiraAccountMaxAggregateInputType = {
  id?: true
  personId?: true
  jiraAccountId?: true
  jiraEmail?: true
  jiraDisplayName?: true
  createdAt?: true
  updatedAt?: true
}

export type PersonJiraAccountCountAggregateInputType = {
  id?: true
  personId?: true
  jiraAccountId?: true
  jiraEmail?: true
  jiraDisplayName?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PersonJiraAccountAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PersonJiraAccount to aggregate.
   */
  where?: Prisma.PersonJiraAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonJiraAccounts to fetch.
   */
  orderBy?:
    | Prisma.PersonJiraAccountOrderByWithRelationInput
    | Prisma.PersonJiraAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PersonJiraAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonJiraAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonJiraAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned PersonJiraAccounts
   **/
  _count?: true | PersonJiraAccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PersonJiraAccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PersonJiraAccountMaxAggregateInputType
}

export type GetPersonJiraAccountAggregateType<
  T extends PersonJiraAccountAggregateArgs,
> = {
  [P in keyof T & keyof AggregatePersonJiraAccount]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePersonJiraAccount[P]>
    : Prisma.GetScalarType<T[P], AggregatePersonJiraAccount[P]>
}

export type PersonJiraAccountGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PersonJiraAccountWhereInput
  orderBy?:
    | Prisma.PersonJiraAccountOrderByWithAggregationInput
    | Prisma.PersonJiraAccountOrderByWithAggregationInput[]
  by:
    | Prisma.PersonJiraAccountScalarFieldEnum[]
    | Prisma.PersonJiraAccountScalarFieldEnum
  having?: Prisma.PersonJiraAccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PersonJiraAccountCountAggregateInputType | true
  _min?: PersonJiraAccountMinAggregateInputType
  _max?: PersonJiraAccountMaxAggregateInputType
}

export type PersonJiraAccountGroupByOutputType = {
  id: string
  personId: string
  jiraAccountId: string
  jiraEmail: string
  jiraDisplayName: string | null
  createdAt: Date
  updatedAt: Date
  _count: PersonJiraAccountCountAggregateOutputType | null
  _min: PersonJiraAccountMinAggregateOutputType | null
  _max: PersonJiraAccountMaxAggregateOutputType | null
}

type GetPersonJiraAccountGroupByPayload<
  T extends PersonJiraAccountGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PersonJiraAccountGroupByOutputType, T['by']> & {
      [P in keyof T &
        keyof PersonJiraAccountGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], PersonJiraAccountGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], PersonJiraAccountGroupByOutputType[P]>
    }
  >
>

export type PersonJiraAccountWhereInput = {
  AND?:
    | Prisma.PersonJiraAccountWhereInput
    | Prisma.PersonJiraAccountWhereInput[]
  OR?: Prisma.PersonJiraAccountWhereInput[]
  NOT?:
    | Prisma.PersonJiraAccountWhereInput
    | Prisma.PersonJiraAccountWhereInput[]
  id?: Prisma.StringFilter<'PersonJiraAccount'> | string
  personId?: Prisma.StringFilter<'PersonJiraAccount'> | string
  jiraAccountId?: Prisma.StringFilter<'PersonJiraAccount'> | string
  jiraEmail?: Prisma.StringFilter<'PersonJiraAccount'> | string
  jiraDisplayName?:
    | Prisma.StringNullableFilter<'PersonJiraAccount'>
    | string
    | null
  createdAt?: Prisma.DateTimeFilter<'PersonJiraAccount'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'PersonJiraAccount'> | Date | string
  person?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
}

export type PersonJiraAccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  jiraAccountId?: Prisma.SortOrder
  jiraEmail?: Prisma.SortOrder
  jiraDisplayName?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  person?: Prisma.PersonOrderByWithRelationInput
}

export type PersonJiraAccountWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    personId?: string
    AND?:
      | Prisma.PersonJiraAccountWhereInput
      | Prisma.PersonJiraAccountWhereInput[]
    OR?: Prisma.PersonJiraAccountWhereInput[]
    NOT?:
      | Prisma.PersonJiraAccountWhereInput
      | Prisma.PersonJiraAccountWhereInput[]
    jiraAccountId?: Prisma.StringFilter<'PersonJiraAccount'> | string
    jiraEmail?: Prisma.StringFilter<'PersonJiraAccount'> | string
    jiraDisplayName?:
      | Prisma.StringNullableFilter<'PersonJiraAccount'>
      | string
      | null
    createdAt?: Prisma.DateTimeFilter<'PersonJiraAccount'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'PersonJiraAccount'> | Date | string
    person?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
  },
  'id' | 'personId'
>

export type PersonJiraAccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  jiraAccountId?: Prisma.SortOrder
  jiraEmail?: Prisma.SortOrder
  jiraDisplayName?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PersonJiraAccountCountOrderByAggregateInput
  _max?: Prisma.PersonJiraAccountMaxOrderByAggregateInput
  _min?: Prisma.PersonJiraAccountMinOrderByAggregateInput
}

export type PersonJiraAccountScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PersonJiraAccountScalarWhereWithAggregatesInput
    | Prisma.PersonJiraAccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.PersonJiraAccountScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.PersonJiraAccountScalarWhereWithAggregatesInput
    | Prisma.PersonJiraAccountScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'PersonJiraAccount'> | string
  personId?: Prisma.StringWithAggregatesFilter<'PersonJiraAccount'> | string
  jiraAccountId?:
    | Prisma.StringWithAggregatesFilter<'PersonJiraAccount'>
    | string
  jiraEmail?: Prisma.StringWithAggregatesFilter<'PersonJiraAccount'> | string
  jiraDisplayName?:
    | Prisma.StringNullableWithAggregatesFilter<'PersonJiraAccount'>
    | string
    | null
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'PersonJiraAccount'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'PersonJiraAccount'>
    | Date
    | string
}

export type PersonJiraAccountCreateInput = {
  id?: string
  jiraAccountId: string
  jiraEmail: string
  jiraDisplayName?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  person: Prisma.PersonCreateNestedOneWithoutJiraAccountInput
}

export type PersonJiraAccountUncheckedCreateInput = {
  id?: string
  personId: string
  jiraAccountId: string
  jiraEmail: string
  jiraDisplayName?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonJiraAccountUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jiraAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  jiraEmail?: Prisma.StringFieldUpdateOperationsInput | string
  jiraDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  person?: Prisma.PersonUpdateOneRequiredWithoutJiraAccountNestedInput
}

export type PersonJiraAccountUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  jiraAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  jiraEmail?: Prisma.StringFieldUpdateOperationsInput | string
  jiraDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonJiraAccountCreateManyInput = {
  id?: string
  personId: string
  jiraAccountId: string
  jiraEmail: string
  jiraDisplayName?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonJiraAccountUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jiraAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  jiraEmail?: Prisma.StringFieldUpdateOperationsInput | string
  jiraDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonJiraAccountUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  jiraAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  jiraEmail?: Prisma.StringFieldUpdateOperationsInput | string
  jiraDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonJiraAccountNullableScalarRelationFilter = {
  is?: Prisma.PersonJiraAccountWhereInput | null
  isNot?: Prisma.PersonJiraAccountWhereInput | null
}

export type PersonJiraAccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  jiraAccountId?: Prisma.SortOrder
  jiraEmail?: Prisma.SortOrder
  jiraDisplayName?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonJiraAccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  jiraAccountId?: Prisma.SortOrder
  jiraEmail?: Prisma.SortOrder
  jiraDisplayName?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonJiraAccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  jiraAccountId?: Prisma.SortOrder
  jiraEmail?: Prisma.SortOrder
  jiraDisplayName?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonJiraAccountCreateNestedOneWithoutPersonInput = {
  create?: Prisma.XOR<
    Prisma.PersonJiraAccountCreateWithoutPersonInput,
    Prisma.PersonJiraAccountUncheckedCreateWithoutPersonInput
  >
  connectOrCreate?: Prisma.PersonJiraAccountCreateOrConnectWithoutPersonInput
  connect?: Prisma.PersonJiraAccountWhereUniqueInput
}

export type PersonJiraAccountUncheckedCreateNestedOneWithoutPersonInput = {
  create?: Prisma.XOR<
    Prisma.PersonJiraAccountCreateWithoutPersonInput,
    Prisma.PersonJiraAccountUncheckedCreateWithoutPersonInput
  >
  connectOrCreate?: Prisma.PersonJiraAccountCreateOrConnectWithoutPersonInput
  connect?: Prisma.PersonJiraAccountWhereUniqueInput
}

export type PersonJiraAccountUpdateOneWithoutPersonNestedInput = {
  create?: Prisma.XOR<
    Prisma.PersonJiraAccountCreateWithoutPersonInput,
    Prisma.PersonJiraAccountUncheckedCreateWithoutPersonInput
  >
  connectOrCreate?: Prisma.PersonJiraAccountCreateOrConnectWithoutPersonInput
  upsert?: Prisma.PersonJiraAccountUpsertWithoutPersonInput
  disconnect?: Prisma.PersonJiraAccountWhereInput | boolean
  delete?: Prisma.PersonJiraAccountWhereInput | boolean
  connect?: Prisma.PersonJiraAccountWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PersonJiraAccountUpdateToOneWithWhereWithoutPersonInput,
      Prisma.PersonJiraAccountUpdateWithoutPersonInput
    >,
    Prisma.PersonJiraAccountUncheckedUpdateWithoutPersonInput
  >
}

export type PersonJiraAccountUncheckedUpdateOneWithoutPersonNestedInput = {
  create?: Prisma.XOR<
    Prisma.PersonJiraAccountCreateWithoutPersonInput,
    Prisma.PersonJiraAccountUncheckedCreateWithoutPersonInput
  >
  connectOrCreate?: Prisma.PersonJiraAccountCreateOrConnectWithoutPersonInput
  upsert?: Prisma.PersonJiraAccountUpsertWithoutPersonInput
  disconnect?: Prisma.PersonJiraAccountWhereInput | boolean
  delete?: Prisma.PersonJiraAccountWhereInput | boolean
  connect?: Prisma.PersonJiraAccountWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PersonJiraAccountUpdateToOneWithWhereWithoutPersonInput,
      Prisma.PersonJiraAccountUpdateWithoutPersonInput
    >,
    Prisma.PersonJiraAccountUncheckedUpdateWithoutPersonInput
  >
}

export type PersonJiraAccountCreateWithoutPersonInput = {
  id?: string
  jiraAccountId: string
  jiraEmail: string
  jiraDisplayName?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonJiraAccountUncheckedCreateWithoutPersonInput = {
  id?: string
  jiraAccountId: string
  jiraEmail: string
  jiraDisplayName?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonJiraAccountCreateOrConnectWithoutPersonInput = {
  where: Prisma.PersonJiraAccountWhereUniqueInput
  create: Prisma.XOR<
    Prisma.PersonJiraAccountCreateWithoutPersonInput,
    Prisma.PersonJiraAccountUncheckedCreateWithoutPersonInput
  >
}

export type PersonJiraAccountUpsertWithoutPersonInput = {
  update: Prisma.XOR<
    Prisma.PersonJiraAccountUpdateWithoutPersonInput,
    Prisma.PersonJiraAccountUncheckedUpdateWithoutPersonInput
  >
  create: Prisma.XOR<
    Prisma.PersonJiraAccountCreateWithoutPersonInput,
    Prisma.PersonJiraAccountUncheckedCreateWithoutPersonInput
  >
  where?: Prisma.PersonJiraAccountWhereInput
}

export type PersonJiraAccountUpdateToOneWithWhereWithoutPersonInput = {
  where?: Prisma.PersonJiraAccountWhereInput
  data: Prisma.XOR<
    Prisma.PersonJiraAccountUpdateWithoutPersonInput,
    Prisma.PersonJiraAccountUncheckedUpdateWithoutPersonInput
  >
}

export type PersonJiraAccountUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jiraAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  jiraEmail?: Prisma.StringFieldUpdateOperationsInput | string
  jiraDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonJiraAccountUncheckedUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jiraAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  jiraEmail?: Prisma.StringFieldUpdateOperationsInput | string
  jiraDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonJiraAccountSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    jiraAccountId?: boolean
    jiraEmail?: boolean
    jiraDisplayName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personJiraAccount']
>

export type PersonJiraAccountSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    jiraAccountId?: boolean
    jiraEmail?: boolean
    jiraDisplayName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personJiraAccount']
>

export type PersonJiraAccountSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    jiraAccountId?: boolean
    jiraEmail?: boolean
    jiraDisplayName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personJiraAccount']
>

export type PersonJiraAccountSelectScalar = {
  id?: boolean
  personId?: boolean
  jiraAccountId?: boolean
  jiraEmail?: boolean
  jiraDisplayName?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PersonJiraAccountOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'personId'
  | 'jiraAccountId'
  | 'jiraEmail'
  | 'jiraDisplayName'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['personJiraAccount']
>
export type PersonJiraAccountInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type PersonJiraAccountIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type PersonJiraAccountIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}

export type $PersonJiraAccountPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'PersonJiraAccount'
  objects: {
    person: Prisma.$PersonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      personId: string
      jiraAccountId: string
      jiraEmail: string
      jiraDisplayName: string | null
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['personJiraAccount']
  >
  composites: {}
}

export type PersonJiraAccountGetPayload<
  S extends boolean | null | undefined | PersonJiraAccountDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PersonJiraAccountPayload, S>

export type PersonJiraAccountCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  PersonJiraAccountFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: PersonJiraAccountCountAggregateInputType | true
}

export interface PersonJiraAccountDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['PersonJiraAccount']
    meta: { name: 'PersonJiraAccount' }
  }
  /**
   * Find zero or one PersonJiraAccount that matches the filter.
   * @param {PersonJiraAccountFindUniqueArgs} args - Arguments to find a PersonJiraAccount
   * @example
   * // Get one PersonJiraAccount
   * const personJiraAccount = await prisma.personJiraAccount.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PersonJiraAccountFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PersonJiraAccountFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__PersonJiraAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one PersonJiraAccount that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PersonJiraAccountFindUniqueOrThrowArgs} args - Arguments to find a PersonJiraAccount
   * @example
   * // Get one PersonJiraAccount
   * const personJiraAccount = await prisma.personJiraAccount.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PersonJiraAccountFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      PersonJiraAccountFindUniqueOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__PersonJiraAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first PersonJiraAccount that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonJiraAccountFindFirstArgs} args - Arguments to find a PersonJiraAccount
   * @example
   * // Get one PersonJiraAccount
   * const personJiraAccount = await prisma.personJiraAccount.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PersonJiraAccountFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PersonJiraAccountFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__PersonJiraAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first PersonJiraAccount that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonJiraAccountFindFirstOrThrowArgs} args - Arguments to find a PersonJiraAccount
   * @example
   * // Get one PersonJiraAccount
   * const personJiraAccount = await prisma.personJiraAccount.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PersonJiraAccountFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      PersonJiraAccountFindFirstOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__PersonJiraAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more PersonJiraAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonJiraAccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PersonJiraAccounts
   * const personJiraAccounts = await prisma.personJiraAccount.findMany()
   *
   * // Get first 10 PersonJiraAccounts
   * const personJiraAccounts = await prisma.personJiraAccount.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const personJiraAccountWithIdOnly = await prisma.personJiraAccount.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PersonJiraAccountFindManyArgs>(
    args?: Prisma.SelectSubset<T, PersonJiraAccountFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a PersonJiraAccount.
   * @param {PersonJiraAccountCreateArgs} args - Arguments to create a PersonJiraAccount.
   * @example
   * // Create one PersonJiraAccount
   * const PersonJiraAccount = await prisma.personJiraAccount.create({
   *   data: {
   *     // ... data to create a PersonJiraAccount
   *   }
   * })
   *
   */
  create<T extends PersonJiraAccountCreateArgs>(
    args: Prisma.SelectSubset<T, PersonJiraAccountCreateArgs<ExtArgs>>
  ): Prisma.Prisma__PersonJiraAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many PersonJiraAccounts.
   * @param {PersonJiraAccountCreateManyArgs} args - Arguments to create many PersonJiraAccounts.
   * @example
   * // Create many PersonJiraAccounts
   * const personJiraAccount = await prisma.personJiraAccount.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PersonJiraAccountCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PersonJiraAccountCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PersonJiraAccounts and returns the data saved in the database.
   * @param {PersonJiraAccountCreateManyAndReturnArgs} args - Arguments to create many PersonJiraAccounts.
   * @example
   * // Create many PersonJiraAccounts
   * const personJiraAccount = await prisma.personJiraAccount.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many PersonJiraAccounts and only return the `id`
   * const personJiraAccountWithIdOnly = await prisma.personJiraAccount.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PersonJiraAccountCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      PersonJiraAccountCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a PersonJiraAccount.
   * @param {PersonJiraAccountDeleteArgs} args - Arguments to delete one PersonJiraAccount.
   * @example
   * // Delete one PersonJiraAccount
   * const PersonJiraAccount = await prisma.personJiraAccount.delete({
   *   where: {
   *     // ... filter to delete one PersonJiraAccount
   *   }
   * })
   *
   */
  delete<T extends PersonJiraAccountDeleteArgs>(
    args: Prisma.SelectSubset<T, PersonJiraAccountDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__PersonJiraAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one PersonJiraAccount.
   * @param {PersonJiraAccountUpdateArgs} args - Arguments to update one PersonJiraAccount.
   * @example
   * // Update one PersonJiraAccount
   * const personJiraAccount = await prisma.personJiraAccount.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PersonJiraAccountUpdateArgs>(
    args: Prisma.SelectSubset<T, PersonJiraAccountUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__PersonJiraAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more PersonJiraAccounts.
   * @param {PersonJiraAccountDeleteManyArgs} args - Arguments to filter PersonJiraAccounts to delete.
   * @example
   * // Delete a few PersonJiraAccounts
   * const { count } = await prisma.personJiraAccount.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PersonJiraAccountDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PersonJiraAccountDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PersonJiraAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonJiraAccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PersonJiraAccounts
   * const personJiraAccount = await prisma.personJiraAccount.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PersonJiraAccountUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PersonJiraAccountUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PersonJiraAccounts and returns the data updated in the database.
   * @param {PersonJiraAccountUpdateManyAndReturnArgs} args - Arguments to update many PersonJiraAccounts.
   * @example
   * // Update many PersonJiraAccounts
   * const personJiraAccount = await prisma.personJiraAccount.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more PersonJiraAccounts and only return the `id`
   * const personJiraAccountWithIdOnly = await prisma.personJiraAccount.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PersonJiraAccountUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      PersonJiraAccountUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one PersonJiraAccount.
   * @param {PersonJiraAccountUpsertArgs} args - Arguments to update or create a PersonJiraAccount.
   * @example
   * // Update or create a PersonJiraAccount
   * const personJiraAccount = await prisma.personJiraAccount.upsert({
   *   create: {
   *     // ... data to create a PersonJiraAccount
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PersonJiraAccount we want to update
   *   }
   * })
   */
  upsert<T extends PersonJiraAccountUpsertArgs>(
    args: Prisma.SelectSubset<T, PersonJiraAccountUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__PersonJiraAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonJiraAccountPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of PersonJiraAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonJiraAccountCountArgs} args - Arguments to filter PersonJiraAccounts to count.
   * @example
   * // Count the number of PersonJiraAccounts
   * const count = await prisma.personJiraAccount.count({
   *   where: {
   *     // ... the filter for the PersonJiraAccounts we want to count
   *   }
   * })
   **/
  count<T extends PersonJiraAccountCountArgs>(
    args?: Prisma.Subset<T, PersonJiraAccountCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            PersonJiraAccountCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PersonJiraAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonJiraAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PersonJiraAccountAggregateArgs>(
    args: Prisma.Subset<T, PersonJiraAccountAggregateArgs>
  ): Prisma.PrismaPromise<GetPersonJiraAccountAggregateType<T>>

  /**
   * Group by PersonJiraAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonJiraAccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PersonJiraAccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PersonJiraAccountGroupByArgs['orderBy'] }
      : { orderBy?: PersonJiraAccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      PersonJiraAccountGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetPersonJiraAccountGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonJiraAccount model
   */
  readonly fields: PersonJiraAccountFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for PersonJiraAccount.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PersonJiraAccountClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  person<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the PersonJiraAccount model
 */
export interface PersonJiraAccountFieldRefs {
  readonly id: Prisma.FieldRef<'PersonJiraAccount', 'String'>
  readonly personId: Prisma.FieldRef<'PersonJiraAccount', 'String'>
  readonly jiraAccountId: Prisma.FieldRef<'PersonJiraAccount', 'String'>
  readonly jiraEmail: Prisma.FieldRef<'PersonJiraAccount', 'String'>
  readonly jiraDisplayName: Prisma.FieldRef<'PersonJiraAccount', 'String'>
  readonly createdAt: Prisma.FieldRef<'PersonJiraAccount', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'PersonJiraAccount', 'DateTime'>
}

// Custom InputTypes
/**
 * PersonJiraAccount findUnique
 */
export type PersonJiraAccountFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonJiraAccount to fetch.
   */
  where: Prisma.PersonJiraAccountWhereUniqueInput
}

/**
 * PersonJiraAccount findUniqueOrThrow
 */
export type PersonJiraAccountFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonJiraAccount to fetch.
   */
  where: Prisma.PersonJiraAccountWhereUniqueInput
}

/**
 * PersonJiraAccount findFirst
 */
export type PersonJiraAccountFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonJiraAccount to fetch.
   */
  where?: Prisma.PersonJiraAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonJiraAccounts to fetch.
   */
  orderBy?:
    | Prisma.PersonJiraAccountOrderByWithRelationInput
    | Prisma.PersonJiraAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PersonJiraAccounts.
   */
  cursor?: Prisma.PersonJiraAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonJiraAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonJiraAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PersonJiraAccounts.
   */
  distinct?:
    | Prisma.PersonJiraAccountScalarFieldEnum
    | Prisma.PersonJiraAccountScalarFieldEnum[]
}

/**
 * PersonJiraAccount findFirstOrThrow
 */
export type PersonJiraAccountFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonJiraAccount to fetch.
   */
  where?: Prisma.PersonJiraAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonJiraAccounts to fetch.
   */
  orderBy?:
    | Prisma.PersonJiraAccountOrderByWithRelationInput
    | Prisma.PersonJiraAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PersonJiraAccounts.
   */
  cursor?: Prisma.PersonJiraAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonJiraAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonJiraAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PersonJiraAccounts.
   */
  distinct?:
    | Prisma.PersonJiraAccountScalarFieldEnum
    | Prisma.PersonJiraAccountScalarFieldEnum[]
}

/**
 * PersonJiraAccount findMany
 */
export type PersonJiraAccountFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonJiraAccounts to fetch.
   */
  where?: Prisma.PersonJiraAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonJiraAccounts to fetch.
   */
  orderBy?:
    | Prisma.PersonJiraAccountOrderByWithRelationInput
    | Prisma.PersonJiraAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing PersonJiraAccounts.
   */
  cursor?: Prisma.PersonJiraAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonJiraAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonJiraAccounts.
   */
  skip?: number
  distinct?:
    | Prisma.PersonJiraAccountScalarFieldEnum
    | Prisma.PersonJiraAccountScalarFieldEnum[]
}

/**
 * PersonJiraAccount create
 */
export type PersonJiraAccountCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * The data needed to create a PersonJiraAccount.
   */
  data: Prisma.XOR<
    Prisma.PersonJiraAccountCreateInput,
    Prisma.PersonJiraAccountUncheckedCreateInput
  >
}

/**
 * PersonJiraAccount createMany
 */
export type PersonJiraAccountCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many PersonJiraAccounts.
   */
  data:
    | Prisma.PersonJiraAccountCreateManyInput
    | Prisma.PersonJiraAccountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PersonJiraAccount createManyAndReturn
 */
export type PersonJiraAccountCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * The data used to create many PersonJiraAccounts.
   */
  data:
    | Prisma.PersonJiraAccountCreateManyInput
    | Prisma.PersonJiraAccountCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PersonJiraAccount update
 */
export type PersonJiraAccountUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * The data needed to update a PersonJiraAccount.
   */
  data: Prisma.XOR<
    Prisma.PersonJiraAccountUpdateInput,
    Prisma.PersonJiraAccountUncheckedUpdateInput
  >
  /**
   * Choose, which PersonJiraAccount to update.
   */
  where: Prisma.PersonJiraAccountWhereUniqueInput
}

/**
 * PersonJiraAccount updateMany
 */
export type PersonJiraAccountUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update PersonJiraAccounts.
   */
  data: Prisma.XOR<
    Prisma.PersonJiraAccountUpdateManyMutationInput,
    Prisma.PersonJiraAccountUncheckedUpdateManyInput
  >
  /**
   * Filter which PersonJiraAccounts to update
   */
  where?: Prisma.PersonJiraAccountWhereInput
  /**
   * Limit how many PersonJiraAccounts to update.
   */
  limit?: number
}

/**
 * PersonJiraAccount updateManyAndReturn
 */
export type PersonJiraAccountUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * The data used to update PersonJiraAccounts.
   */
  data: Prisma.XOR<
    Prisma.PersonJiraAccountUpdateManyMutationInput,
    Prisma.PersonJiraAccountUncheckedUpdateManyInput
  >
  /**
   * Filter which PersonJiraAccounts to update
   */
  where?: Prisma.PersonJiraAccountWhereInput
  /**
   * Limit how many PersonJiraAccounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PersonJiraAccount upsert
 */
export type PersonJiraAccountUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * The filter to search for the PersonJiraAccount to update in case it exists.
   */
  where: Prisma.PersonJiraAccountWhereUniqueInput
  /**
   * In case the PersonJiraAccount found by the `where` argument doesn't exist, create a new PersonJiraAccount with this data.
   */
  create: Prisma.XOR<
    Prisma.PersonJiraAccountCreateInput,
    Prisma.PersonJiraAccountUncheckedCreateInput
  >
  /**
   * In case the PersonJiraAccount was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.PersonJiraAccountUpdateInput,
    Prisma.PersonJiraAccountUncheckedUpdateInput
  >
}

/**
 * PersonJiraAccount delete
 */
export type PersonJiraAccountDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
  /**
   * Filter which PersonJiraAccount to delete.
   */
  where: Prisma.PersonJiraAccountWhereUniqueInput
}

/**
 * PersonJiraAccount deleteMany
 */
export type PersonJiraAccountDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PersonJiraAccounts to delete
   */
  where?: Prisma.PersonJiraAccountWhereInput
  /**
   * Limit how many PersonJiraAccounts to delete.
   */
  limit?: number
}

/**
 * PersonJiraAccount without action
 */
export type PersonJiraAccountDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonJiraAccount
   */
  select?: Prisma.PersonJiraAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonJiraAccount
   */
  omit?: Prisma.PersonJiraAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonJiraAccountInclude<ExtArgs> | null
}
