/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `OneOnOne` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model OneOnOne
 *
 */
export type OneOnOneModel =
  runtime.Types.Result.DefaultSelection<Prisma.$OneOnOnePayload>

export type AggregateOneOnOne = {
  _count: OneOnOneCountAggregateOutputType | null
  _min: OneOnOneMinAggregateOutputType | null
  _max: OneOnOneMaxAggregateOutputType | null
}

export type OneOnOneMinAggregateOutputType = {
  id: string | null
  managerId: string | null
  reportId: string | null
  scheduledAt: Date | null
  notes: string | null
}

export type OneOnOneMaxAggregateOutputType = {
  id: string | null
  managerId: string | null
  reportId: string | null
  scheduledAt: Date | null
  notes: string | null
}

export type OneOnOneCountAggregateOutputType = {
  id: number
  managerId: number
  reportId: number
  scheduledAt: number
  notes: number
  _all: number
}

export type OneOnOneMinAggregateInputType = {
  id?: true
  managerId?: true
  reportId?: true
  scheduledAt?: true
  notes?: true
}

export type OneOnOneMaxAggregateInputType = {
  id?: true
  managerId?: true
  reportId?: true
  scheduledAt?: true
  notes?: true
}

export type OneOnOneCountAggregateInputType = {
  id?: true
  managerId?: true
  reportId?: true
  scheduledAt?: true
  notes?: true
  _all?: true
}

export type OneOnOneAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which OneOnOne to aggregate.
   */
  where?: Prisma.OneOnOneWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OneOnOnes to fetch.
   */
  orderBy?:
    | Prisma.OneOnOneOrderByWithRelationInput
    | Prisma.OneOnOneOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.OneOnOneWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OneOnOnes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OneOnOnes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned OneOnOnes
   **/
  _count?: true | OneOnOneCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: OneOnOneMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: OneOnOneMaxAggregateInputType
}

export type GetOneOnOneAggregateType<T extends OneOnOneAggregateArgs> = {
  [P in keyof T & keyof AggregateOneOnOne]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOneOnOne[P]>
    : Prisma.GetScalarType<T[P], AggregateOneOnOne[P]>
}

export type OneOnOneGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.OneOnOneWhereInput
  orderBy?:
    | Prisma.OneOnOneOrderByWithAggregationInput
    | Prisma.OneOnOneOrderByWithAggregationInput[]
  by: Prisma.OneOnOneScalarFieldEnum[] | Prisma.OneOnOneScalarFieldEnum
  having?: Prisma.OneOnOneScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OneOnOneCountAggregateInputType | true
  _min?: OneOnOneMinAggregateInputType
  _max?: OneOnOneMaxAggregateInputType
}

export type OneOnOneGroupByOutputType = {
  id: string
  managerId: string
  reportId: string
  scheduledAt: Date | null
  notes: string | null
  _count: OneOnOneCountAggregateOutputType | null
  _min: OneOnOneMinAggregateOutputType | null
  _max: OneOnOneMaxAggregateOutputType | null
}

type GetOneOnOneGroupByPayload<T extends OneOnOneGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<OneOnOneGroupByOutputType, T['by']> & {
        [P in keyof T & keyof OneOnOneGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OneOnOneGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OneOnOneGroupByOutputType[P]>
      }
    >
  >

export type OneOnOneWhereInput = {
  AND?: Prisma.OneOnOneWhereInput | Prisma.OneOnOneWhereInput[]
  OR?: Prisma.OneOnOneWhereInput[]
  NOT?: Prisma.OneOnOneWhereInput | Prisma.OneOnOneWhereInput[]
  id?: Prisma.StringFilter<'OneOnOne'> | string
  managerId?: Prisma.StringFilter<'OneOnOne'> | string
  reportId?: Prisma.StringFilter<'OneOnOne'> | string
  scheduledAt?: Prisma.DateTimeNullableFilter<'OneOnOne'> | Date | string | null
  notes?: Prisma.StringNullableFilter<'OneOnOne'> | string | null
  manager?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
  report?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
}

export type OneOnOneOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  managerId?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  manager?: Prisma.PersonOrderByWithRelationInput
  report?: Prisma.PersonOrderByWithRelationInput
}

export type OneOnOneWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.OneOnOneWhereInput | Prisma.OneOnOneWhereInput[]
    OR?: Prisma.OneOnOneWhereInput[]
    NOT?: Prisma.OneOnOneWhereInput | Prisma.OneOnOneWhereInput[]
    managerId?: Prisma.StringFilter<'OneOnOne'> | string
    reportId?: Prisma.StringFilter<'OneOnOne'> | string
    scheduledAt?:
      | Prisma.DateTimeNullableFilter<'OneOnOne'>
      | Date
      | string
      | null
    notes?: Prisma.StringNullableFilter<'OneOnOne'> | string | null
    manager?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
    report?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
  },
  'id'
>

export type OneOnOneOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  managerId?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.OneOnOneCountOrderByAggregateInput
  _max?: Prisma.OneOnOneMaxOrderByAggregateInput
  _min?: Prisma.OneOnOneMinOrderByAggregateInput
}

export type OneOnOneScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.OneOnOneScalarWhereWithAggregatesInput
    | Prisma.OneOnOneScalarWhereWithAggregatesInput[]
  OR?: Prisma.OneOnOneScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.OneOnOneScalarWhereWithAggregatesInput
    | Prisma.OneOnOneScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'OneOnOne'> | string
  managerId?: Prisma.StringWithAggregatesFilter<'OneOnOne'> | string
  reportId?: Prisma.StringWithAggregatesFilter<'OneOnOne'> | string
  scheduledAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'OneOnOne'>
    | Date
    | string
    | null
  notes?: Prisma.StringNullableWithAggregatesFilter<'OneOnOne'> | string | null
}

export type OneOnOneCreateInput = {
  id?: string
  scheduledAt?: Date | string | null
  notes?: string | null
  manager: Prisma.PersonCreateNestedOneWithoutOneOnOnesAsManagerInput
  report: Prisma.PersonCreateNestedOneWithoutOneOnOnesInput
}

export type OneOnOneUncheckedCreateInput = {
  id?: string
  managerId: string
  reportId: string
  scheduledAt?: Date | string | null
  notes?: string | null
}

export type OneOnOneUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  manager?: Prisma.PersonUpdateOneRequiredWithoutOneOnOnesAsManagerNestedInput
  report?: Prisma.PersonUpdateOneRequiredWithoutOneOnOnesNestedInput
}

export type OneOnOneUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  managerId?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type OneOnOneCreateManyInput = {
  id?: string
  managerId: string
  reportId: string
  scheduledAt?: Date | string | null
  notes?: string | null
}

export type OneOnOneUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type OneOnOneUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  managerId?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type OneOnOneListRelationFilter = {
  every?: Prisma.OneOnOneWhereInput
  some?: Prisma.OneOnOneWhereInput
  none?: Prisma.OneOnOneWhereInput
}

export type OneOnOneOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OneOnOneCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  managerId?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type OneOnOneMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  managerId?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type OneOnOneMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  managerId?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type OneOnOneCreateNestedManyWithoutReportInput = {
  create?:
    | Prisma.XOR<
        Prisma.OneOnOneCreateWithoutReportInput,
        Prisma.OneOnOneUncheckedCreateWithoutReportInput
      >
    | Prisma.OneOnOneCreateWithoutReportInput[]
    | Prisma.OneOnOneUncheckedCreateWithoutReportInput[]
  connectOrCreate?:
    | Prisma.OneOnOneCreateOrConnectWithoutReportInput
    | Prisma.OneOnOneCreateOrConnectWithoutReportInput[]
  createMany?: Prisma.OneOnOneCreateManyReportInputEnvelope
  connect?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
}

export type OneOnOneCreateNestedManyWithoutManagerInput = {
  create?:
    | Prisma.XOR<
        Prisma.OneOnOneCreateWithoutManagerInput,
        Prisma.OneOnOneUncheckedCreateWithoutManagerInput
      >
    | Prisma.OneOnOneCreateWithoutManagerInput[]
    | Prisma.OneOnOneUncheckedCreateWithoutManagerInput[]
  connectOrCreate?:
    | Prisma.OneOnOneCreateOrConnectWithoutManagerInput
    | Prisma.OneOnOneCreateOrConnectWithoutManagerInput[]
  createMany?: Prisma.OneOnOneCreateManyManagerInputEnvelope
  connect?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
}

export type OneOnOneUncheckedCreateNestedManyWithoutReportInput = {
  create?:
    | Prisma.XOR<
        Prisma.OneOnOneCreateWithoutReportInput,
        Prisma.OneOnOneUncheckedCreateWithoutReportInput
      >
    | Prisma.OneOnOneCreateWithoutReportInput[]
    | Prisma.OneOnOneUncheckedCreateWithoutReportInput[]
  connectOrCreate?:
    | Prisma.OneOnOneCreateOrConnectWithoutReportInput
    | Prisma.OneOnOneCreateOrConnectWithoutReportInput[]
  createMany?: Prisma.OneOnOneCreateManyReportInputEnvelope
  connect?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
}

export type OneOnOneUncheckedCreateNestedManyWithoutManagerInput = {
  create?:
    | Prisma.XOR<
        Prisma.OneOnOneCreateWithoutManagerInput,
        Prisma.OneOnOneUncheckedCreateWithoutManagerInput
      >
    | Prisma.OneOnOneCreateWithoutManagerInput[]
    | Prisma.OneOnOneUncheckedCreateWithoutManagerInput[]
  connectOrCreate?:
    | Prisma.OneOnOneCreateOrConnectWithoutManagerInput
    | Prisma.OneOnOneCreateOrConnectWithoutManagerInput[]
  createMany?: Prisma.OneOnOneCreateManyManagerInputEnvelope
  connect?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
}

export type OneOnOneUpdateManyWithoutReportNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OneOnOneCreateWithoutReportInput,
        Prisma.OneOnOneUncheckedCreateWithoutReportInput
      >
    | Prisma.OneOnOneCreateWithoutReportInput[]
    | Prisma.OneOnOneUncheckedCreateWithoutReportInput[]
  connectOrCreate?:
    | Prisma.OneOnOneCreateOrConnectWithoutReportInput
    | Prisma.OneOnOneCreateOrConnectWithoutReportInput[]
  upsert?:
    | Prisma.OneOnOneUpsertWithWhereUniqueWithoutReportInput
    | Prisma.OneOnOneUpsertWithWhereUniqueWithoutReportInput[]
  createMany?: Prisma.OneOnOneCreateManyReportInputEnvelope
  set?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  disconnect?:
    | Prisma.OneOnOneWhereUniqueInput
    | Prisma.OneOnOneWhereUniqueInput[]
  delete?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  connect?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  update?:
    | Prisma.OneOnOneUpdateWithWhereUniqueWithoutReportInput
    | Prisma.OneOnOneUpdateWithWhereUniqueWithoutReportInput[]
  updateMany?:
    | Prisma.OneOnOneUpdateManyWithWhereWithoutReportInput
    | Prisma.OneOnOneUpdateManyWithWhereWithoutReportInput[]
  deleteMany?:
    | Prisma.OneOnOneScalarWhereInput
    | Prisma.OneOnOneScalarWhereInput[]
}

export type OneOnOneUpdateManyWithoutManagerNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OneOnOneCreateWithoutManagerInput,
        Prisma.OneOnOneUncheckedCreateWithoutManagerInput
      >
    | Prisma.OneOnOneCreateWithoutManagerInput[]
    | Prisma.OneOnOneUncheckedCreateWithoutManagerInput[]
  connectOrCreate?:
    | Prisma.OneOnOneCreateOrConnectWithoutManagerInput
    | Prisma.OneOnOneCreateOrConnectWithoutManagerInput[]
  upsert?:
    | Prisma.OneOnOneUpsertWithWhereUniqueWithoutManagerInput
    | Prisma.OneOnOneUpsertWithWhereUniqueWithoutManagerInput[]
  createMany?: Prisma.OneOnOneCreateManyManagerInputEnvelope
  set?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  disconnect?:
    | Prisma.OneOnOneWhereUniqueInput
    | Prisma.OneOnOneWhereUniqueInput[]
  delete?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  connect?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  update?:
    | Prisma.OneOnOneUpdateWithWhereUniqueWithoutManagerInput
    | Prisma.OneOnOneUpdateWithWhereUniqueWithoutManagerInput[]
  updateMany?:
    | Prisma.OneOnOneUpdateManyWithWhereWithoutManagerInput
    | Prisma.OneOnOneUpdateManyWithWhereWithoutManagerInput[]
  deleteMany?:
    | Prisma.OneOnOneScalarWhereInput
    | Prisma.OneOnOneScalarWhereInput[]
}

export type OneOnOneUncheckedUpdateManyWithoutReportNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OneOnOneCreateWithoutReportInput,
        Prisma.OneOnOneUncheckedCreateWithoutReportInput
      >
    | Prisma.OneOnOneCreateWithoutReportInput[]
    | Prisma.OneOnOneUncheckedCreateWithoutReportInput[]
  connectOrCreate?:
    | Prisma.OneOnOneCreateOrConnectWithoutReportInput
    | Prisma.OneOnOneCreateOrConnectWithoutReportInput[]
  upsert?:
    | Prisma.OneOnOneUpsertWithWhereUniqueWithoutReportInput
    | Prisma.OneOnOneUpsertWithWhereUniqueWithoutReportInput[]
  createMany?: Prisma.OneOnOneCreateManyReportInputEnvelope
  set?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  disconnect?:
    | Prisma.OneOnOneWhereUniqueInput
    | Prisma.OneOnOneWhereUniqueInput[]
  delete?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  connect?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  update?:
    | Prisma.OneOnOneUpdateWithWhereUniqueWithoutReportInput
    | Prisma.OneOnOneUpdateWithWhereUniqueWithoutReportInput[]
  updateMany?:
    | Prisma.OneOnOneUpdateManyWithWhereWithoutReportInput
    | Prisma.OneOnOneUpdateManyWithWhereWithoutReportInput[]
  deleteMany?:
    | Prisma.OneOnOneScalarWhereInput
    | Prisma.OneOnOneScalarWhereInput[]
}

export type OneOnOneUncheckedUpdateManyWithoutManagerNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OneOnOneCreateWithoutManagerInput,
        Prisma.OneOnOneUncheckedCreateWithoutManagerInput
      >
    | Prisma.OneOnOneCreateWithoutManagerInput[]
    | Prisma.OneOnOneUncheckedCreateWithoutManagerInput[]
  connectOrCreate?:
    | Prisma.OneOnOneCreateOrConnectWithoutManagerInput
    | Prisma.OneOnOneCreateOrConnectWithoutManagerInput[]
  upsert?:
    | Prisma.OneOnOneUpsertWithWhereUniqueWithoutManagerInput
    | Prisma.OneOnOneUpsertWithWhereUniqueWithoutManagerInput[]
  createMany?: Prisma.OneOnOneCreateManyManagerInputEnvelope
  set?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  disconnect?:
    | Prisma.OneOnOneWhereUniqueInput
    | Prisma.OneOnOneWhereUniqueInput[]
  delete?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  connect?: Prisma.OneOnOneWhereUniqueInput | Prisma.OneOnOneWhereUniqueInput[]
  update?:
    | Prisma.OneOnOneUpdateWithWhereUniqueWithoutManagerInput
    | Prisma.OneOnOneUpdateWithWhereUniqueWithoutManagerInput[]
  updateMany?:
    | Prisma.OneOnOneUpdateManyWithWhereWithoutManagerInput
    | Prisma.OneOnOneUpdateManyWithWhereWithoutManagerInput[]
  deleteMany?:
    | Prisma.OneOnOneScalarWhereInput
    | Prisma.OneOnOneScalarWhereInput[]
}

export type OneOnOneCreateWithoutReportInput = {
  id?: string
  scheduledAt?: Date | string | null
  notes?: string | null
  manager: Prisma.PersonCreateNestedOneWithoutOneOnOnesAsManagerInput
}

export type OneOnOneUncheckedCreateWithoutReportInput = {
  id?: string
  managerId: string
  scheduledAt?: Date | string | null
  notes?: string | null
}

export type OneOnOneCreateOrConnectWithoutReportInput = {
  where: Prisma.OneOnOneWhereUniqueInput
  create: Prisma.XOR<
    Prisma.OneOnOneCreateWithoutReportInput,
    Prisma.OneOnOneUncheckedCreateWithoutReportInput
  >
}

export type OneOnOneCreateManyReportInputEnvelope = {
  data:
    | Prisma.OneOnOneCreateManyReportInput
    | Prisma.OneOnOneCreateManyReportInput[]
  skipDuplicates?: boolean
}

export type OneOnOneCreateWithoutManagerInput = {
  id?: string
  scheduledAt?: Date | string | null
  notes?: string | null
  report: Prisma.PersonCreateNestedOneWithoutOneOnOnesInput
}

export type OneOnOneUncheckedCreateWithoutManagerInput = {
  id?: string
  reportId: string
  scheduledAt?: Date | string | null
  notes?: string | null
}

export type OneOnOneCreateOrConnectWithoutManagerInput = {
  where: Prisma.OneOnOneWhereUniqueInput
  create: Prisma.XOR<
    Prisma.OneOnOneCreateWithoutManagerInput,
    Prisma.OneOnOneUncheckedCreateWithoutManagerInput
  >
}

export type OneOnOneCreateManyManagerInputEnvelope = {
  data:
    | Prisma.OneOnOneCreateManyManagerInput
    | Prisma.OneOnOneCreateManyManagerInput[]
  skipDuplicates?: boolean
}

export type OneOnOneUpsertWithWhereUniqueWithoutReportInput = {
  where: Prisma.OneOnOneWhereUniqueInput
  update: Prisma.XOR<
    Prisma.OneOnOneUpdateWithoutReportInput,
    Prisma.OneOnOneUncheckedUpdateWithoutReportInput
  >
  create: Prisma.XOR<
    Prisma.OneOnOneCreateWithoutReportInput,
    Prisma.OneOnOneUncheckedCreateWithoutReportInput
  >
}

export type OneOnOneUpdateWithWhereUniqueWithoutReportInput = {
  where: Prisma.OneOnOneWhereUniqueInput
  data: Prisma.XOR<
    Prisma.OneOnOneUpdateWithoutReportInput,
    Prisma.OneOnOneUncheckedUpdateWithoutReportInput
  >
}

export type OneOnOneUpdateManyWithWhereWithoutReportInput = {
  where: Prisma.OneOnOneScalarWhereInput
  data: Prisma.XOR<
    Prisma.OneOnOneUpdateManyMutationInput,
    Prisma.OneOnOneUncheckedUpdateManyWithoutReportInput
  >
}

export type OneOnOneScalarWhereInput = {
  AND?: Prisma.OneOnOneScalarWhereInput | Prisma.OneOnOneScalarWhereInput[]
  OR?: Prisma.OneOnOneScalarWhereInput[]
  NOT?: Prisma.OneOnOneScalarWhereInput | Prisma.OneOnOneScalarWhereInput[]
  id?: Prisma.StringFilter<'OneOnOne'> | string
  managerId?: Prisma.StringFilter<'OneOnOne'> | string
  reportId?: Prisma.StringFilter<'OneOnOne'> | string
  scheduledAt?: Prisma.DateTimeNullableFilter<'OneOnOne'> | Date | string | null
  notes?: Prisma.StringNullableFilter<'OneOnOne'> | string | null
}

export type OneOnOneUpsertWithWhereUniqueWithoutManagerInput = {
  where: Prisma.OneOnOneWhereUniqueInput
  update: Prisma.XOR<
    Prisma.OneOnOneUpdateWithoutManagerInput,
    Prisma.OneOnOneUncheckedUpdateWithoutManagerInput
  >
  create: Prisma.XOR<
    Prisma.OneOnOneCreateWithoutManagerInput,
    Prisma.OneOnOneUncheckedCreateWithoutManagerInput
  >
}

export type OneOnOneUpdateWithWhereUniqueWithoutManagerInput = {
  where: Prisma.OneOnOneWhereUniqueInput
  data: Prisma.XOR<
    Prisma.OneOnOneUpdateWithoutManagerInput,
    Prisma.OneOnOneUncheckedUpdateWithoutManagerInput
  >
}

export type OneOnOneUpdateManyWithWhereWithoutManagerInput = {
  where: Prisma.OneOnOneScalarWhereInput
  data: Prisma.XOR<
    Prisma.OneOnOneUpdateManyMutationInput,
    Prisma.OneOnOneUncheckedUpdateManyWithoutManagerInput
  >
}

export type OneOnOneCreateManyReportInput = {
  id?: string
  managerId: string
  scheduledAt?: Date | string | null
  notes?: string | null
}

export type OneOnOneCreateManyManagerInput = {
  id?: string
  reportId: string
  scheduledAt?: Date | string | null
  notes?: string | null
}

export type OneOnOneUpdateWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  manager?: Prisma.PersonUpdateOneRequiredWithoutOneOnOnesAsManagerNestedInput
}

export type OneOnOneUncheckedUpdateWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  managerId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type OneOnOneUncheckedUpdateManyWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  managerId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type OneOnOneUpdateWithoutManagerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  report?: Prisma.PersonUpdateOneRequiredWithoutOneOnOnesNestedInput
}

export type OneOnOneUncheckedUpdateWithoutManagerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type OneOnOneUncheckedUpdateManyWithoutManagerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type OneOnOneSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    managerId?: boolean
    reportId?: boolean
    scheduledAt?: boolean
    notes?: boolean
    manager?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
    report?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['oneOnOne']
>

export type OneOnOneSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    managerId?: boolean
    reportId?: boolean
    scheduledAt?: boolean
    notes?: boolean
    manager?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
    report?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['oneOnOne']
>

export type OneOnOneSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    managerId?: boolean
    reportId?: boolean
    scheduledAt?: boolean
    notes?: boolean
    manager?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
    report?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['oneOnOne']
>

export type OneOnOneSelectScalar = {
  id?: boolean
  managerId?: boolean
  reportId?: boolean
  scheduledAt?: boolean
  notes?: boolean
}

export type OneOnOneOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'managerId' | 'reportId' | 'scheduledAt' | 'notes',
  ExtArgs['result']['oneOnOne']
>
export type OneOnOneInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  manager?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  report?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type OneOnOneIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  manager?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  report?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type OneOnOneIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  manager?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  report?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}

export type $OneOnOnePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'OneOnOne'
  objects: {
    manager: Prisma.$PersonPayload<ExtArgs>
    report: Prisma.$PersonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      managerId: string
      reportId: string
      scheduledAt: Date | null
      notes: string | null
    },
    ExtArgs['result']['oneOnOne']
  >
  composites: {}
}

export type OneOnOneGetPayload<
  S extends boolean | null | undefined | OneOnOneDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$OneOnOnePayload, S>

export type OneOnOneCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<OneOnOneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: OneOnOneCountAggregateInputType | true
}

export interface OneOnOneDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['OneOnOne']
    meta: { name: 'OneOnOne' }
  }
  /**
   * Find zero or one OneOnOne that matches the filter.
   * @param {OneOnOneFindUniqueArgs} args - Arguments to find a OneOnOne
   * @example
   * // Get one OneOnOne
   * const oneOnOne = await prisma.oneOnOne.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OneOnOneFindUniqueArgs>(
    args: Prisma.SelectSubset<T, OneOnOneFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__OneOnOneClient<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one OneOnOne that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OneOnOneFindUniqueOrThrowArgs} args - Arguments to find a OneOnOne
   * @example
   * // Get one OneOnOne
   * const oneOnOne = await prisma.oneOnOne.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OneOnOneFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, OneOnOneFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__OneOnOneClient<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first OneOnOne that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OneOnOneFindFirstArgs} args - Arguments to find a OneOnOne
   * @example
   * // Get one OneOnOne
   * const oneOnOne = await prisma.oneOnOne.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OneOnOneFindFirstArgs>(
    args?: Prisma.SelectSubset<T, OneOnOneFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__OneOnOneClient<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first OneOnOne that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OneOnOneFindFirstOrThrowArgs} args - Arguments to find a OneOnOne
   * @example
   * // Get one OneOnOne
   * const oneOnOne = await prisma.oneOnOne.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OneOnOneFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, OneOnOneFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__OneOnOneClient<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more OneOnOnes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OneOnOneFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OneOnOnes
   * const oneOnOnes = await prisma.oneOnOne.findMany()
   *
   * // Get first 10 OneOnOnes
   * const oneOnOnes = await prisma.oneOnOne.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const oneOnOneWithIdOnly = await prisma.oneOnOne.findMany({ select: { id: true } })
   *
   */
  findMany<T extends OneOnOneFindManyArgs>(
    args?: Prisma.SelectSubset<T, OneOnOneFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a OneOnOne.
   * @param {OneOnOneCreateArgs} args - Arguments to create a OneOnOne.
   * @example
   * // Create one OneOnOne
   * const OneOnOne = await prisma.oneOnOne.create({
   *   data: {
   *     // ... data to create a OneOnOne
   *   }
   * })
   *
   */
  create<T extends OneOnOneCreateArgs>(
    args: Prisma.SelectSubset<T, OneOnOneCreateArgs<ExtArgs>>
  ): Prisma.Prisma__OneOnOneClient<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many OneOnOnes.
   * @param {OneOnOneCreateManyArgs} args - Arguments to create many OneOnOnes.
   * @example
   * // Create many OneOnOnes
   * const oneOnOne = await prisma.oneOnOne.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends OneOnOneCreateManyArgs>(
    args?: Prisma.SelectSubset<T, OneOnOneCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OneOnOnes and returns the data saved in the database.
   * @param {OneOnOneCreateManyAndReturnArgs} args - Arguments to create many OneOnOnes.
   * @example
   * // Create many OneOnOnes
   * const oneOnOne = await prisma.oneOnOne.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many OneOnOnes and only return the `id`
   * const oneOnOneWithIdOnly = await prisma.oneOnOne.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends OneOnOneCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, OneOnOneCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a OneOnOne.
   * @param {OneOnOneDeleteArgs} args - Arguments to delete one OneOnOne.
   * @example
   * // Delete one OneOnOne
   * const OneOnOne = await prisma.oneOnOne.delete({
   *   where: {
   *     // ... filter to delete one OneOnOne
   *   }
   * })
   *
   */
  delete<T extends OneOnOneDeleteArgs>(
    args: Prisma.SelectSubset<T, OneOnOneDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__OneOnOneClient<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one OneOnOne.
   * @param {OneOnOneUpdateArgs} args - Arguments to update one OneOnOne.
   * @example
   * // Update one OneOnOne
   * const oneOnOne = await prisma.oneOnOne.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends OneOnOneUpdateArgs>(
    args: Prisma.SelectSubset<T, OneOnOneUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__OneOnOneClient<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more OneOnOnes.
   * @param {OneOnOneDeleteManyArgs} args - Arguments to filter OneOnOnes to delete.
   * @example
   * // Delete a few OneOnOnes
   * const { count } = await prisma.oneOnOne.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends OneOnOneDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, OneOnOneDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OneOnOnes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OneOnOneUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OneOnOnes
   * const oneOnOne = await prisma.oneOnOne.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends OneOnOneUpdateManyArgs>(
    args: Prisma.SelectSubset<T, OneOnOneUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OneOnOnes and returns the data updated in the database.
   * @param {OneOnOneUpdateManyAndReturnArgs} args - Arguments to update many OneOnOnes.
   * @example
   * // Update many OneOnOnes
   * const oneOnOne = await prisma.oneOnOne.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more OneOnOnes and only return the `id`
   * const oneOnOneWithIdOnly = await prisma.oneOnOne.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends OneOnOneUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, OneOnOneUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one OneOnOne.
   * @param {OneOnOneUpsertArgs} args - Arguments to update or create a OneOnOne.
   * @example
   * // Update or create a OneOnOne
   * const oneOnOne = await prisma.oneOnOne.upsert({
   *   create: {
   *     // ... data to create a OneOnOne
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OneOnOne we want to update
   *   }
   * })
   */
  upsert<T extends OneOnOneUpsertArgs>(
    args: Prisma.SelectSubset<T, OneOnOneUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__OneOnOneClient<
    runtime.Types.Result.GetResult<
      Prisma.$OneOnOnePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of OneOnOnes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OneOnOneCountArgs} args - Arguments to filter OneOnOnes to count.
   * @example
   * // Count the number of OneOnOnes
   * const count = await prisma.oneOnOne.count({
   *   where: {
   *     // ... the filter for the OneOnOnes we want to count
   *   }
   * })
   **/
  count<T extends OneOnOneCountArgs>(
    args?: Prisma.Subset<T, OneOnOneCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OneOnOneCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OneOnOne.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OneOnOneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends OneOnOneAggregateArgs>(
    args: Prisma.Subset<T, OneOnOneAggregateArgs>
  ): Prisma.PrismaPromise<GetOneOnOneAggregateType<T>>

  /**
   * Group by OneOnOne.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OneOnOneGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends OneOnOneGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OneOnOneGroupByArgs['orderBy'] }
      : { orderBy?: OneOnOneGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, OneOnOneGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetOneOnOneGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OneOnOne model
   */
  readonly fields: OneOnOneFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for OneOnOne.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OneOnOneClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  manager<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  report<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the OneOnOne model
 */
export interface OneOnOneFieldRefs {
  readonly id: Prisma.FieldRef<'OneOnOne', 'String'>
  readonly managerId: Prisma.FieldRef<'OneOnOne', 'String'>
  readonly reportId: Prisma.FieldRef<'OneOnOne', 'String'>
  readonly scheduledAt: Prisma.FieldRef<'OneOnOne', 'DateTime'>
  readonly notes: Prisma.FieldRef<'OneOnOne', 'String'>
}

// Custom InputTypes
/**
 * OneOnOne findUnique
 */
export type OneOnOneFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * Filter, which OneOnOne to fetch.
   */
  where: Prisma.OneOnOneWhereUniqueInput
}

/**
 * OneOnOne findUniqueOrThrow
 */
export type OneOnOneFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * Filter, which OneOnOne to fetch.
   */
  where: Prisma.OneOnOneWhereUniqueInput
}

/**
 * OneOnOne findFirst
 */
export type OneOnOneFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * Filter, which OneOnOne to fetch.
   */
  where?: Prisma.OneOnOneWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OneOnOnes to fetch.
   */
  orderBy?:
    | Prisma.OneOnOneOrderByWithRelationInput
    | Prisma.OneOnOneOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OneOnOnes.
   */
  cursor?: Prisma.OneOnOneWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OneOnOnes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OneOnOnes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OneOnOnes.
   */
  distinct?: Prisma.OneOnOneScalarFieldEnum | Prisma.OneOnOneScalarFieldEnum[]
}

/**
 * OneOnOne findFirstOrThrow
 */
export type OneOnOneFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * Filter, which OneOnOne to fetch.
   */
  where?: Prisma.OneOnOneWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OneOnOnes to fetch.
   */
  orderBy?:
    | Prisma.OneOnOneOrderByWithRelationInput
    | Prisma.OneOnOneOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OneOnOnes.
   */
  cursor?: Prisma.OneOnOneWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OneOnOnes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OneOnOnes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OneOnOnes.
   */
  distinct?: Prisma.OneOnOneScalarFieldEnum | Prisma.OneOnOneScalarFieldEnum[]
}

/**
 * OneOnOne findMany
 */
export type OneOnOneFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * Filter, which OneOnOnes to fetch.
   */
  where?: Prisma.OneOnOneWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OneOnOnes to fetch.
   */
  orderBy?:
    | Prisma.OneOnOneOrderByWithRelationInput
    | Prisma.OneOnOneOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing OneOnOnes.
   */
  cursor?: Prisma.OneOnOneWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OneOnOnes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OneOnOnes.
   */
  skip?: number
  distinct?: Prisma.OneOnOneScalarFieldEnum | Prisma.OneOnOneScalarFieldEnum[]
}

/**
 * OneOnOne create
 */
export type OneOnOneCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * The data needed to create a OneOnOne.
   */
  data: Prisma.XOR<
    Prisma.OneOnOneCreateInput,
    Prisma.OneOnOneUncheckedCreateInput
  >
}

/**
 * OneOnOne createMany
 */
export type OneOnOneCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many OneOnOnes.
   */
  data: Prisma.OneOnOneCreateManyInput | Prisma.OneOnOneCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * OneOnOne createManyAndReturn
 */
export type OneOnOneCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * The data used to create many OneOnOnes.
   */
  data: Prisma.OneOnOneCreateManyInput | Prisma.OneOnOneCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OneOnOne update
 */
export type OneOnOneUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * The data needed to update a OneOnOne.
   */
  data: Prisma.XOR<
    Prisma.OneOnOneUpdateInput,
    Prisma.OneOnOneUncheckedUpdateInput
  >
  /**
   * Choose, which OneOnOne to update.
   */
  where: Prisma.OneOnOneWhereUniqueInput
}

/**
 * OneOnOne updateMany
 */
export type OneOnOneUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update OneOnOnes.
   */
  data: Prisma.XOR<
    Prisma.OneOnOneUpdateManyMutationInput,
    Prisma.OneOnOneUncheckedUpdateManyInput
  >
  /**
   * Filter which OneOnOnes to update
   */
  where?: Prisma.OneOnOneWhereInput
  /**
   * Limit how many OneOnOnes to update.
   */
  limit?: number
}

/**
 * OneOnOne updateManyAndReturn
 */
export type OneOnOneUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * The data used to update OneOnOnes.
   */
  data: Prisma.XOR<
    Prisma.OneOnOneUpdateManyMutationInput,
    Prisma.OneOnOneUncheckedUpdateManyInput
  >
  /**
   * Filter which OneOnOnes to update
   */
  where?: Prisma.OneOnOneWhereInput
  /**
   * Limit how many OneOnOnes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OneOnOne upsert
 */
export type OneOnOneUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * The filter to search for the OneOnOne to update in case it exists.
   */
  where: Prisma.OneOnOneWhereUniqueInput
  /**
   * In case the OneOnOne found by the `where` argument doesn't exist, create a new OneOnOne with this data.
   */
  create: Prisma.XOR<
    Prisma.OneOnOneCreateInput,
    Prisma.OneOnOneUncheckedCreateInput
  >
  /**
   * In case the OneOnOne was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.OneOnOneUpdateInput,
    Prisma.OneOnOneUncheckedUpdateInput
  >
}

/**
 * OneOnOne delete
 */
export type OneOnOneDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
  /**
   * Filter which OneOnOne to delete.
   */
  where: Prisma.OneOnOneWhereUniqueInput
}

/**
 * OneOnOne deleteMany
 */
export type OneOnOneDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which OneOnOnes to delete
   */
  where?: Prisma.OneOnOneWhereInput
  /**
   * Limit how many OneOnOnes to delete.
   */
  limit?: number
}

/**
 * OneOnOne without action
 */
export type OneOnOneDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OneOnOne
   */
  select?: Prisma.OneOnOneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OneOnOne
   */
  omit?: Prisma.OneOnOneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OneOnOneInclude<ExtArgs> | null
}
