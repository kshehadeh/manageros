/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `IDP` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model IDP
 *
 */
export type IDPModel = runtime.Types.Result.DefaultSelection<Prisma.$IDPPayload>

export type AggregateIDP = {
  _count: IDPCountAggregateOutputType | null
  _min: IDPMinAggregateOutputType | null
  _max: IDPMaxAggregateOutputType | null
}

export type IDPMinAggregateOutputType = {
  id: string | null
  personId: string | null
  period: string | null
  summary: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IDPMaxAggregateOutputType = {
  id: string | null
  personId: string | null
  period: string | null
  summary: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IDPCountAggregateOutputType = {
  id: number
  personId: number
  period: number
  summary: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type IDPMinAggregateInputType = {
  id?: true
  personId?: true
  period?: true
  summary?: true
  createdAt?: true
  updatedAt?: true
}

export type IDPMaxAggregateInputType = {
  id?: true
  personId?: true
  period?: true
  summary?: true
  createdAt?: true
  updatedAt?: true
}

export type IDPCountAggregateInputType = {
  id?: true
  personId?: true
  period?: true
  summary?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type IDPAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which IDP to aggregate.
   */
  where?: Prisma.IDPWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of IDPS to fetch.
   */
  orderBy?:
    | Prisma.IDPOrderByWithRelationInput
    | Prisma.IDPOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.IDPWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` IDPS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` IDPS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned IDPS
   **/
  _count?: true | IDPCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: IDPMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: IDPMaxAggregateInputType
}

export type GetIDPAggregateType<T extends IDPAggregateArgs> = {
  [P in keyof T & keyof AggregateIDP]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIDP[P]>
    : Prisma.GetScalarType<T[P], AggregateIDP[P]>
}

export type IDPGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.IDPWhereInput
  orderBy?:
    | Prisma.IDPOrderByWithAggregationInput
    | Prisma.IDPOrderByWithAggregationInput[]
  by: Prisma.IDPScalarFieldEnum[] | Prisma.IDPScalarFieldEnum
  having?: Prisma.IDPScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IDPCountAggregateInputType | true
  _min?: IDPMinAggregateInputType
  _max?: IDPMaxAggregateInputType
}

export type IDPGroupByOutputType = {
  id: string
  personId: string
  period: string
  summary: string | null
  createdAt: Date
  updatedAt: Date
  _count: IDPCountAggregateOutputType | null
  _min: IDPMinAggregateOutputType | null
  _max: IDPMaxAggregateOutputType | null
}

type GetIDPGroupByPayload<T extends IDPGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IDPGroupByOutputType, T['by']> & {
      [P in keyof T & keyof IDPGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], IDPGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], IDPGroupByOutputType[P]>
    }
  >
>

export type IDPWhereInput = {
  AND?: Prisma.IDPWhereInput | Prisma.IDPWhereInput[]
  OR?: Prisma.IDPWhereInput[]
  NOT?: Prisma.IDPWhereInput | Prisma.IDPWhereInput[]
  id?: Prisma.StringFilter<'IDP'> | string
  personId?: Prisma.StringFilter<'IDP'> | string
  period?: Prisma.StringFilter<'IDP'> | string
  summary?: Prisma.StringNullableFilter<'IDP'> | string | null
  createdAt?: Prisma.DateTimeFilter<'IDP'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'IDP'> | Date | string
  person?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
  goals?: Prisma.IDPGoalListRelationFilter
}

export type IDPOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  period?: Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  person?: Prisma.PersonOrderByWithRelationInput
  goals?: Prisma.IDPGoalOrderByRelationAggregateInput
}

export type IDPWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.IDPWhereInput | Prisma.IDPWhereInput[]
    OR?: Prisma.IDPWhereInput[]
    NOT?: Prisma.IDPWhereInput | Prisma.IDPWhereInput[]
    personId?: Prisma.StringFilter<'IDP'> | string
    period?: Prisma.StringFilter<'IDP'> | string
    summary?: Prisma.StringNullableFilter<'IDP'> | string | null
    createdAt?: Prisma.DateTimeFilter<'IDP'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'IDP'> | Date | string
    person?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
    goals?: Prisma.IDPGoalListRelationFilter
  },
  'id'
>

export type IDPOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  period?: Prisma.SortOrder
  summary?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.IDPCountOrderByAggregateInput
  _max?: Prisma.IDPMaxOrderByAggregateInput
  _min?: Prisma.IDPMinOrderByAggregateInput
}

export type IDPScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.IDPScalarWhereWithAggregatesInput
    | Prisma.IDPScalarWhereWithAggregatesInput[]
  OR?: Prisma.IDPScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.IDPScalarWhereWithAggregatesInput
    | Prisma.IDPScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'IDP'> | string
  personId?: Prisma.StringWithAggregatesFilter<'IDP'> | string
  period?: Prisma.StringWithAggregatesFilter<'IDP'> | string
  summary?: Prisma.StringNullableWithAggregatesFilter<'IDP'> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'IDP'> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'IDP'> | Date | string
}

export type IDPCreateInput = {
  id?: string
  period: string
  summary?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  person: Prisma.PersonCreateNestedOneWithoutIdpsInput
  goals?: Prisma.IDPGoalCreateNestedManyWithoutIdpInput
}

export type IDPUncheckedCreateInput = {
  id?: string
  personId: string
  period: string
  summary?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  goals?: Prisma.IDPGoalUncheckedCreateNestedManyWithoutIdpInput
}

export type IDPUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  person?: Prisma.PersonUpdateOneRequiredWithoutIdpsNestedInput
  goals?: Prisma.IDPGoalUpdateManyWithoutIdpNestedInput
}

export type IDPUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  goals?: Prisma.IDPGoalUncheckedUpdateManyWithoutIdpNestedInput
}

export type IDPCreateManyInput = {
  id?: string
  personId: string
  period: string
  summary?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IDPUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IDPUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IDPListRelationFilter = {
  every?: Prisma.IDPWhereInput
  some?: Prisma.IDPWhereInput
  none?: Prisma.IDPWhereInput
}

export type IDPOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IDPCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  period?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IDPMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  period?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IDPMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  period?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IDPScalarRelationFilter = {
  is?: Prisma.IDPWhereInput
  isNot?: Prisma.IDPWhereInput
}

export type IDPCreateNestedManyWithoutPersonInput = {
  create?:
    | Prisma.XOR<
        Prisma.IDPCreateWithoutPersonInput,
        Prisma.IDPUncheckedCreateWithoutPersonInput
      >
    | Prisma.IDPCreateWithoutPersonInput[]
    | Prisma.IDPUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.IDPCreateOrConnectWithoutPersonInput
    | Prisma.IDPCreateOrConnectWithoutPersonInput[]
  createMany?: Prisma.IDPCreateManyPersonInputEnvelope
  connect?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
}

export type IDPUncheckedCreateNestedManyWithoutPersonInput = {
  create?:
    | Prisma.XOR<
        Prisma.IDPCreateWithoutPersonInput,
        Prisma.IDPUncheckedCreateWithoutPersonInput
      >
    | Prisma.IDPCreateWithoutPersonInput[]
    | Prisma.IDPUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.IDPCreateOrConnectWithoutPersonInput
    | Prisma.IDPCreateOrConnectWithoutPersonInput[]
  createMany?: Prisma.IDPCreateManyPersonInputEnvelope
  connect?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
}

export type IDPUpdateManyWithoutPersonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IDPCreateWithoutPersonInput,
        Prisma.IDPUncheckedCreateWithoutPersonInput
      >
    | Prisma.IDPCreateWithoutPersonInput[]
    | Prisma.IDPUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.IDPCreateOrConnectWithoutPersonInput
    | Prisma.IDPCreateOrConnectWithoutPersonInput[]
  upsert?:
    | Prisma.IDPUpsertWithWhereUniqueWithoutPersonInput
    | Prisma.IDPUpsertWithWhereUniqueWithoutPersonInput[]
  createMany?: Prisma.IDPCreateManyPersonInputEnvelope
  set?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
  disconnect?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
  delete?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
  connect?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
  update?:
    | Prisma.IDPUpdateWithWhereUniqueWithoutPersonInput
    | Prisma.IDPUpdateWithWhereUniqueWithoutPersonInput[]
  updateMany?:
    | Prisma.IDPUpdateManyWithWhereWithoutPersonInput
    | Prisma.IDPUpdateManyWithWhereWithoutPersonInput[]
  deleteMany?: Prisma.IDPScalarWhereInput | Prisma.IDPScalarWhereInput[]
}

export type IDPUncheckedUpdateManyWithoutPersonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IDPCreateWithoutPersonInput,
        Prisma.IDPUncheckedCreateWithoutPersonInput
      >
    | Prisma.IDPCreateWithoutPersonInput[]
    | Prisma.IDPUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.IDPCreateOrConnectWithoutPersonInput
    | Prisma.IDPCreateOrConnectWithoutPersonInput[]
  upsert?:
    | Prisma.IDPUpsertWithWhereUniqueWithoutPersonInput
    | Prisma.IDPUpsertWithWhereUniqueWithoutPersonInput[]
  createMany?: Prisma.IDPCreateManyPersonInputEnvelope
  set?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
  disconnect?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
  delete?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
  connect?: Prisma.IDPWhereUniqueInput | Prisma.IDPWhereUniqueInput[]
  update?:
    | Prisma.IDPUpdateWithWhereUniqueWithoutPersonInput
    | Prisma.IDPUpdateWithWhereUniqueWithoutPersonInput[]
  updateMany?:
    | Prisma.IDPUpdateManyWithWhereWithoutPersonInput
    | Prisma.IDPUpdateManyWithWhereWithoutPersonInput[]
  deleteMany?: Prisma.IDPScalarWhereInput | Prisma.IDPScalarWhereInput[]
}

export type IDPCreateNestedOneWithoutGoalsInput = {
  create?: Prisma.XOR<
    Prisma.IDPCreateWithoutGoalsInput,
    Prisma.IDPUncheckedCreateWithoutGoalsInput
  >
  connectOrCreate?: Prisma.IDPCreateOrConnectWithoutGoalsInput
  connect?: Prisma.IDPWhereUniqueInput
}

export type IDPUpdateOneRequiredWithoutGoalsNestedInput = {
  create?: Prisma.XOR<
    Prisma.IDPCreateWithoutGoalsInput,
    Prisma.IDPUncheckedCreateWithoutGoalsInput
  >
  connectOrCreate?: Prisma.IDPCreateOrConnectWithoutGoalsInput
  upsert?: Prisma.IDPUpsertWithoutGoalsInput
  connect?: Prisma.IDPWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.IDPUpdateToOneWithWhereWithoutGoalsInput,
      Prisma.IDPUpdateWithoutGoalsInput
    >,
    Prisma.IDPUncheckedUpdateWithoutGoalsInput
  >
}

export type IDPCreateWithoutPersonInput = {
  id?: string
  period: string
  summary?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  goals?: Prisma.IDPGoalCreateNestedManyWithoutIdpInput
}

export type IDPUncheckedCreateWithoutPersonInput = {
  id?: string
  period: string
  summary?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  goals?: Prisma.IDPGoalUncheckedCreateNestedManyWithoutIdpInput
}

export type IDPCreateOrConnectWithoutPersonInput = {
  where: Prisma.IDPWhereUniqueInput
  create: Prisma.XOR<
    Prisma.IDPCreateWithoutPersonInput,
    Prisma.IDPUncheckedCreateWithoutPersonInput
  >
}

export type IDPCreateManyPersonInputEnvelope = {
  data: Prisma.IDPCreateManyPersonInput | Prisma.IDPCreateManyPersonInput[]
  skipDuplicates?: boolean
}

export type IDPUpsertWithWhereUniqueWithoutPersonInput = {
  where: Prisma.IDPWhereUniqueInput
  update: Prisma.XOR<
    Prisma.IDPUpdateWithoutPersonInput,
    Prisma.IDPUncheckedUpdateWithoutPersonInput
  >
  create: Prisma.XOR<
    Prisma.IDPCreateWithoutPersonInput,
    Prisma.IDPUncheckedCreateWithoutPersonInput
  >
}

export type IDPUpdateWithWhereUniqueWithoutPersonInput = {
  where: Prisma.IDPWhereUniqueInput
  data: Prisma.XOR<
    Prisma.IDPUpdateWithoutPersonInput,
    Prisma.IDPUncheckedUpdateWithoutPersonInput
  >
}

export type IDPUpdateManyWithWhereWithoutPersonInput = {
  where: Prisma.IDPScalarWhereInput
  data: Prisma.XOR<
    Prisma.IDPUpdateManyMutationInput,
    Prisma.IDPUncheckedUpdateManyWithoutPersonInput
  >
}

export type IDPScalarWhereInput = {
  AND?: Prisma.IDPScalarWhereInput | Prisma.IDPScalarWhereInput[]
  OR?: Prisma.IDPScalarWhereInput[]
  NOT?: Prisma.IDPScalarWhereInput | Prisma.IDPScalarWhereInput[]
  id?: Prisma.StringFilter<'IDP'> | string
  personId?: Prisma.StringFilter<'IDP'> | string
  period?: Prisma.StringFilter<'IDP'> | string
  summary?: Prisma.StringNullableFilter<'IDP'> | string | null
  createdAt?: Prisma.DateTimeFilter<'IDP'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'IDP'> | Date | string
}

export type IDPCreateWithoutGoalsInput = {
  id?: string
  period: string
  summary?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  person: Prisma.PersonCreateNestedOneWithoutIdpsInput
}

export type IDPUncheckedCreateWithoutGoalsInput = {
  id?: string
  personId: string
  period: string
  summary?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IDPCreateOrConnectWithoutGoalsInput = {
  where: Prisma.IDPWhereUniqueInput
  create: Prisma.XOR<
    Prisma.IDPCreateWithoutGoalsInput,
    Prisma.IDPUncheckedCreateWithoutGoalsInput
  >
}

export type IDPUpsertWithoutGoalsInput = {
  update: Prisma.XOR<
    Prisma.IDPUpdateWithoutGoalsInput,
    Prisma.IDPUncheckedUpdateWithoutGoalsInput
  >
  create: Prisma.XOR<
    Prisma.IDPCreateWithoutGoalsInput,
    Prisma.IDPUncheckedCreateWithoutGoalsInput
  >
  where?: Prisma.IDPWhereInput
}

export type IDPUpdateToOneWithWhereWithoutGoalsInput = {
  where?: Prisma.IDPWhereInput
  data: Prisma.XOR<
    Prisma.IDPUpdateWithoutGoalsInput,
    Prisma.IDPUncheckedUpdateWithoutGoalsInput
  >
}

export type IDPUpdateWithoutGoalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  person?: Prisma.PersonUpdateOneRequiredWithoutIdpsNestedInput
}

export type IDPUncheckedUpdateWithoutGoalsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IDPCreateManyPersonInput = {
  id?: string
  period: string
  summary?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IDPUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  goals?: Prisma.IDPGoalUpdateManyWithoutIdpNestedInput
}

export type IDPUncheckedUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  goals?: Prisma.IDPGoalUncheckedUpdateManyWithoutIdpNestedInput
}

export type IDPUncheckedUpdateManyWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  period?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

/**
 * Count Type IDPCountOutputType
 */

export type IDPCountOutputType = {
  goals: number
}

export type IDPCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  goals?: boolean | IDPCountOutputTypeCountGoalsArgs
}

/**
 * IDPCountOutputType without action
 */
export type IDPCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPCountOutputType
   */
  select?: Prisma.IDPCountOutputTypeSelect<ExtArgs> | null
}

/**
 * IDPCountOutputType without action
 */
export type IDPCountOutputTypeCountGoalsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.IDPGoalWhereInput
}

export type IDPSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    period?: boolean
    summary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
    goals?: boolean | Prisma.IDP$goalsArgs<ExtArgs>
    _count?: boolean | Prisma.IDPCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['iDP']
>

export type IDPSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    period?: boolean
    summary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['iDP']
>

export type IDPSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    period?: boolean
    summary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['iDP']
>

export type IDPSelectScalar = {
  id?: boolean
  personId?: boolean
  period?: boolean
  summary?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type IDPOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'personId' | 'period' | 'summary' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['iDP']
>
export type IDPInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  goals?: boolean | Prisma.IDP$goalsArgs<ExtArgs>
  _count?: boolean | Prisma.IDPCountOutputTypeDefaultArgs<ExtArgs>
}
export type IDPIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type IDPIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}

export type $IDPPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'IDP'
  objects: {
    person: Prisma.$PersonPayload<ExtArgs>
    goals: Prisma.$IDPGoalPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      personId: string
      period: string
      summary: string | null
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['iDP']
  >
  composites: {}
}

export type IDPGetPayload<
  S extends boolean | null | undefined | IDPDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$IDPPayload, S>

export type IDPCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<IDPFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: IDPCountAggregateInputType | true
}

export interface IDPDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['IDP']
    meta: { name: 'IDP' }
  }
  /**
   * Find zero or one IDP that matches the filter.
   * @param {IDPFindUniqueArgs} args - Arguments to find a IDP
   * @example
   * // Get one IDP
   * const iDP = await prisma.iDP.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IDPFindUniqueArgs>(
    args: Prisma.SelectSubset<T, IDPFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one IDP that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IDPFindUniqueOrThrowArgs} args - Arguments to find a IDP
   * @example
   * // Get one IDP
   * const iDP = await prisma.iDP.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IDPFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, IDPFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first IDP that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPFindFirstArgs} args - Arguments to find a IDP
   * @example
   * // Get one IDP
   * const iDP = await prisma.iDP.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IDPFindFirstArgs>(
    args?: Prisma.SelectSubset<T, IDPFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first IDP that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPFindFirstOrThrowArgs} args - Arguments to find a IDP
   * @example
   * // Get one IDP
   * const iDP = await prisma.iDP.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IDPFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, IDPFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more IDPS that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IDPS
   * const iDPS = await prisma.iDP.findMany()
   *
   * // Get first 10 IDPS
   * const iDPS = await prisma.iDP.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const iDPWithIdOnly = await prisma.iDP.findMany({ select: { id: true } })
   *
   */
  findMany<T extends IDPFindManyArgs>(
    args?: Prisma.SelectSubset<T, IDPFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a IDP.
   * @param {IDPCreateArgs} args - Arguments to create a IDP.
   * @example
   * // Create one IDP
   * const IDP = await prisma.iDP.create({
   *   data: {
   *     // ... data to create a IDP
   *   }
   * })
   *
   */
  create<T extends IDPCreateArgs>(
    args: Prisma.SelectSubset<T, IDPCreateArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many IDPS.
   * @param {IDPCreateManyArgs} args - Arguments to create many IDPS.
   * @example
   * // Create many IDPS
   * const iDP = await prisma.iDP.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends IDPCreateManyArgs>(
    args?: Prisma.SelectSubset<T, IDPCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IDPS and returns the data saved in the database.
   * @param {IDPCreateManyAndReturnArgs} args - Arguments to create many IDPS.
   * @example
   * // Create many IDPS
   * const iDP = await prisma.iDP.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many IDPS and only return the `id`
   * const iDPWithIdOnly = await prisma.iDP.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends IDPCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, IDPCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a IDP.
   * @param {IDPDeleteArgs} args - Arguments to delete one IDP.
   * @example
   * // Delete one IDP
   * const IDP = await prisma.iDP.delete({
   *   where: {
   *     // ... filter to delete one IDP
   *   }
   * })
   *
   */
  delete<T extends IDPDeleteArgs>(
    args: Prisma.SelectSubset<T, IDPDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one IDP.
   * @param {IDPUpdateArgs} args - Arguments to update one IDP.
   * @example
   * // Update one IDP
   * const iDP = await prisma.iDP.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends IDPUpdateArgs>(
    args: Prisma.SelectSubset<T, IDPUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more IDPS.
   * @param {IDPDeleteManyArgs} args - Arguments to filter IDPS to delete.
   * @example
   * // Delete a few IDPS
   * const { count } = await prisma.iDP.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends IDPDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, IDPDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IDPS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IDPS
   * const iDP = await prisma.iDP.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends IDPUpdateManyArgs>(
    args: Prisma.SelectSubset<T, IDPUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IDPS and returns the data updated in the database.
   * @param {IDPUpdateManyAndReturnArgs} args - Arguments to update many IDPS.
   * @example
   * // Update many IDPS
   * const iDP = await prisma.iDP.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more IDPS and only return the `id`
   * const iDPWithIdOnly = await prisma.iDP.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends IDPUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, IDPUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one IDP.
   * @param {IDPUpsertArgs} args - Arguments to update or create a IDP.
   * @example
   * // Update or create a IDP
   * const iDP = await prisma.iDP.upsert({
   *   create: {
   *     // ... data to create a IDP
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IDP we want to update
   *   }
   * })
   */
  upsert<T extends IDPUpsertArgs>(
    args: Prisma.SelectSubset<T, IDPUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of IDPS.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPCountArgs} args - Arguments to filter IDPS to count.
   * @example
   * // Count the number of IDPS
   * const count = await prisma.iDP.count({
   *   where: {
   *     // ... the filter for the IDPS we want to count
   *   }
   * })
   **/
  count<T extends IDPCountArgs>(
    args?: Prisma.Subset<T, IDPCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IDPCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IDP.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends IDPAggregateArgs>(
    args: Prisma.Subset<T, IDPAggregateArgs>
  ): Prisma.PrismaPromise<GetIDPAggregateType<T>>

  /**
   * Group by IDP.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends IDPGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IDPGroupByArgs['orderBy'] }
      : { orderBy?: IDPGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, IDPGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors
    ? GetIDPGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IDP model
   */
  readonly fields: IDPFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for IDP.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IDPClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  person<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  goals<T extends Prisma.IDP$goalsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.IDP$goalsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$IDPGoalPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the IDP model
 */
export interface IDPFieldRefs {
  readonly id: Prisma.FieldRef<'IDP', 'String'>
  readonly personId: Prisma.FieldRef<'IDP', 'String'>
  readonly period: Prisma.FieldRef<'IDP', 'String'>
  readonly summary: Prisma.FieldRef<'IDP', 'String'>
  readonly createdAt: Prisma.FieldRef<'IDP', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'IDP', 'DateTime'>
}

// Custom InputTypes
/**
 * IDP findUnique
 */
export type IDPFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * Filter, which IDP to fetch.
   */
  where: Prisma.IDPWhereUniqueInput
}

/**
 * IDP findUniqueOrThrow
 */
export type IDPFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * Filter, which IDP to fetch.
   */
  where: Prisma.IDPWhereUniqueInput
}

/**
 * IDP findFirst
 */
export type IDPFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * Filter, which IDP to fetch.
   */
  where?: Prisma.IDPWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of IDPS to fetch.
   */
  orderBy?:
    | Prisma.IDPOrderByWithRelationInput
    | Prisma.IDPOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for IDPS.
   */
  cursor?: Prisma.IDPWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` IDPS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` IDPS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of IDPS.
   */
  distinct?: Prisma.IDPScalarFieldEnum | Prisma.IDPScalarFieldEnum[]
}

/**
 * IDP findFirstOrThrow
 */
export type IDPFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * Filter, which IDP to fetch.
   */
  where?: Prisma.IDPWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of IDPS to fetch.
   */
  orderBy?:
    | Prisma.IDPOrderByWithRelationInput
    | Prisma.IDPOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for IDPS.
   */
  cursor?: Prisma.IDPWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` IDPS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` IDPS.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of IDPS.
   */
  distinct?: Prisma.IDPScalarFieldEnum | Prisma.IDPScalarFieldEnum[]
}

/**
 * IDP findMany
 */
export type IDPFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * Filter, which IDPS to fetch.
   */
  where?: Prisma.IDPWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of IDPS to fetch.
   */
  orderBy?:
    | Prisma.IDPOrderByWithRelationInput
    | Prisma.IDPOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing IDPS.
   */
  cursor?: Prisma.IDPWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` IDPS from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` IDPS.
   */
  skip?: number
  distinct?: Prisma.IDPScalarFieldEnum | Prisma.IDPScalarFieldEnum[]
}

/**
 * IDP create
 */
export type IDPCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * The data needed to create a IDP.
   */
  data: Prisma.XOR<Prisma.IDPCreateInput, Prisma.IDPUncheckedCreateInput>
}

/**
 * IDP createMany
 */
export type IDPCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many IDPS.
   */
  data: Prisma.IDPCreateManyInput | Prisma.IDPCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IDP createManyAndReturn
 */
export type IDPCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * The data used to create many IDPS.
   */
  data: Prisma.IDPCreateManyInput | Prisma.IDPCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * IDP update
 */
export type IDPUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * The data needed to update a IDP.
   */
  data: Prisma.XOR<Prisma.IDPUpdateInput, Prisma.IDPUncheckedUpdateInput>
  /**
   * Choose, which IDP to update.
   */
  where: Prisma.IDPWhereUniqueInput
}

/**
 * IDP updateMany
 */
export type IDPUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update IDPS.
   */
  data: Prisma.XOR<
    Prisma.IDPUpdateManyMutationInput,
    Prisma.IDPUncheckedUpdateManyInput
  >
  /**
   * Filter which IDPS to update
   */
  where?: Prisma.IDPWhereInput
  /**
   * Limit how many IDPS to update.
   */
  limit?: number
}

/**
 * IDP updateManyAndReturn
 */
export type IDPUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * The data used to update IDPS.
   */
  data: Prisma.XOR<
    Prisma.IDPUpdateManyMutationInput,
    Prisma.IDPUncheckedUpdateManyInput
  >
  /**
   * Filter which IDPS to update
   */
  where?: Prisma.IDPWhereInput
  /**
   * Limit how many IDPS to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * IDP upsert
 */
export type IDPUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * The filter to search for the IDP to update in case it exists.
   */
  where: Prisma.IDPWhereUniqueInput
  /**
   * In case the IDP found by the `where` argument doesn't exist, create a new IDP with this data.
   */
  create: Prisma.XOR<Prisma.IDPCreateInput, Prisma.IDPUncheckedCreateInput>
  /**
   * In case the IDP was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IDPUpdateInput, Prisma.IDPUncheckedUpdateInput>
}

/**
 * IDP delete
 */
export type IDPDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
  /**
   * Filter which IDP to delete.
   */
  where: Prisma.IDPWhereUniqueInput
}

/**
 * IDP deleteMany
 */
export type IDPDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which IDPS to delete
   */
  where?: Prisma.IDPWhereInput
  /**
   * Limit how many IDPS to delete.
   */
  limit?: number
}

/**
 * IDP.goals
 */
export type IDP$goalsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  where?: Prisma.IDPGoalWhereInput
  orderBy?:
    | Prisma.IDPGoalOrderByWithRelationInput
    | Prisma.IDPGoalOrderByWithRelationInput[]
  cursor?: Prisma.IDPGoalWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.IDPGoalScalarFieldEnum | Prisma.IDPGoalScalarFieldEnum[]
}

/**
 * IDP without action
 */
export type IDPDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDP
   */
  select?: Prisma.IDPSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDP
   */
  omit?: Prisma.IDPOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPInclude<ExtArgs> | null
}
