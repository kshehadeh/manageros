generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  users       User[]
  teams       Team[]
  people      Person[]
  initiatives Initiative[]
  invitations OrganizationInvitation[]
  meetings    Meeting[]
  meetingInstances MeetingInstance[]
  entityLinks EntityLink[]
  jobRoles    JobRole[]
  levels      JobLevel[]
  domains     JobDomain[]
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  name           String
  passwordHash   String
  role           String        @default("USER") // ADMIN or USER
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  personId       String?       @unique
  person         Person?       @relation(fields: [personId], references: [id])
  sentInvitations OrganizationInvitation[]
  jiraCredentials UserJiraCredentials?
  githubCredentials UserGithubCredentials?
  feedbackCampaigns FeedbackCampaign[]
  createdTasks   Task[]
  createdMeetings Meeting[]
  createdEntityLinks EntityLink[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@index([organizationId])
  @@index([personId])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  parentId       String?
  parent         Team?        @relation("TeamHierarchy", fields: [parentId], references: [id])
  children       Team[]       @relation("TeamHierarchy")
  people         Person[]
  initiatives    Initiative[]
  meetings       Meeting[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([organizationId])
  @@index([parentId])
}

model Person {
  id                 String            @id @default(cuid())
  email              String?
  name               String
  role               String?
  status             String            @default("active")
  birthday           DateTime?
  organizationId     String
  organization       Organization      @relation(fields: [organizationId], references: [id])
  teamId             String?
  team               Team?             @relation(fields: [teamId], references: [id])
  managerId          String?
  manager            Person?           @relation("MgrReports", fields: [managerId], references: [id])
  reports            Person[]          @relation("MgrReports")
  jobRoleId          String?
  jobRole            JobRole?          @relation(fields: [jobRoleId], references: [id])
  startedAt          DateTime?
  tasks              Task[]
  oneOnOnes          OneOnOne[]        @relation("OOOReport")
  oneOnOnesAsManager OneOnOne[]        @relation("OOOManager")
  idps               IDP[]
  feedback           Feedback[]        @relation("About")
  feedbackFrom       Feedback[]        @relation("From")
  initiativeOwners   InitiativeOwner[]
  checkIns           CheckIn[]
  events             Event[]
  user               User?
  jiraAccount        PersonJiraAccount?
  githubAccount      PersonGithubAccount?
  feedbackCampaigns  FeedbackCampaign[] @relation("CampaignTarget")
  ownedMeetings      Meeting[]         @relation("MeetingOwner")
    
  meetingParticipants MeetingParticipant[] @relation("MeetingParticipant")
  meetingInstanceParticipants MeetingInstanceParticipant[] @relation("MeetingInstanceParticipant")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  synopses           PersonSynopsis[]
  
  @@index([organizationId])
  @@index([jobRoleId])
}

model Initiative {
  id             String            @id @default(cuid())
  teamId         String?
  team           Team?             @relation(fields: [teamId], references: [id])
  organizationId String
  organization   Organization      @relation(fields: [organizationId], references: [id])
  title          String
  summary        String?
  outcome        String?
  startDate      DateTime?
  targetDate     DateTime?
  status         String            @default("planned") // planned|in_progress|paused|done|canceled
  rag            String            @default("green") // green|amber|red
  confidence     Int               @default(80)
  objectives     Objective[]
  owners         InitiativeOwner[]
  checkIns       CheckIn[]
  metrics        Metric[]
  tasks          Task[]
  meetings       Meeting[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  @@index([organizationId])
}

model InitiativeOwner {
  initiativeId String
  personId     String
  role         String @default("owner") // owner|sponsor|collaborator

  initiative Initiative @relation(fields: [initiativeId], references: [id])
  person     Person     @relation(fields: [personId], references: [id])

  @@id([initiativeId, personId])
}

model Objective {
  id           String     @id @default(cuid())
  initiativeId String
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
  title        String
  keyResult    String?
  sortIndex    Int        @default(0)
  tasks        Task[]
}

model Task {
  id           String      @id @default(cuid())
  objectiveId  String?
  objective    Objective?  @relation(fields: [objectiveId], references: [id])
  initiativeId String?
  initiative   Initiative? @relation(fields: [initiativeId], references: [id])
  title        String
  description  String?
  assigneeId   String?
  assignee     Person?     @relation(fields: [assigneeId], references: [id])
  createdById  String
  createdBy    User        @relation(fields: [createdById], references: [id])
  status       String      @default("todo") // todo|doing|blocked|done|dropped
  priority     Int         @default(2)
  estimate     Int?
  dueDate      DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  completedAt  DateTime?
}

model CheckIn {
  id           String     @id @default(cuid())
  initiativeId String
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
  weekOf       DateTime
  rag          String     @default("green")
  confidence   Int        @default(80)
  summary      String
  blockers     String?
  nextSteps    String?
  createdById  String
  createdBy    Person     @relation(fields: [createdById], references: [id])
  createdAt    DateTime   @default(now())
}

model OneOnOne {
  id          String    @id @default(cuid())
  managerId   String
  reportId    String
  scheduledAt DateTime?
  notes       String?
  // actionItems  Task[]   @relation("OneOnOneTasks")
  manager     Person    @relation("OOOManager", fields: [managerId], references: [id])
  report      Person    @relation("OOOReport", fields: [reportId], references: [id])
}

model IDP {
  id        String    @id @default(cuid())
  personId  String
  person    Person    @relation(fields: [personId], references: [id])
  period    String
  summary   String?
  goals     IDPGoal[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model IDPGoal {
  id      String    @id @default(cuid())
  idpId   String
  idp     IDP       @relation(fields: [idpId], references: [id])
  title   String
  metric  String?
  target  String?
  status  String    @default("in_progress")
  dueDate DateTime?
}

model Feedback {
  id        String   @id @default(cuid())
  aboutId   String
  about     Person   @relation("About", fields: [aboutId], references: [id])
  fromId    String
  from      Person   @relation("From", fields: [fromId], references: [id])
  kind      String   @default("note") // praise|concern|note
  isPrivate Boolean  @default(true)
  body      String
  createdAt DateTime @default(now())
}

model Metric {
  id           String     @id @default(cuid())
  initiativeId String
  initiative   Initiative @relation(fields: [initiativeId], references: [id])
  name         String
  unit         String?
  value        Float
  capturedAt   DateTime   @default(now())
}

model Tag {
  id    String   @id @default(cuid())
  name  String   @unique
  color String?
  maps  TagMap[]
}

model TagMap {
  tagId    String
  tag      Tag    @relation(fields: [tagId], references: [id])
  entity   String
  entityId String

  @@id([tagId, entity, entityId])
}

model OrganizationInvitation {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  invitedById    String
  invitedBy      User         @relation(fields: [invitedById], references: [id])
  status         String       @default("pending") // pending|accepted|expired|revoked
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([email])
  @@index([status])
}

model Event {
  id        String   @id @default(cuid())
  actorId   String?
  actor     Person?  @relation(fields: [actorId], references: [id])
  entity    String
  entityId  String
  action    String
  metadata  String?
  createdAt DateTime @default(now())
}

model UserJiraCredentials {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jiraUsername String
  encryptedApiKey String
  jiraBaseUrl  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PersonJiraAccount {
  id           String   @id @default(cuid())
  personId     String   @unique
  person       Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  jiraAccountId String
  jiraEmail    String
  jiraDisplayName String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([jiraAccountId])
  @@index([jiraEmail])
}

model UserGithubCredentials {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  githubUsername String
  encryptedPat String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PersonGithubAccount {
  id           String   @id @default(cuid())
  personId     String   @unique
  person       Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  githubUsername String
  githubDisplayName String?
  githubEmail  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([githubUsername])
}

model FeedbackCampaign {
  id             String            @id @default(cuid())
  name           String?            // Custom name for the campaign (e.g., "Performance Review 2026")
  userId         String
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetPersonId String
  targetPerson   Person            @relation("CampaignTarget", fields: [targetPersonId], references: [id], onDelete: Cascade)
  templateId     String?
  template       FeedbackTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  startDate      DateTime
  endDate        DateTime
  inviteEmails   String[]          // Array of email addresses to invite
  inviteLink     String?           // Unique link for invitees to access the feedback form
  status         String            @default("draft") // draft|active|completed|cancelled
  responses      FeedbackResponse[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  @@index([userId])
  @@index([targetPersonId])
  @@index([templateId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([inviteLink])
}

model FeedbackResponse {
  id           String           @id @default(cuid())
  campaignId   String
  campaign     FeedbackCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  responderEmail String
  responses    Json             // Store the structured feedback responses as JSON
  submittedAt  DateTime         @default(now())
  
  @@index([campaignId])
  @@index([responderEmail])
  @@unique([campaignId, responderEmail]) // Prevent duplicate responses from same email
}

model FeedbackTemplate {
  id          String            @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean           @default(false)
  questions   FeedbackQuestion[]
  campaigns   FeedbackCampaign[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([isDefault])
}

model FeedbackQuestion {
  id         String           @id @default(cuid())
  templateId String
  template   FeedbackTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  question   String
  type       String           @default("text") // text|rating|multiple_choice
  required   Boolean          @default(true)
  options    Json?            // For multiple choice questions
  sortOrder  Int              @default(0)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  
  @@index([templateId])
  @@index([sortOrder])
}

model Meeting {
  id             String               @id @default(cuid())
  title          String
  description    String?
  scheduledAt    DateTime
  duration       Int?         // Duration in minutes
  location       String?      // Physical or virtual location
  notes          String?      // Open area for notes
  isRecurring    Boolean      @default(false)
  recurrenceType String?      // daily|weekly|monthly|bi_monthly|semi_annually
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  teamId         String?      // Optional team association
  team           Team?        @relation(fields: [teamId], references: [id])
  initiativeId   String?      // Optional initiative association
  initiative     Initiative?  @relation(fields: [initiativeId], references: [id])
  ownerId        String?      // Meeting owner (assigned to a person)
  owner          Person?      @relation("MeetingOwner", fields: [ownerId], references: [id])
  createdById    String       // User who created the meeting
  createdBy      User         @relation(fields: [createdById], references: [id])
  participants   MeetingParticipant[]
  instances      MeetingInstance[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([organizationId])
  @@index([teamId])
  @@index([initiativeId])
  @@index([ownerId])
  @@index([createdById])
  @@index([scheduledAt])
  @@index([isRecurring])
}

model MeetingParticipant {
  id        String   @id @default(cuid())
  meetingId String
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  personId  String
  person    Person   @relation("MeetingParticipant", fields: [personId], references: [id])
  status    String   @default("invited") // invited|accepted|declined|tentative
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([meetingId, personId])
  @@index([meetingId])
  @@index([personId])
  @@index([status])
}

model MeetingInstance {
  id             String       @id @default(cuid())
  meetingId      String
  meeting        Meeting      @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  scheduledAt    DateTime     // Specific date/time for this instance
  notes          String?      // Notes for this specific instance
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  participants   MeetingInstanceParticipant[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([meetingId])
  @@index([organizationId])
  @@index([scheduledAt])
}

model MeetingInstanceParticipant {
  id                String           @id @default(cuid())
  meetingInstanceId String
  meetingInstance   MeetingInstance  @relation(fields: [meetingInstanceId], references: [id], onDelete: Cascade)
  personId          String
  person            Person           @relation("MeetingInstanceParticipant", fields: [personId], references: [id])
  status            String           @default("invited") // invited|accepted|declined|tentative|attended|absent
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@unique([meetingInstanceId, personId])
  @@index([meetingInstanceId])
  @@index([personId])
  @@index([status])
}

model PersonSynopsis {
  id              String   @id @default(cuid())
  personId        String
  person          Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  fromDate        DateTime
  toDate          DateTime
  includeFeedback Boolean  @default(false)
  content         String
  sources         String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([personId])
  @@index([fromDate])
  @@index([toDate])
}

model EntityLink {
  id             String   @id @default(cuid())
  url            String
  title          String?
  description    String?
  entityType     String   // The type of entity (e.g., "Initiative", "Task", "Meeting", "MeetingInstance", "Team", "Person", "OneOnOne")
  entityId       String   // The ID of the entity
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdById    String
  createdBy      User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([organizationId])
  @@index([createdById])
}

model JobRole {
  id           String   @id @default(cuid())
  title        String
  description  String?  // Markdown-enabled job description
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  levelId      String
  level        JobLevel @relation("JobRoleLevel", fields: [levelId], references: [id], onDelete: Restrict)
  domainId     String
  domain       JobDomain @relation("JobRoleDomain", fields: [domainId], references: [id], onDelete: Restrict)
  people       Person[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([organizationId])
  @@index([levelId])
  @@index([domainId])
}

model JobLevel {
  id           String   @id @default(cuid())
  name         String
  order        Int      @default(0)
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  jobRoles     JobRole[] @relation("JobRoleLevel")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([order])
}

model JobDomain {
  id           String   @id @default(cuid())
  name         String
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  jobRoles     JobRole[] @relation("JobRoleDomain")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([name, organizationId])
  @@index([organizationId])
}

