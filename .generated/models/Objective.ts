/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Objective` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model Objective
 *
 */
export type ObjectiveModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ObjectivePayload>

export type AggregateObjective = {
  _count: ObjectiveCountAggregateOutputType | null
  _avg: ObjectiveAvgAggregateOutputType | null
  _sum: ObjectiveSumAggregateOutputType | null
  _min: ObjectiveMinAggregateOutputType | null
  _max: ObjectiveMaxAggregateOutputType | null
}

export type ObjectiveAvgAggregateOutputType = {
  sortIndex: number | null
}

export type ObjectiveSumAggregateOutputType = {
  sortIndex: number | null
}

export type ObjectiveMinAggregateOutputType = {
  id: string | null
  initiativeId: string | null
  title: string | null
  keyResult: string | null
  sortIndex: number | null
}

export type ObjectiveMaxAggregateOutputType = {
  id: string | null
  initiativeId: string | null
  title: string | null
  keyResult: string | null
  sortIndex: number | null
}

export type ObjectiveCountAggregateOutputType = {
  id: number
  initiativeId: number
  title: number
  keyResult: number
  sortIndex: number
  _all: number
}

export type ObjectiveAvgAggregateInputType = {
  sortIndex?: true
}

export type ObjectiveSumAggregateInputType = {
  sortIndex?: true
}

export type ObjectiveMinAggregateInputType = {
  id?: true
  initiativeId?: true
  title?: true
  keyResult?: true
  sortIndex?: true
}

export type ObjectiveMaxAggregateInputType = {
  id?: true
  initiativeId?: true
  title?: true
  keyResult?: true
  sortIndex?: true
}

export type ObjectiveCountAggregateInputType = {
  id?: true
  initiativeId?: true
  title?: true
  keyResult?: true
  sortIndex?: true
  _all?: true
}

export type ObjectiveAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Objective to aggregate.
   */
  where?: Prisma.ObjectiveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Objectives to fetch.
   */
  orderBy?:
    | Prisma.ObjectiveOrderByWithRelationInput
    | Prisma.ObjectiveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ObjectiveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Objectives from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Objectives.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Objectives
   **/
  _count?: true | ObjectiveCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ObjectiveAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ObjectiveSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ObjectiveMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ObjectiveMaxAggregateInputType
}

export type GetObjectiveAggregateType<T extends ObjectiveAggregateArgs> = {
  [P in keyof T & keyof AggregateObjective]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateObjective[P]>
    : Prisma.GetScalarType<T[P], AggregateObjective[P]>
}

export type ObjectiveGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ObjectiveWhereInput
  orderBy?:
    | Prisma.ObjectiveOrderByWithAggregationInput
    | Prisma.ObjectiveOrderByWithAggregationInput[]
  by: Prisma.ObjectiveScalarFieldEnum[] | Prisma.ObjectiveScalarFieldEnum
  having?: Prisma.ObjectiveScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ObjectiveCountAggregateInputType | true
  _avg?: ObjectiveAvgAggregateInputType
  _sum?: ObjectiveSumAggregateInputType
  _min?: ObjectiveMinAggregateInputType
  _max?: ObjectiveMaxAggregateInputType
}

export type ObjectiveGroupByOutputType = {
  id: string
  initiativeId: string
  title: string
  keyResult: string | null
  sortIndex: number
  _count: ObjectiveCountAggregateOutputType | null
  _avg: ObjectiveAvgAggregateOutputType | null
  _sum: ObjectiveSumAggregateOutputType | null
  _min: ObjectiveMinAggregateOutputType | null
  _max: ObjectiveMaxAggregateOutputType | null
}

type GetObjectiveGroupByPayload<T extends ObjectiveGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ObjectiveGroupByOutputType, T['by']> & {
        [P in keyof T & keyof ObjectiveGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ObjectiveGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ObjectiveGroupByOutputType[P]>
      }
    >
  >

export type ObjectiveWhereInput = {
  AND?: Prisma.ObjectiveWhereInput | Prisma.ObjectiveWhereInput[]
  OR?: Prisma.ObjectiveWhereInput[]
  NOT?: Prisma.ObjectiveWhereInput | Prisma.ObjectiveWhereInput[]
  id?: Prisma.StringFilter<'Objective'> | string
  initiativeId?: Prisma.StringFilter<'Objective'> | string
  title?: Prisma.StringFilter<'Objective'> | string
  keyResult?: Prisma.StringNullableFilter<'Objective'> | string | null
  sortIndex?: Prisma.IntFilter<'Objective'> | number
  initiative?: Prisma.XOR<
    Prisma.InitiativeScalarRelationFilter,
    Prisma.InitiativeWhereInput
  >
  tasks?: Prisma.TaskListRelationFilter
}

export type ObjectiveOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyResult?: Prisma.SortOrderInput | Prisma.SortOrder
  sortIndex?: Prisma.SortOrder
  initiative?: Prisma.InitiativeOrderByWithRelationInput
  tasks?: Prisma.TaskOrderByRelationAggregateInput
}

export type ObjectiveWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.ObjectiveWhereInput | Prisma.ObjectiveWhereInput[]
    OR?: Prisma.ObjectiveWhereInput[]
    NOT?: Prisma.ObjectiveWhereInput | Prisma.ObjectiveWhereInput[]
    initiativeId?: Prisma.StringFilter<'Objective'> | string
    title?: Prisma.StringFilter<'Objective'> | string
    keyResult?: Prisma.StringNullableFilter<'Objective'> | string | null
    sortIndex?: Prisma.IntFilter<'Objective'> | number
    initiative?: Prisma.XOR<
      Prisma.InitiativeScalarRelationFilter,
      Prisma.InitiativeWhereInput
    >
    tasks?: Prisma.TaskListRelationFilter
  },
  'id'
>

export type ObjectiveOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyResult?: Prisma.SortOrderInput | Prisma.SortOrder
  sortIndex?: Prisma.SortOrder
  _count?: Prisma.ObjectiveCountOrderByAggregateInput
  _avg?: Prisma.ObjectiveAvgOrderByAggregateInput
  _max?: Prisma.ObjectiveMaxOrderByAggregateInput
  _min?: Prisma.ObjectiveMinOrderByAggregateInput
  _sum?: Prisma.ObjectiveSumOrderByAggregateInput
}

export type ObjectiveScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ObjectiveScalarWhereWithAggregatesInput
    | Prisma.ObjectiveScalarWhereWithAggregatesInput[]
  OR?: Prisma.ObjectiveScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.ObjectiveScalarWhereWithAggregatesInput
    | Prisma.ObjectiveScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'Objective'> | string
  initiativeId?: Prisma.StringWithAggregatesFilter<'Objective'> | string
  title?: Prisma.StringWithAggregatesFilter<'Objective'> | string
  keyResult?:
    | Prisma.StringNullableWithAggregatesFilter<'Objective'>
    | string
    | null
  sortIndex?: Prisma.IntWithAggregatesFilter<'Objective'> | number
}

export type ObjectiveCreateInput = {
  id?: string
  title: string
  keyResult?: string | null
  sortIndex?: number
  initiative: Prisma.InitiativeCreateNestedOneWithoutObjectivesInput
  tasks?: Prisma.TaskCreateNestedManyWithoutObjectiveInput
}

export type ObjectiveUncheckedCreateInput = {
  id?: string
  initiativeId: string
  title: string
  keyResult?: string | null
  sortIndex?: number
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutObjectiveInput
}

export type ObjectiveUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
  initiative?: Prisma.InitiativeUpdateOneRequiredWithoutObjectivesNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutObjectiveNestedInput
}

export type ObjectiveUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutObjectiveNestedInput
}

export type ObjectiveCreateManyInput = {
  id?: string
  initiativeId: string
  title: string
  keyResult?: string | null
  sortIndex?: number
}

export type ObjectiveUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ObjectiveUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ObjectiveListRelationFilter = {
  every?: Prisma.ObjectiveWhereInput
  some?: Prisma.ObjectiveWhereInput
  none?: Prisma.ObjectiveWhereInput
}

export type ObjectiveOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ObjectiveCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyResult?: Prisma.SortOrder
  sortIndex?: Prisma.SortOrder
}

export type ObjectiveAvgOrderByAggregateInput = {
  sortIndex?: Prisma.SortOrder
}

export type ObjectiveMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyResult?: Prisma.SortOrder
  sortIndex?: Prisma.SortOrder
}

export type ObjectiveMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  keyResult?: Prisma.SortOrder
  sortIndex?: Prisma.SortOrder
}

export type ObjectiveSumOrderByAggregateInput = {
  sortIndex?: Prisma.SortOrder
}

export type ObjectiveNullableScalarRelationFilter = {
  is?: Prisma.ObjectiveWhereInput | null
  isNot?: Prisma.ObjectiveWhereInput | null
}

export type ObjectiveCreateNestedManyWithoutInitiativeInput = {
  create?:
    | Prisma.XOR<
        Prisma.ObjectiveCreateWithoutInitiativeInput,
        Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.ObjectiveCreateWithoutInitiativeInput[]
    | Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.ObjectiveCreateOrConnectWithoutInitiativeInput
    | Prisma.ObjectiveCreateOrConnectWithoutInitiativeInput[]
  createMany?: Prisma.ObjectiveCreateManyInitiativeInputEnvelope
  connect?:
    | Prisma.ObjectiveWhereUniqueInput
    | Prisma.ObjectiveWhereUniqueInput[]
}

export type ObjectiveUncheckedCreateNestedManyWithoutInitiativeInput = {
  create?:
    | Prisma.XOR<
        Prisma.ObjectiveCreateWithoutInitiativeInput,
        Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.ObjectiveCreateWithoutInitiativeInput[]
    | Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.ObjectiveCreateOrConnectWithoutInitiativeInput
    | Prisma.ObjectiveCreateOrConnectWithoutInitiativeInput[]
  createMany?: Prisma.ObjectiveCreateManyInitiativeInputEnvelope
  connect?:
    | Prisma.ObjectiveWhereUniqueInput
    | Prisma.ObjectiveWhereUniqueInput[]
}

export type ObjectiveUpdateManyWithoutInitiativeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ObjectiveCreateWithoutInitiativeInput,
        Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.ObjectiveCreateWithoutInitiativeInput[]
    | Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.ObjectiveCreateOrConnectWithoutInitiativeInput
    | Prisma.ObjectiveCreateOrConnectWithoutInitiativeInput[]
  upsert?:
    | Prisma.ObjectiveUpsertWithWhereUniqueWithoutInitiativeInput
    | Prisma.ObjectiveUpsertWithWhereUniqueWithoutInitiativeInput[]
  createMany?: Prisma.ObjectiveCreateManyInitiativeInputEnvelope
  set?: Prisma.ObjectiveWhereUniqueInput | Prisma.ObjectiveWhereUniqueInput[]
  disconnect?:
    | Prisma.ObjectiveWhereUniqueInput
    | Prisma.ObjectiveWhereUniqueInput[]
  delete?: Prisma.ObjectiveWhereUniqueInput | Prisma.ObjectiveWhereUniqueInput[]
  connect?:
    | Prisma.ObjectiveWhereUniqueInput
    | Prisma.ObjectiveWhereUniqueInput[]
  update?:
    | Prisma.ObjectiveUpdateWithWhereUniqueWithoutInitiativeInput
    | Prisma.ObjectiveUpdateWithWhereUniqueWithoutInitiativeInput[]
  updateMany?:
    | Prisma.ObjectiveUpdateManyWithWhereWithoutInitiativeInput
    | Prisma.ObjectiveUpdateManyWithWhereWithoutInitiativeInput[]
  deleteMany?:
    | Prisma.ObjectiveScalarWhereInput
    | Prisma.ObjectiveScalarWhereInput[]
}

export type ObjectiveUncheckedUpdateManyWithoutInitiativeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ObjectiveCreateWithoutInitiativeInput,
        Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.ObjectiveCreateWithoutInitiativeInput[]
    | Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.ObjectiveCreateOrConnectWithoutInitiativeInput
    | Prisma.ObjectiveCreateOrConnectWithoutInitiativeInput[]
  upsert?:
    | Prisma.ObjectiveUpsertWithWhereUniqueWithoutInitiativeInput
    | Prisma.ObjectiveUpsertWithWhereUniqueWithoutInitiativeInput[]
  createMany?: Prisma.ObjectiveCreateManyInitiativeInputEnvelope
  set?: Prisma.ObjectiveWhereUniqueInput | Prisma.ObjectiveWhereUniqueInput[]
  disconnect?:
    | Prisma.ObjectiveWhereUniqueInput
    | Prisma.ObjectiveWhereUniqueInput[]
  delete?: Prisma.ObjectiveWhereUniqueInput | Prisma.ObjectiveWhereUniqueInput[]
  connect?:
    | Prisma.ObjectiveWhereUniqueInput
    | Prisma.ObjectiveWhereUniqueInput[]
  update?:
    | Prisma.ObjectiveUpdateWithWhereUniqueWithoutInitiativeInput
    | Prisma.ObjectiveUpdateWithWhereUniqueWithoutInitiativeInput[]
  updateMany?:
    | Prisma.ObjectiveUpdateManyWithWhereWithoutInitiativeInput
    | Prisma.ObjectiveUpdateManyWithWhereWithoutInitiativeInput[]
  deleteMany?:
    | Prisma.ObjectiveScalarWhereInput
    | Prisma.ObjectiveScalarWhereInput[]
}

export type ObjectiveCreateNestedOneWithoutTasksInput = {
  create?: Prisma.XOR<
    Prisma.ObjectiveCreateWithoutTasksInput,
    Prisma.ObjectiveUncheckedCreateWithoutTasksInput
  >
  connectOrCreate?: Prisma.ObjectiveCreateOrConnectWithoutTasksInput
  connect?: Prisma.ObjectiveWhereUniqueInput
}

export type ObjectiveUpdateOneWithoutTasksNestedInput = {
  create?: Prisma.XOR<
    Prisma.ObjectiveCreateWithoutTasksInput,
    Prisma.ObjectiveUncheckedCreateWithoutTasksInput
  >
  connectOrCreate?: Prisma.ObjectiveCreateOrConnectWithoutTasksInput
  upsert?: Prisma.ObjectiveUpsertWithoutTasksInput
  disconnect?: Prisma.ObjectiveWhereInput | boolean
  delete?: Prisma.ObjectiveWhereInput | boolean
  connect?: Prisma.ObjectiveWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ObjectiveUpdateToOneWithWhereWithoutTasksInput,
      Prisma.ObjectiveUpdateWithoutTasksInput
    >,
    Prisma.ObjectiveUncheckedUpdateWithoutTasksInput
  >
}

export type ObjectiveCreateWithoutInitiativeInput = {
  id?: string
  title: string
  keyResult?: string | null
  sortIndex?: number
  tasks?: Prisma.TaskCreateNestedManyWithoutObjectiveInput
}

export type ObjectiveUncheckedCreateWithoutInitiativeInput = {
  id?: string
  title: string
  keyResult?: string | null
  sortIndex?: number
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutObjectiveInput
}

export type ObjectiveCreateOrConnectWithoutInitiativeInput = {
  where: Prisma.ObjectiveWhereUniqueInput
  create: Prisma.XOR<
    Prisma.ObjectiveCreateWithoutInitiativeInput,
    Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput
  >
}

export type ObjectiveCreateManyInitiativeInputEnvelope = {
  data:
    | Prisma.ObjectiveCreateManyInitiativeInput
    | Prisma.ObjectiveCreateManyInitiativeInput[]
  skipDuplicates?: boolean
}

export type ObjectiveUpsertWithWhereUniqueWithoutInitiativeInput = {
  where: Prisma.ObjectiveWhereUniqueInput
  update: Prisma.XOR<
    Prisma.ObjectiveUpdateWithoutInitiativeInput,
    Prisma.ObjectiveUncheckedUpdateWithoutInitiativeInput
  >
  create: Prisma.XOR<
    Prisma.ObjectiveCreateWithoutInitiativeInput,
    Prisma.ObjectiveUncheckedCreateWithoutInitiativeInput
  >
}

export type ObjectiveUpdateWithWhereUniqueWithoutInitiativeInput = {
  where: Prisma.ObjectiveWhereUniqueInput
  data: Prisma.XOR<
    Prisma.ObjectiveUpdateWithoutInitiativeInput,
    Prisma.ObjectiveUncheckedUpdateWithoutInitiativeInput
  >
}

export type ObjectiveUpdateManyWithWhereWithoutInitiativeInput = {
  where: Prisma.ObjectiveScalarWhereInput
  data: Prisma.XOR<
    Prisma.ObjectiveUpdateManyMutationInput,
    Prisma.ObjectiveUncheckedUpdateManyWithoutInitiativeInput
  >
}

export type ObjectiveScalarWhereInput = {
  AND?: Prisma.ObjectiveScalarWhereInput | Prisma.ObjectiveScalarWhereInput[]
  OR?: Prisma.ObjectiveScalarWhereInput[]
  NOT?: Prisma.ObjectiveScalarWhereInput | Prisma.ObjectiveScalarWhereInput[]
  id?: Prisma.StringFilter<'Objective'> | string
  initiativeId?: Prisma.StringFilter<'Objective'> | string
  title?: Prisma.StringFilter<'Objective'> | string
  keyResult?: Prisma.StringNullableFilter<'Objective'> | string | null
  sortIndex?: Prisma.IntFilter<'Objective'> | number
}

export type ObjectiveCreateWithoutTasksInput = {
  id?: string
  title: string
  keyResult?: string | null
  sortIndex?: number
  initiative: Prisma.InitiativeCreateNestedOneWithoutObjectivesInput
}

export type ObjectiveUncheckedCreateWithoutTasksInput = {
  id?: string
  initiativeId: string
  title: string
  keyResult?: string | null
  sortIndex?: number
}

export type ObjectiveCreateOrConnectWithoutTasksInput = {
  where: Prisma.ObjectiveWhereUniqueInput
  create: Prisma.XOR<
    Prisma.ObjectiveCreateWithoutTasksInput,
    Prisma.ObjectiveUncheckedCreateWithoutTasksInput
  >
}

export type ObjectiveUpsertWithoutTasksInput = {
  update: Prisma.XOR<
    Prisma.ObjectiveUpdateWithoutTasksInput,
    Prisma.ObjectiveUncheckedUpdateWithoutTasksInput
  >
  create: Prisma.XOR<
    Prisma.ObjectiveCreateWithoutTasksInput,
    Prisma.ObjectiveUncheckedCreateWithoutTasksInput
  >
  where?: Prisma.ObjectiveWhereInput
}

export type ObjectiveUpdateToOneWithWhereWithoutTasksInput = {
  where?: Prisma.ObjectiveWhereInput
  data: Prisma.XOR<
    Prisma.ObjectiveUpdateWithoutTasksInput,
    Prisma.ObjectiveUncheckedUpdateWithoutTasksInput
  >
}

export type ObjectiveUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
  initiative?: Prisma.InitiativeUpdateOneRequiredWithoutObjectivesNestedInput
}

export type ObjectiveUncheckedUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ObjectiveCreateManyInitiativeInput = {
  id?: string
  title: string
  keyResult?: string | null
  sortIndex?: number
}

export type ObjectiveUpdateWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
  tasks?: Prisma.TaskUpdateManyWithoutObjectiveNestedInput
}

export type ObjectiveUncheckedUpdateWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutObjectiveNestedInput
}

export type ObjectiveUncheckedUpdateManyWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  keyResult?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sortIndex?: Prisma.IntFieldUpdateOperationsInput | number
}

/**
 * Count Type ObjectiveCountOutputType
 */

export type ObjectiveCountOutputType = {
  tasks: number
}

export type ObjectiveCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  tasks?: boolean | ObjectiveCountOutputTypeCountTasksArgs
}

/**
 * ObjectiveCountOutputType without action
 */
export type ObjectiveCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ObjectiveCountOutputType
   */
  select?: Prisma.ObjectiveCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ObjectiveCountOutputType without action
 */
export type ObjectiveCountOutputTypeCountTasksArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TaskWhereInput
}

export type ObjectiveSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    initiativeId?: boolean
    title?: boolean
    keyResult?: boolean
    sortIndex?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
    tasks?: boolean | Prisma.Objective$tasksArgs<ExtArgs>
    _count?: boolean | Prisma.ObjectiveCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['objective']
>

export type ObjectiveSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    initiativeId?: boolean
    title?: boolean
    keyResult?: boolean
    sortIndex?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['objective']
>

export type ObjectiveSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    initiativeId?: boolean
    title?: boolean
    keyResult?: boolean
    sortIndex?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['objective']
>

export type ObjectiveSelectScalar = {
  id?: boolean
  initiativeId?: boolean
  title?: boolean
  keyResult?: boolean
  sortIndex?: boolean
}

export type ObjectiveOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'initiativeId' | 'title' | 'keyResult' | 'sortIndex',
  ExtArgs['result']['objective']
>
export type ObjectiveInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  tasks?: boolean | Prisma.Objective$tasksArgs<ExtArgs>
  _count?: boolean | Prisma.ObjectiveCountOutputTypeDefaultArgs<ExtArgs>
}
export type ObjectiveIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
}
export type ObjectiveIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
}

export type $ObjectivePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Objective'
  objects: {
    initiative: Prisma.$InitiativePayload<ExtArgs>
    tasks: Prisma.$TaskPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      initiativeId: string
      title: string
      keyResult: string | null
      sortIndex: number
    },
    ExtArgs['result']['objective']
  >
  composites: {}
}

export type ObjectiveGetPayload<
  S extends boolean | null | undefined | ObjectiveDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ObjectivePayload, S>

export type ObjectiveCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ObjectiveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: ObjectiveCountAggregateInputType | true
}

export interface ObjectiveDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Objective']
    meta: { name: 'Objective' }
  }
  /**
   * Find zero or one Objective that matches the filter.
   * @param {ObjectiveFindUniqueArgs} args - Arguments to find a Objective
   * @example
   * // Get one Objective
   * const objective = await prisma.objective.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ObjectiveFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ObjectiveFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one Objective that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ObjectiveFindUniqueOrThrowArgs} args - Arguments to find a Objective
   * @example
   * // Get one Objective
   * const objective = await prisma.objective.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ObjectiveFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ObjectiveFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Objective that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ObjectiveFindFirstArgs} args - Arguments to find a Objective
   * @example
   * // Get one Objective
   * const objective = await prisma.objective.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ObjectiveFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ObjectiveFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Objective that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ObjectiveFindFirstOrThrowArgs} args - Arguments to find a Objective
   * @example
   * // Get one Objective
   * const objective = await prisma.objective.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ObjectiveFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ObjectiveFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more Objectives that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ObjectiveFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Objectives
   * const objectives = await prisma.objective.findMany()
   *
   * // Get first 10 Objectives
   * const objectives = await prisma.objective.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const objectiveWithIdOnly = await prisma.objective.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ObjectiveFindManyArgs>(
    args?: Prisma.SelectSubset<T, ObjectiveFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a Objective.
   * @param {ObjectiveCreateArgs} args - Arguments to create a Objective.
   * @example
   * // Create one Objective
   * const Objective = await prisma.objective.create({
   *   data: {
   *     // ... data to create a Objective
   *   }
   * })
   *
   */
  create<T extends ObjectiveCreateArgs>(
    args: Prisma.SelectSubset<T, ObjectiveCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many Objectives.
   * @param {ObjectiveCreateManyArgs} args - Arguments to create many Objectives.
   * @example
   * // Create many Objectives
   * const objective = await prisma.objective.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ObjectiveCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ObjectiveCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Objectives and returns the data saved in the database.
   * @param {ObjectiveCreateManyAndReturnArgs} args - Arguments to create many Objectives.
   * @example
   * // Create many Objectives
   * const objective = await prisma.objective.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Objectives and only return the `id`
   * const objectiveWithIdOnly = await prisma.objective.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ObjectiveCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ObjectiveCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a Objective.
   * @param {ObjectiveDeleteArgs} args - Arguments to delete one Objective.
   * @example
   * // Delete one Objective
   * const Objective = await prisma.objective.delete({
   *   where: {
   *     // ... filter to delete one Objective
   *   }
   * })
   *
   */
  delete<T extends ObjectiveDeleteArgs>(
    args: Prisma.SelectSubset<T, ObjectiveDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one Objective.
   * @param {ObjectiveUpdateArgs} args - Arguments to update one Objective.
   * @example
   * // Update one Objective
   * const objective = await prisma.objective.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ObjectiveUpdateArgs>(
    args: Prisma.SelectSubset<T, ObjectiveUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more Objectives.
   * @param {ObjectiveDeleteManyArgs} args - Arguments to filter Objectives to delete.
   * @example
   * // Delete a few Objectives
   * const { count } = await prisma.objective.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ObjectiveDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ObjectiveDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Objectives.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ObjectiveUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Objectives
   * const objective = await prisma.objective.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ObjectiveUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ObjectiveUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Objectives and returns the data updated in the database.
   * @param {ObjectiveUpdateManyAndReturnArgs} args - Arguments to update many Objectives.
   * @example
   * // Update many Objectives
   * const objective = await prisma.objective.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Objectives and only return the `id`
   * const objectiveWithIdOnly = await prisma.objective.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ObjectiveUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ObjectiveUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one Objective.
   * @param {ObjectiveUpsertArgs} args - Arguments to update or create a Objective.
   * @example
   * // Update or create a Objective
   * const objective = await prisma.objective.upsert({
   *   create: {
   *     // ... data to create a Objective
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Objective we want to update
   *   }
   * })
   */
  upsert<T extends ObjectiveUpsertArgs>(
    args: Prisma.SelectSubset<T, ObjectiveUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of Objectives.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ObjectiveCountArgs} args - Arguments to filter Objectives to count.
   * @example
   * // Count the number of Objectives
   * const count = await prisma.objective.count({
   *   where: {
   *     // ... the filter for the Objectives we want to count
   *   }
   * })
   **/
  count<T extends ObjectiveCountArgs>(
    args?: Prisma.Subset<T, ObjectiveCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ObjectiveCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Objective.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ObjectiveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ObjectiveAggregateArgs>(
    args: Prisma.Subset<T, ObjectiveAggregateArgs>
  ): Prisma.PrismaPromise<GetObjectiveAggregateType<T>>

  /**
   * Group by Objective.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ObjectiveGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ObjectiveGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ObjectiveGroupByArgs['orderBy'] }
      : { orderBy?: ObjectiveGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ObjectiveGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetObjectiveGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Objective model
   */
  readonly fields: ObjectiveFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for Objective.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ObjectiveClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  initiative<T extends Prisma.InitiativeDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.InitiativeDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeClient<
    | runtime.Types.Result.GetResult<
        Prisma.$InitiativePayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  tasks<T extends Prisma.Objective$tasksArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Objective$tasksArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$TaskPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the Objective model
 */
export interface ObjectiveFieldRefs {
  readonly id: Prisma.FieldRef<'Objective', 'String'>
  readonly initiativeId: Prisma.FieldRef<'Objective', 'String'>
  readonly title: Prisma.FieldRef<'Objective', 'String'>
  readonly keyResult: Prisma.FieldRef<'Objective', 'String'>
  readonly sortIndex: Prisma.FieldRef<'Objective', 'Int'>
}

// Custom InputTypes
/**
 * Objective findUnique
 */
export type ObjectiveFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * Filter, which Objective to fetch.
   */
  where: Prisma.ObjectiveWhereUniqueInput
}

/**
 * Objective findUniqueOrThrow
 */
export type ObjectiveFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * Filter, which Objective to fetch.
   */
  where: Prisma.ObjectiveWhereUniqueInput
}

/**
 * Objective findFirst
 */
export type ObjectiveFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * Filter, which Objective to fetch.
   */
  where?: Prisma.ObjectiveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Objectives to fetch.
   */
  orderBy?:
    | Prisma.ObjectiveOrderByWithRelationInput
    | Prisma.ObjectiveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Objectives.
   */
  cursor?: Prisma.ObjectiveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Objectives from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Objectives.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Objectives.
   */
  distinct?: Prisma.ObjectiveScalarFieldEnum | Prisma.ObjectiveScalarFieldEnum[]
}

/**
 * Objective findFirstOrThrow
 */
export type ObjectiveFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * Filter, which Objective to fetch.
   */
  where?: Prisma.ObjectiveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Objectives to fetch.
   */
  orderBy?:
    | Prisma.ObjectiveOrderByWithRelationInput
    | Prisma.ObjectiveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Objectives.
   */
  cursor?: Prisma.ObjectiveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Objectives from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Objectives.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Objectives.
   */
  distinct?: Prisma.ObjectiveScalarFieldEnum | Prisma.ObjectiveScalarFieldEnum[]
}

/**
 * Objective findMany
 */
export type ObjectiveFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * Filter, which Objectives to fetch.
   */
  where?: Prisma.ObjectiveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Objectives to fetch.
   */
  orderBy?:
    | Prisma.ObjectiveOrderByWithRelationInput
    | Prisma.ObjectiveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Objectives.
   */
  cursor?: Prisma.ObjectiveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Objectives from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Objectives.
   */
  skip?: number
  distinct?: Prisma.ObjectiveScalarFieldEnum | Prisma.ObjectiveScalarFieldEnum[]
}

/**
 * Objective create
 */
export type ObjectiveCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * The data needed to create a Objective.
   */
  data: Prisma.XOR<
    Prisma.ObjectiveCreateInput,
    Prisma.ObjectiveUncheckedCreateInput
  >
}

/**
 * Objective createMany
 */
export type ObjectiveCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Objectives.
   */
  data: Prisma.ObjectiveCreateManyInput | Prisma.ObjectiveCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Objective createManyAndReturn
 */
export type ObjectiveCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * The data used to create many Objectives.
   */
  data: Prisma.ObjectiveCreateManyInput | Prisma.ObjectiveCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Objective update
 */
export type ObjectiveUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * The data needed to update a Objective.
   */
  data: Prisma.XOR<
    Prisma.ObjectiveUpdateInput,
    Prisma.ObjectiveUncheckedUpdateInput
  >
  /**
   * Choose, which Objective to update.
   */
  where: Prisma.ObjectiveWhereUniqueInput
}

/**
 * Objective updateMany
 */
export type ObjectiveUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Objectives.
   */
  data: Prisma.XOR<
    Prisma.ObjectiveUpdateManyMutationInput,
    Prisma.ObjectiveUncheckedUpdateManyInput
  >
  /**
   * Filter which Objectives to update
   */
  where?: Prisma.ObjectiveWhereInput
  /**
   * Limit how many Objectives to update.
   */
  limit?: number
}

/**
 * Objective updateManyAndReturn
 */
export type ObjectiveUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * The data used to update Objectives.
   */
  data: Prisma.XOR<
    Prisma.ObjectiveUpdateManyMutationInput,
    Prisma.ObjectiveUncheckedUpdateManyInput
  >
  /**
   * Filter which Objectives to update
   */
  where?: Prisma.ObjectiveWhereInput
  /**
   * Limit how many Objectives to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Objective upsert
 */
export type ObjectiveUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * The filter to search for the Objective to update in case it exists.
   */
  where: Prisma.ObjectiveWhereUniqueInput
  /**
   * In case the Objective found by the `where` argument doesn't exist, create a new Objective with this data.
   */
  create: Prisma.XOR<
    Prisma.ObjectiveCreateInput,
    Prisma.ObjectiveUncheckedCreateInput
  >
  /**
   * In case the Objective was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ObjectiveUpdateInput,
    Prisma.ObjectiveUncheckedUpdateInput
  >
}

/**
 * Objective delete
 */
export type ObjectiveDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  /**
   * Filter which Objective to delete.
   */
  where: Prisma.ObjectiveWhereUniqueInput
}

/**
 * Objective deleteMany
 */
export type ObjectiveDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Objectives to delete
   */
  where?: Prisma.ObjectiveWhereInput
  /**
   * Limit how many Objectives to delete.
   */
  limit?: number
}

/**
 * Objective.tasks
 */
export type Objective$tasksArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  where?: Prisma.TaskWhereInput
  orderBy?:
    | Prisma.TaskOrderByWithRelationInput
    | Prisma.TaskOrderByWithRelationInput[]
  cursor?: Prisma.TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Objective without action
 */
export type ObjectiveDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
}
