/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `MeetingInstanceParticipant` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model MeetingInstanceParticipant
 *
 */
export type MeetingInstanceParticipantModel =
  runtime.Types.Result.DefaultSelection<Prisma.$MeetingInstanceParticipantPayload>

export type AggregateMeetingInstanceParticipant = {
  _count: MeetingInstanceParticipantCountAggregateOutputType | null
  _min: MeetingInstanceParticipantMinAggregateOutputType | null
  _max: MeetingInstanceParticipantMaxAggregateOutputType | null
}

export type MeetingInstanceParticipantMinAggregateOutputType = {
  id: string | null
  meetingInstanceId: string | null
  personId: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MeetingInstanceParticipantMaxAggregateOutputType = {
  id: string | null
  meetingInstanceId: string | null
  personId: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MeetingInstanceParticipantCountAggregateOutputType = {
  id: number
  meetingInstanceId: number
  personId: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type MeetingInstanceParticipantMinAggregateInputType = {
  id?: true
  meetingInstanceId?: true
  personId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type MeetingInstanceParticipantMaxAggregateInputType = {
  id?: true
  meetingInstanceId?: true
  personId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type MeetingInstanceParticipantCountAggregateInputType = {
  id?: true
  meetingInstanceId?: true
  personId?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MeetingInstanceParticipantAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MeetingInstanceParticipant to aggregate.
   */
  where?: Prisma.MeetingInstanceParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MeetingInstanceParticipants to fetch.
   */
  orderBy?:
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MeetingInstanceParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MeetingInstanceParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MeetingInstanceParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MeetingInstanceParticipants
   **/
  _count?: true | MeetingInstanceParticipantCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MeetingInstanceParticipantMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MeetingInstanceParticipantMaxAggregateInputType
}

export type GetMeetingInstanceParticipantAggregateType<
  T extends MeetingInstanceParticipantAggregateArgs,
> = {
  [P in keyof T & keyof AggregateMeetingInstanceParticipant]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMeetingInstanceParticipant[P]>
    : Prisma.GetScalarType<T[P], AggregateMeetingInstanceParticipant[P]>
}

export type MeetingInstanceParticipantGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MeetingInstanceParticipantWhereInput
  orderBy?:
    | Prisma.MeetingInstanceParticipantOrderByWithAggregationInput
    | Prisma.MeetingInstanceParticipantOrderByWithAggregationInput[]
  by:
    | Prisma.MeetingInstanceParticipantScalarFieldEnum[]
    | Prisma.MeetingInstanceParticipantScalarFieldEnum
  having?: Prisma.MeetingInstanceParticipantScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MeetingInstanceParticipantCountAggregateInputType | true
  _min?: MeetingInstanceParticipantMinAggregateInputType
  _max?: MeetingInstanceParticipantMaxAggregateInputType
}

export type MeetingInstanceParticipantGroupByOutputType = {
  id: string
  meetingInstanceId: string
  personId: string
  status: string
  createdAt: Date
  updatedAt: Date
  _count: MeetingInstanceParticipantCountAggregateOutputType | null
  _min: MeetingInstanceParticipantMinAggregateOutputType | null
  _max: MeetingInstanceParticipantMaxAggregateOutputType | null
}

type GetMeetingInstanceParticipantGroupByPayload<
  T extends MeetingInstanceParticipantGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<
      MeetingInstanceParticipantGroupByOutputType,
      T['by']
    > & {
      [P in keyof T &
        keyof MeetingInstanceParticipantGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              MeetingInstanceParticipantGroupByOutputType[P]
            >
        : Prisma.GetScalarType<
            T[P],
            MeetingInstanceParticipantGroupByOutputType[P]
          >
    }
  >
>

export type MeetingInstanceParticipantWhereInput = {
  AND?:
    | Prisma.MeetingInstanceParticipantWhereInput
    | Prisma.MeetingInstanceParticipantWhereInput[]
  OR?: Prisma.MeetingInstanceParticipantWhereInput[]
  NOT?:
    | Prisma.MeetingInstanceParticipantWhereInput
    | Prisma.MeetingInstanceParticipantWhereInput[]
  id?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
  meetingInstanceId?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
  personId?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
  status?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
  createdAt?:
    | Prisma.DateTimeFilter<'MeetingInstanceParticipant'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeFilter<'MeetingInstanceParticipant'>
    | Date
    | string
  meetingInstance?: Prisma.XOR<
    Prisma.MeetingInstanceScalarRelationFilter,
    Prisma.MeetingInstanceWhereInput
  >
  person?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
}

export type MeetingInstanceParticipantOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meetingInstanceId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  meetingInstance?: Prisma.MeetingInstanceOrderByWithRelationInput
  person?: Prisma.PersonOrderByWithRelationInput
}

export type MeetingInstanceParticipantWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    meetingInstanceId_personId?: Prisma.MeetingInstanceParticipantMeetingInstanceIdPersonIdCompoundUniqueInput
    AND?:
      | Prisma.MeetingInstanceParticipantWhereInput
      | Prisma.MeetingInstanceParticipantWhereInput[]
    OR?: Prisma.MeetingInstanceParticipantWhereInput[]
    NOT?:
      | Prisma.MeetingInstanceParticipantWhereInput
      | Prisma.MeetingInstanceParticipantWhereInput[]
    meetingInstanceId?:
      | Prisma.StringFilter<'MeetingInstanceParticipant'>
      | string
    personId?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
    status?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
    createdAt?:
      | Prisma.DateTimeFilter<'MeetingInstanceParticipant'>
      | Date
      | string
    updatedAt?:
      | Prisma.DateTimeFilter<'MeetingInstanceParticipant'>
      | Date
      | string
    meetingInstance?: Prisma.XOR<
      Prisma.MeetingInstanceScalarRelationFilter,
      Prisma.MeetingInstanceWhereInput
    >
    person?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
  },
  'id' | 'meetingInstanceId_personId'
>

export type MeetingInstanceParticipantOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meetingInstanceId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MeetingInstanceParticipantCountOrderByAggregateInput
  _max?: Prisma.MeetingInstanceParticipantMaxOrderByAggregateInput
  _min?: Prisma.MeetingInstanceParticipantMinOrderByAggregateInput
}

export type MeetingInstanceParticipantScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MeetingInstanceParticipantScalarWhereWithAggregatesInput
    | Prisma.MeetingInstanceParticipantScalarWhereWithAggregatesInput[]
  OR?: Prisma.MeetingInstanceParticipantScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.MeetingInstanceParticipantScalarWhereWithAggregatesInput
    | Prisma.MeetingInstanceParticipantScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'MeetingInstanceParticipant'> | string
  meetingInstanceId?:
    | Prisma.StringWithAggregatesFilter<'MeetingInstanceParticipant'>
    | string
  personId?:
    | Prisma.StringWithAggregatesFilter<'MeetingInstanceParticipant'>
    | string
  status?:
    | Prisma.StringWithAggregatesFilter<'MeetingInstanceParticipant'>
    | string
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'MeetingInstanceParticipant'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'MeetingInstanceParticipant'>
    | Date
    | string
}

export type MeetingInstanceParticipantCreateInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  meetingInstance: Prisma.MeetingInstanceCreateNestedOneWithoutParticipantsInput
  person: Prisma.PersonCreateNestedOneWithoutMeetingInstanceParticipantsInput
}

export type MeetingInstanceParticipantUncheckedCreateInput = {
  id?: string
  meetingInstanceId: string
  personId: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceParticipantUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meetingInstance?: Prisma.MeetingInstanceUpdateOneRequiredWithoutParticipantsNestedInput
  person?: Prisma.PersonUpdateOneRequiredWithoutMeetingInstanceParticipantsNestedInput
}

export type MeetingInstanceParticipantUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingInstanceId?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceParticipantCreateManyInput = {
  id?: string
  meetingInstanceId: string
  personId: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceParticipantUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceParticipantUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingInstanceId?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceParticipantListRelationFilter = {
  every?: Prisma.MeetingInstanceParticipantWhereInput
  some?: Prisma.MeetingInstanceParticipantWhereInput
  none?: Prisma.MeetingInstanceParticipantWhereInput
}

export type MeetingInstanceParticipantOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MeetingInstanceParticipantMeetingInstanceIdPersonIdCompoundUniqueInput =
  {
    meetingInstanceId: string
    personId: string
  }

export type MeetingInstanceParticipantCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingInstanceId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingInstanceParticipantMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingInstanceId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingInstanceParticipantMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingInstanceId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingInstanceParticipantCreateNestedManyWithoutPersonInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceParticipantCreateWithoutPersonInput,
        Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput
      >
    | Prisma.MeetingInstanceParticipantCreateWithoutPersonInput[]
    | Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutPersonInput
    | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutPersonInput[]
  createMany?: Prisma.MeetingInstanceParticipantCreateManyPersonInputEnvelope
  connect?:
    | Prisma.MeetingInstanceParticipantWhereUniqueInput
    | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
}

export type MeetingInstanceParticipantUncheckedCreateNestedManyWithoutPersonInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MeetingInstanceParticipantCreateWithoutPersonInput,
          Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput
        >
      | Prisma.MeetingInstanceParticipantCreateWithoutPersonInput[]
      | Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput[]
    connectOrCreate?:
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutPersonInput
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutPersonInput[]
    createMany?: Prisma.MeetingInstanceParticipantCreateManyPersonInputEnvelope
    connect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
  }

export type MeetingInstanceParticipantUpdateManyWithoutPersonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceParticipantCreateWithoutPersonInput,
        Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput
      >
    | Prisma.MeetingInstanceParticipantCreateWithoutPersonInput[]
    | Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutPersonInput
    | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutPersonInput[]
  upsert?:
    | Prisma.MeetingInstanceParticipantUpsertWithWhereUniqueWithoutPersonInput
    | Prisma.MeetingInstanceParticipantUpsertWithWhereUniqueWithoutPersonInput[]
  createMany?: Prisma.MeetingInstanceParticipantCreateManyPersonInputEnvelope
  set?:
    | Prisma.MeetingInstanceParticipantWhereUniqueInput
    | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
  disconnect?:
    | Prisma.MeetingInstanceParticipantWhereUniqueInput
    | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
  delete?:
    | Prisma.MeetingInstanceParticipantWhereUniqueInput
    | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
  connect?:
    | Prisma.MeetingInstanceParticipantWhereUniqueInput
    | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
  update?:
    | Prisma.MeetingInstanceParticipantUpdateWithWhereUniqueWithoutPersonInput
    | Prisma.MeetingInstanceParticipantUpdateWithWhereUniqueWithoutPersonInput[]
  updateMany?:
    | Prisma.MeetingInstanceParticipantUpdateManyWithWhereWithoutPersonInput
    | Prisma.MeetingInstanceParticipantUpdateManyWithWhereWithoutPersonInput[]
  deleteMany?:
    | Prisma.MeetingInstanceParticipantScalarWhereInput
    | Prisma.MeetingInstanceParticipantScalarWhereInput[]
}

export type MeetingInstanceParticipantUncheckedUpdateManyWithoutPersonNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MeetingInstanceParticipantCreateWithoutPersonInput,
          Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput
        >
      | Prisma.MeetingInstanceParticipantCreateWithoutPersonInput[]
      | Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput[]
    connectOrCreate?:
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutPersonInput
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutPersonInput[]
    upsert?:
      | Prisma.MeetingInstanceParticipantUpsertWithWhereUniqueWithoutPersonInput
      | Prisma.MeetingInstanceParticipantUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: Prisma.MeetingInstanceParticipantCreateManyPersonInputEnvelope
    set?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    disconnect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    delete?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    connect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    update?:
      | Prisma.MeetingInstanceParticipantUpdateWithWhereUniqueWithoutPersonInput
      | Prisma.MeetingInstanceParticipantUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?:
      | Prisma.MeetingInstanceParticipantUpdateManyWithWhereWithoutPersonInput
      | Prisma.MeetingInstanceParticipantUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?:
      | Prisma.MeetingInstanceParticipantScalarWhereInput
      | Prisma.MeetingInstanceParticipantScalarWhereInput[]
  }

export type MeetingInstanceParticipantCreateNestedManyWithoutMeetingInstanceInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput,
          Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput
        >
      | Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput[]
      | Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput[]
    connectOrCreate?:
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput[]
    createMany?: Prisma.MeetingInstanceParticipantCreateManyMeetingInstanceInputEnvelope
    connect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
  }

export type MeetingInstanceParticipantUncheckedCreateNestedManyWithoutMeetingInstanceInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput,
          Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput
        >
      | Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput[]
      | Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput[]
    connectOrCreate?:
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput[]
    createMany?: Prisma.MeetingInstanceParticipantCreateManyMeetingInstanceInputEnvelope
    connect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
  }

export type MeetingInstanceParticipantUpdateManyWithoutMeetingInstanceNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput,
          Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput
        >
      | Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput[]
      | Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput[]
    connectOrCreate?:
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput[]
    upsert?:
      | Prisma.MeetingInstanceParticipantUpsertWithWhereUniqueWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantUpsertWithWhereUniqueWithoutMeetingInstanceInput[]
    createMany?: Prisma.MeetingInstanceParticipantCreateManyMeetingInstanceInputEnvelope
    set?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    disconnect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    delete?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    connect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    update?:
      | Prisma.MeetingInstanceParticipantUpdateWithWhereUniqueWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantUpdateWithWhereUniqueWithoutMeetingInstanceInput[]
    updateMany?:
      | Prisma.MeetingInstanceParticipantUpdateManyWithWhereWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantUpdateManyWithWhereWithoutMeetingInstanceInput[]
    deleteMany?:
      | Prisma.MeetingInstanceParticipantScalarWhereInput
      | Prisma.MeetingInstanceParticipantScalarWhereInput[]
  }

export type MeetingInstanceParticipantUncheckedUpdateManyWithoutMeetingInstanceNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput,
          Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput
        >
      | Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput[]
      | Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput[]
    connectOrCreate?:
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput[]
    upsert?:
      | Prisma.MeetingInstanceParticipantUpsertWithWhereUniqueWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantUpsertWithWhereUniqueWithoutMeetingInstanceInput[]
    createMany?: Prisma.MeetingInstanceParticipantCreateManyMeetingInstanceInputEnvelope
    set?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    disconnect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    delete?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    connect?:
      | Prisma.MeetingInstanceParticipantWhereUniqueInput
      | Prisma.MeetingInstanceParticipantWhereUniqueInput[]
    update?:
      | Prisma.MeetingInstanceParticipantUpdateWithWhereUniqueWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantUpdateWithWhereUniqueWithoutMeetingInstanceInput[]
    updateMany?:
      | Prisma.MeetingInstanceParticipantUpdateManyWithWhereWithoutMeetingInstanceInput
      | Prisma.MeetingInstanceParticipantUpdateManyWithWhereWithoutMeetingInstanceInput[]
    deleteMany?:
      | Prisma.MeetingInstanceParticipantScalarWhereInput
      | Prisma.MeetingInstanceParticipantScalarWhereInput[]
  }

export type MeetingInstanceParticipantCreateWithoutPersonInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  meetingInstance: Prisma.MeetingInstanceCreateNestedOneWithoutParticipantsInput
}

export type MeetingInstanceParticipantUncheckedCreateWithoutPersonInput = {
  id?: string
  meetingInstanceId: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceParticipantCreateOrConnectWithoutPersonInput = {
  where: Prisma.MeetingInstanceParticipantWhereUniqueInput
  create: Prisma.XOR<
    Prisma.MeetingInstanceParticipantCreateWithoutPersonInput,
    Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput
  >
}

export type MeetingInstanceParticipantCreateManyPersonInputEnvelope = {
  data:
    | Prisma.MeetingInstanceParticipantCreateManyPersonInput
    | Prisma.MeetingInstanceParticipantCreateManyPersonInput[]
  skipDuplicates?: boolean
}

export type MeetingInstanceParticipantUpsertWithWhereUniqueWithoutPersonInput =
  {
    where: Prisma.MeetingInstanceParticipantWhereUniqueInput
    update: Prisma.XOR<
      Prisma.MeetingInstanceParticipantUpdateWithoutPersonInput,
      Prisma.MeetingInstanceParticipantUncheckedUpdateWithoutPersonInput
    >
    create: Prisma.XOR<
      Prisma.MeetingInstanceParticipantCreateWithoutPersonInput,
      Prisma.MeetingInstanceParticipantUncheckedCreateWithoutPersonInput
    >
  }

export type MeetingInstanceParticipantUpdateWithWhereUniqueWithoutPersonInput =
  {
    where: Prisma.MeetingInstanceParticipantWhereUniqueInput
    data: Prisma.XOR<
      Prisma.MeetingInstanceParticipantUpdateWithoutPersonInput,
      Prisma.MeetingInstanceParticipantUncheckedUpdateWithoutPersonInput
    >
  }

export type MeetingInstanceParticipantUpdateManyWithWhereWithoutPersonInput = {
  where: Prisma.MeetingInstanceParticipantScalarWhereInput
  data: Prisma.XOR<
    Prisma.MeetingInstanceParticipantUpdateManyMutationInput,
    Prisma.MeetingInstanceParticipantUncheckedUpdateManyWithoutPersonInput
  >
}

export type MeetingInstanceParticipantScalarWhereInput = {
  AND?:
    | Prisma.MeetingInstanceParticipantScalarWhereInput
    | Prisma.MeetingInstanceParticipantScalarWhereInput[]
  OR?: Prisma.MeetingInstanceParticipantScalarWhereInput[]
  NOT?:
    | Prisma.MeetingInstanceParticipantScalarWhereInput
    | Prisma.MeetingInstanceParticipantScalarWhereInput[]
  id?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
  meetingInstanceId?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
  personId?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
  status?: Prisma.StringFilter<'MeetingInstanceParticipant'> | string
  createdAt?:
    | Prisma.DateTimeFilter<'MeetingInstanceParticipant'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeFilter<'MeetingInstanceParticipant'>
    | Date
    | string
}

export type MeetingInstanceParticipantCreateWithoutMeetingInstanceInput = {
  id?: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  person: Prisma.PersonCreateNestedOneWithoutMeetingInstanceParticipantsInput
}

export type MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput =
  {
    id?: string
    personId: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

export type MeetingInstanceParticipantCreateOrConnectWithoutMeetingInstanceInput =
  {
    where: Prisma.MeetingInstanceParticipantWhereUniqueInput
    create: Prisma.XOR<
      Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput,
      Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput
    >
  }

export type MeetingInstanceParticipantCreateManyMeetingInstanceInputEnvelope = {
  data:
    | Prisma.MeetingInstanceParticipantCreateManyMeetingInstanceInput
    | Prisma.MeetingInstanceParticipantCreateManyMeetingInstanceInput[]
  skipDuplicates?: boolean
}

export type MeetingInstanceParticipantUpsertWithWhereUniqueWithoutMeetingInstanceInput =
  {
    where: Prisma.MeetingInstanceParticipantWhereUniqueInput
    update: Prisma.XOR<
      Prisma.MeetingInstanceParticipantUpdateWithoutMeetingInstanceInput,
      Prisma.MeetingInstanceParticipantUncheckedUpdateWithoutMeetingInstanceInput
    >
    create: Prisma.XOR<
      Prisma.MeetingInstanceParticipantCreateWithoutMeetingInstanceInput,
      Prisma.MeetingInstanceParticipantUncheckedCreateWithoutMeetingInstanceInput
    >
  }

export type MeetingInstanceParticipantUpdateWithWhereUniqueWithoutMeetingInstanceInput =
  {
    where: Prisma.MeetingInstanceParticipantWhereUniqueInput
    data: Prisma.XOR<
      Prisma.MeetingInstanceParticipantUpdateWithoutMeetingInstanceInput,
      Prisma.MeetingInstanceParticipantUncheckedUpdateWithoutMeetingInstanceInput
    >
  }

export type MeetingInstanceParticipantUpdateManyWithWhereWithoutMeetingInstanceInput =
  {
    where: Prisma.MeetingInstanceParticipantScalarWhereInput
    data: Prisma.XOR<
      Prisma.MeetingInstanceParticipantUpdateManyMutationInput,
      Prisma.MeetingInstanceParticipantUncheckedUpdateManyWithoutMeetingInstanceInput
    >
  }

export type MeetingInstanceParticipantCreateManyPersonInput = {
  id?: string
  meetingInstanceId: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceParticipantUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meetingInstance?: Prisma.MeetingInstanceUpdateOneRequiredWithoutParticipantsNestedInput
}

export type MeetingInstanceParticipantUncheckedUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingInstanceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceParticipantUncheckedUpdateManyWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingInstanceId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceParticipantCreateManyMeetingInstanceInput = {
  id?: string
  personId: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceParticipantUpdateWithoutMeetingInstanceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  person?: Prisma.PersonUpdateOneRequiredWithoutMeetingInstanceParticipantsNestedInput
}

export type MeetingInstanceParticipantUncheckedUpdateWithoutMeetingInstanceInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string
    personId?: Prisma.StringFieldUpdateOperationsInput | string
    status?: Prisma.StringFieldUpdateOperationsInput | string
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  }

export type MeetingInstanceParticipantUncheckedUpdateManyWithoutMeetingInstanceInput =
  {
    id?: Prisma.StringFieldUpdateOperationsInput | string
    personId?: Prisma.StringFieldUpdateOperationsInput | string
    status?: Prisma.StringFieldUpdateOperationsInput | string
    createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  }

export type MeetingInstanceParticipantSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    meetingInstanceId?: boolean
    personId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetingInstance?: boolean | Prisma.MeetingInstanceDefaultArgs<ExtArgs>
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['meetingInstanceParticipant']
>

export type MeetingInstanceParticipantSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    meetingInstanceId?: boolean
    personId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetingInstance?: boolean | Prisma.MeetingInstanceDefaultArgs<ExtArgs>
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['meetingInstanceParticipant']
>

export type MeetingInstanceParticipantSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    meetingInstanceId?: boolean
    personId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetingInstance?: boolean | Prisma.MeetingInstanceDefaultArgs<ExtArgs>
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['meetingInstanceParticipant']
>

export type MeetingInstanceParticipantSelectScalar = {
  id?: boolean
  meetingInstanceId?: boolean
  personId?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MeetingInstanceParticipantOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'meetingInstanceId'
  | 'personId'
  | 'status'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['meetingInstanceParticipant']
>
export type MeetingInstanceParticipantInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  meetingInstance?: boolean | Prisma.MeetingInstanceDefaultArgs<ExtArgs>
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type MeetingInstanceParticipantIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  meetingInstance?: boolean | Prisma.MeetingInstanceDefaultArgs<ExtArgs>
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type MeetingInstanceParticipantIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  meetingInstance?: boolean | Prisma.MeetingInstanceDefaultArgs<ExtArgs>
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}

export type $MeetingInstanceParticipantPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MeetingInstanceParticipant'
  objects: {
    meetingInstance: Prisma.$MeetingInstancePayload<ExtArgs>
    person: Prisma.$PersonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      meetingInstanceId: string
      personId: string
      status: string
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['meetingInstanceParticipant']
  >
  composites: {}
}

export type MeetingInstanceParticipantGetPayload<
  S extends boolean | null | undefined | MeetingInstanceParticipantDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MeetingInstanceParticipantPayload, S>

export type MeetingInstanceParticipantCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  MeetingInstanceParticipantFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: MeetingInstanceParticipantCountAggregateInputType | true
}

export interface MeetingInstanceParticipantDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['MeetingInstanceParticipant']
    meta: { name: 'MeetingInstanceParticipant' }
  }
  /**
   * Find zero or one MeetingInstanceParticipant that matches the filter.
   * @param {MeetingInstanceParticipantFindUniqueArgs} args - Arguments to find a MeetingInstanceParticipant
   * @example
   * // Get one MeetingInstanceParticipant
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MeetingInstanceParticipantFindUniqueArgs>(
    args: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantFindUniqueArgs<ExtArgs>
    >
  ): Prisma.Prisma__MeetingInstanceParticipantClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one MeetingInstanceParticipant that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MeetingInstanceParticipantFindUniqueOrThrowArgs} args - Arguments to find a MeetingInstanceParticipant
   * @example
   * // Get one MeetingInstanceParticipant
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MeetingInstanceParticipantFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantFindUniqueOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__MeetingInstanceParticipantClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first MeetingInstanceParticipant that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceParticipantFindFirstArgs} args - Arguments to find a MeetingInstanceParticipant
   * @example
   * // Get one MeetingInstanceParticipant
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MeetingInstanceParticipantFindFirstArgs>(
    args?: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantFindFirstArgs<ExtArgs>
    >
  ): Prisma.Prisma__MeetingInstanceParticipantClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first MeetingInstanceParticipant that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceParticipantFindFirstOrThrowArgs} args - Arguments to find a MeetingInstanceParticipant
   * @example
   * // Get one MeetingInstanceParticipant
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MeetingInstanceParticipantFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantFindFirstOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__MeetingInstanceParticipantClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more MeetingInstanceParticipants that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MeetingInstanceParticipants
   * const meetingInstanceParticipants = await prisma.meetingInstanceParticipant.findMany()
   *
   * // Get first 10 MeetingInstanceParticipants
   * const meetingInstanceParticipants = await prisma.meetingInstanceParticipant.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const meetingInstanceParticipantWithIdOnly = await prisma.meetingInstanceParticipant.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MeetingInstanceParticipantFindManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantFindManyArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a MeetingInstanceParticipant.
   * @param {MeetingInstanceParticipantCreateArgs} args - Arguments to create a MeetingInstanceParticipant.
   * @example
   * // Create one MeetingInstanceParticipant
   * const MeetingInstanceParticipant = await prisma.meetingInstanceParticipant.create({
   *   data: {
   *     // ... data to create a MeetingInstanceParticipant
   *   }
   * })
   *
   */
  create<T extends MeetingInstanceParticipantCreateArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceParticipantCreateArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceParticipantClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many MeetingInstanceParticipants.
   * @param {MeetingInstanceParticipantCreateManyArgs} args - Arguments to create many MeetingInstanceParticipants.
   * @example
   * // Create many MeetingInstanceParticipants
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MeetingInstanceParticipantCreateManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantCreateManyArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MeetingInstanceParticipants and returns the data saved in the database.
   * @param {MeetingInstanceParticipantCreateManyAndReturnArgs} args - Arguments to create many MeetingInstanceParticipants.
   * @example
   * // Create many MeetingInstanceParticipants
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MeetingInstanceParticipants and only return the `id`
   * const meetingInstanceParticipantWithIdOnly = await prisma.meetingInstanceParticipant.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<
    T extends MeetingInstanceParticipantCreateManyAndReturnArgs,
  >(
    args?: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a MeetingInstanceParticipant.
   * @param {MeetingInstanceParticipantDeleteArgs} args - Arguments to delete one MeetingInstanceParticipant.
   * @example
   * // Delete one MeetingInstanceParticipant
   * const MeetingInstanceParticipant = await prisma.meetingInstanceParticipant.delete({
   *   where: {
   *     // ... filter to delete one MeetingInstanceParticipant
   *   }
   * })
   *
   */
  delete<T extends MeetingInstanceParticipantDeleteArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceParticipantDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceParticipantClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one MeetingInstanceParticipant.
   * @param {MeetingInstanceParticipantUpdateArgs} args - Arguments to update one MeetingInstanceParticipant.
   * @example
   * // Update one MeetingInstanceParticipant
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MeetingInstanceParticipantUpdateArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceParticipantUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceParticipantClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more MeetingInstanceParticipants.
   * @param {MeetingInstanceParticipantDeleteManyArgs} args - Arguments to filter MeetingInstanceParticipants to delete.
   * @example
   * // Delete a few MeetingInstanceParticipants
   * const { count } = await prisma.meetingInstanceParticipant.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MeetingInstanceParticipantDeleteManyArgs>(
    args?: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantDeleteManyArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingInstanceParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceParticipantUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MeetingInstanceParticipants
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MeetingInstanceParticipantUpdateManyArgs>(
    args: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantUpdateManyArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingInstanceParticipants and returns the data updated in the database.
   * @param {MeetingInstanceParticipantUpdateManyAndReturnArgs} args - Arguments to update many MeetingInstanceParticipants.
   * @example
   * // Update many MeetingInstanceParticipants
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MeetingInstanceParticipants and only return the `id`
   * const meetingInstanceParticipantWithIdOnly = await prisma.meetingInstanceParticipant.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<
    T extends MeetingInstanceParticipantUpdateManyAndReturnArgs,
  >(
    args: Prisma.SelectSubset<
      T,
      MeetingInstanceParticipantUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one MeetingInstanceParticipant.
   * @param {MeetingInstanceParticipantUpsertArgs} args - Arguments to update or create a MeetingInstanceParticipant.
   * @example
   * // Update or create a MeetingInstanceParticipant
   * const meetingInstanceParticipant = await prisma.meetingInstanceParticipant.upsert({
   *   create: {
   *     // ... data to create a MeetingInstanceParticipant
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MeetingInstanceParticipant we want to update
   *   }
   * })
   */
  upsert<T extends MeetingInstanceParticipantUpsertArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceParticipantUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceParticipantClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of MeetingInstanceParticipants.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceParticipantCountArgs} args - Arguments to filter MeetingInstanceParticipants to count.
   * @example
   * // Count the number of MeetingInstanceParticipants
   * const count = await prisma.meetingInstanceParticipant.count({
   *   where: {
   *     // ... the filter for the MeetingInstanceParticipants we want to count
   *   }
   * })
   **/
  count<T extends MeetingInstanceParticipantCountArgs>(
    args?: Prisma.Subset<T, MeetingInstanceParticipantCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            MeetingInstanceParticipantCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MeetingInstanceParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MeetingInstanceParticipantAggregateArgs>(
    args: Prisma.Subset<T, MeetingInstanceParticipantAggregateArgs>
  ): Prisma.PrismaPromise<GetMeetingInstanceParticipantAggregateType<T>>

  /**
   * Group by MeetingInstanceParticipant.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceParticipantGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MeetingInstanceParticipantGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MeetingInstanceParticipantGroupByArgs['orderBy'] }
      : { orderBy?: MeetingInstanceParticipantGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      MeetingInstanceParticipantGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetMeetingInstanceParticipantGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetingInstanceParticipant model
   */
  readonly fields: MeetingInstanceParticipantFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for MeetingInstanceParticipant.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MeetingInstanceParticipantClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  meetingInstance<T extends Prisma.MeetingInstanceDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MeetingInstanceDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MeetingInstancePayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  person<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the MeetingInstanceParticipant model
 */
export interface MeetingInstanceParticipantFieldRefs {
  readonly id: Prisma.FieldRef<'MeetingInstanceParticipant', 'String'>
  readonly meetingInstanceId: Prisma.FieldRef<
    'MeetingInstanceParticipant',
    'String'
  >
  readonly personId: Prisma.FieldRef<'MeetingInstanceParticipant', 'String'>
  readonly status: Prisma.FieldRef<'MeetingInstanceParticipant', 'String'>
  readonly createdAt: Prisma.FieldRef<'MeetingInstanceParticipant', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'MeetingInstanceParticipant', 'DateTime'>
}

// Custom InputTypes
/**
 * MeetingInstanceParticipant findUnique
 */
export type MeetingInstanceParticipantFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstanceParticipant to fetch.
   */
  where: Prisma.MeetingInstanceParticipantWhereUniqueInput
}

/**
 * MeetingInstanceParticipant findUniqueOrThrow
 */
export type MeetingInstanceParticipantFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstanceParticipant to fetch.
   */
  where: Prisma.MeetingInstanceParticipantWhereUniqueInput
}

/**
 * MeetingInstanceParticipant findFirst
 */
export type MeetingInstanceParticipantFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstanceParticipant to fetch.
   */
  where?: Prisma.MeetingInstanceParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MeetingInstanceParticipants to fetch.
   */
  orderBy?:
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MeetingInstanceParticipants.
   */
  cursor?: Prisma.MeetingInstanceParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MeetingInstanceParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MeetingInstanceParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MeetingInstanceParticipants.
   */
  distinct?:
    | Prisma.MeetingInstanceParticipantScalarFieldEnum
    | Prisma.MeetingInstanceParticipantScalarFieldEnum[]
}

/**
 * MeetingInstanceParticipant findFirstOrThrow
 */
export type MeetingInstanceParticipantFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstanceParticipant to fetch.
   */
  where?: Prisma.MeetingInstanceParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MeetingInstanceParticipants to fetch.
   */
  orderBy?:
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MeetingInstanceParticipants.
   */
  cursor?: Prisma.MeetingInstanceParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MeetingInstanceParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MeetingInstanceParticipants.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MeetingInstanceParticipants.
   */
  distinct?:
    | Prisma.MeetingInstanceParticipantScalarFieldEnum
    | Prisma.MeetingInstanceParticipantScalarFieldEnum[]
}

/**
 * MeetingInstanceParticipant findMany
 */
export type MeetingInstanceParticipantFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstanceParticipants to fetch.
   */
  where?: Prisma.MeetingInstanceParticipantWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MeetingInstanceParticipants to fetch.
   */
  orderBy?:
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MeetingInstanceParticipants.
   */
  cursor?: Prisma.MeetingInstanceParticipantWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MeetingInstanceParticipants from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MeetingInstanceParticipants.
   */
  skip?: number
  distinct?:
    | Prisma.MeetingInstanceParticipantScalarFieldEnum
    | Prisma.MeetingInstanceParticipantScalarFieldEnum[]
}

/**
 * MeetingInstanceParticipant create
 */
export type MeetingInstanceParticipantCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * The data needed to create a MeetingInstanceParticipant.
   */
  data: Prisma.XOR<
    Prisma.MeetingInstanceParticipantCreateInput,
    Prisma.MeetingInstanceParticipantUncheckedCreateInput
  >
}

/**
 * MeetingInstanceParticipant createMany
 */
export type MeetingInstanceParticipantCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MeetingInstanceParticipants.
   */
  data:
    | Prisma.MeetingInstanceParticipantCreateManyInput
    | Prisma.MeetingInstanceParticipantCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MeetingInstanceParticipant createManyAndReturn
 */
export type MeetingInstanceParticipantCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * The data used to create many MeetingInstanceParticipants.
   */
  data:
    | Prisma.MeetingInstanceParticipantCreateManyInput
    | Prisma.MeetingInstanceParticipantCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingInstanceParticipant update
 */
export type MeetingInstanceParticipantUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * The data needed to update a MeetingInstanceParticipant.
   */
  data: Prisma.XOR<
    Prisma.MeetingInstanceParticipantUpdateInput,
    Prisma.MeetingInstanceParticipantUncheckedUpdateInput
  >
  /**
   * Choose, which MeetingInstanceParticipant to update.
   */
  where: Prisma.MeetingInstanceParticipantWhereUniqueInput
}

/**
 * MeetingInstanceParticipant updateMany
 */
export type MeetingInstanceParticipantUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MeetingInstanceParticipants.
   */
  data: Prisma.XOR<
    Prisma.MeetingInstanceParticipantUpdateManyMutationInput,
    Prisma.MeetingInstanceParticipantUncheckedUpdateManyInput
  >
  /**
   * Filter which MeetingInstanceParticipants to update
   */
  where?: Prisma.MeetingInstanceParticipantWhereInput
  /**
   * Limit how many MeetingInstanceParticipants to update.
   */
  limit?: number
}

/**
 * MeetingInstanceParticipant updateManyAndReturn
 */
export type MeetingInstanceParticipantUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * The data used to update MeetingInstanceParticipants.
   */
  data: Prisma.XOR<
    Prisma.MeetingInstanceParticipantUpdateManyMutationInput,
    Prisma.MeetingInstanceParticipantUncheckedUpdateManyInput
  >
  /**
   * Filter which MeetingInstanceParticipants to update
   */
  where?: Prisma.MeetingInstanceParticipantWhereInput
  /**
   * Limit how many MeetingInstanceParticipants to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingInstanceParticipant upsert
 */
export type MeetingInstanceParticipantUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * The filter to search for the MeetingInstanceParticipant to update in case it exists.
   */
  where: Prisma.MeetingInstanceParticipantWhereUniqueInput
  /**
   * In case the MeetingInstanceParticipant found by the `where` argument doesn't exist, create a new MeetingInstanceParticipant with this data.
   */
  create: Prisma.XOR<
    Prisma.MeetingInstanceParticipantCreateInput,
    Prisma.MeetingInstanceParticipantUncheckedCreateInput
  >
  /**
   * In case the MeetingInstanceParticipant was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.MeetingInstanceParticipantUpdateInput,
    Prisma.MeetingInstanceParticipantUncheckedUpdateInput
  >
}

/**
 * MeetingInstanceParticipant delete
 */
export type MeetingInstanceParticipantDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  /**
   * Filter which MeetingInstanceParticipant to delete.
   */
  where: Prisma.MeetingInstanceParticipantWhereUniqueInput
}

/**
 * MeetingInstanceParticipant deleteMany
 */
export type MeetingInstanceParticipantDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MeetingInstanceParticipants to delete
   */
  where?: Prisma.MeetingInstanceParticipantWhereInput
  /**
   * Limit how many MeetingInstanceParticipants to delete.
   */
  limit?: number
}

/**
 * MeetingInstanceParticipant without action
 */
export type MeetingInstanceParticipantDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
}
