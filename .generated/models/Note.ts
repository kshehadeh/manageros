/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Note` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model Note
 *
 */
export type NoteModel =
  runtime.Types.Result.DefaultSelection<Prisma.$NotePayload>

export type AggregateNote = {
  _count: NoteCountAggregateOutputType | null
  _min: NoteMinAggregateOutputType | null
  _max: NoteMaxAggregateOutputType | null
}

export type NoteMinAggregateOutputType = {
  id: string | null
  entityType: string | null
  entityId: string | null
  organizationId: string | null
  content: string | null
  createdById: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NoteMaxAggregateOutputType = {
  id: string | null
  entityType: string | null
  entityId: string | null
  organizationId: string | null
  content: string | null
  createdById: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NoteCountAggregateOutputType = {
  id: number
  entityType: number
  entityId: number
  organizationId: number
  content: number
  createdById: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type NoteMinAggregateInputType = {
  id?: true
  entityType?: true
  entityId?: true
  organizationId?: true
  content?: true
  createdById?: true
  createdAt?: true
  updatedAt?: true
}

export type NoteMaxAggregateInputType = {
  id?: true
  entityType?: true
  entityId?: true
  organizationId?: true
  content?: true
  createdById?: true
  createdAt?: true
  updatedAt?: true
}

export type NoteCountAggregateInputType = {
  id?: true
  entityType?: true
  entityId?: true
  organizationId?: true
  content?: true
  createdById?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type NoteAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Note to aggregate.
   */
  where?: Prisma.NoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notes to fetch.
   */
  orderBy?:
    | Prisma.NoteOrderByWithRelationInput
    | Prisma.NoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.NoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Notes
   **/
  _count?: true | NoteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: NoteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: NoteMaxAggregateInputType
}

export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
  [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNote[P]>
    : Prisma.GetScalarType<T[P], AggregateNote[P]>
}

export type NoteGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NoteWhereInput
  orderBy?:
    | Prisma.NoteOrderByWithAggregationInput
    | Prisma.NoteOrderByWithAggregationInput[]
  by: Prisma.NoteScalarFieldEnum[] | Prisma.NoteScalarFieldEnum
  having?: Prisma.NoteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NoteCountAggregateInputType | true
  _min?: NoteMinAggregateInputType
  _max?: NoteMaxAggregateInputType
}

export type NoteGroupByOutputType = {
  id: string
  entityType: string
  entityId: string
  organizationId: string
  content: string
  createdById: string
  createdAt: Date
  updatedAt: Date
  _count: NoteCountAggregateOutputType | null
  _min: NoteMinAggregateOutputType | null
  _max: NoteMaxAggregateOutputType | null
}

type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NoteGroupByOutputType, T['by']> & {
      [P in keyof T & keyof NoteGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], NoteGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], NoteGroupByOutputType[P]>
    }
  >
>

export type NoteWhereInput = {
  AND?: Prisma.NoteWhereInput | Prisma.NoteWhereInput[]
  OR?: Prisma.NoteWhereInput[]
  NOT?: Prisma.NoteWhereInput | Prisma.NoteWhereInput[]
  id?: Prisma.StringFilter<'Note'> | string
  entityType?: Prisma.StringFilter<'Note'> | string
  entityId?: Prisma.StringFilter<'Note'> | string
  organizationId?: Prisma.StringFilter<'Note'> | string
  content?: Prisma.StringFilter<'Note'> | string
  createdById?: Prisma.StringFilter<'Note'> | string
  createdAt?: Prisma.DateTimeFilter<'Note'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'Note'> | Date | string
  organization?: Prisma.XOR<
    Prisma.OrganizationScalarRelationFilter,
    Prisma.OrganizationWhereInput
  >
  createdBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  attachments?: Prisma.FileAttachmentListRelationFilter
}

export type NoteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  entityType?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  createdBy?: Prisma.UserOrderByWithRelationInput
  attachments?: Prisma.FileAttachmentOrderByRelationAggregateInput
}

export type NoteWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.NoteWhereInput | Prisma.NoteWhereInput[]
    OR?: Prisma.NoteWhereInput[]
    NOT?: Prisma.NoteWhereInput | Prisma.NoteWhereInput[]
    entityType?: Prisma.StringFilter<'Note'> | string
    entityId?: Prisma.StringFilter<'Note'> | string
    organizationId?: Prisma.StringFilter<'Note'> | string
    content?: Prisma.StringFilter<'Note'> | string
    createdById?: Prisma.StringFilter<'Note'> | string
    createdAt?: Prisma.DateTimeFilter<'Note'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'Note'> | Date | string
    organization?: Prisma.XOR<
      Prisma.OrganizationScalarRelationFilter,
      Prisma.OrganizationWhereInput
    >
    createdBy?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >
    attachments?: Prisma.FileAttachmentListRelationFilter
  },
  'id'
>

export type NoteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  entityType?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.NoteCountOrderByAggregateInput
  _max?: Prisma.NoteMaxOrderByAggregateInput
  _min?: Prisma.NoteMinOrderByAggregateInput
}

export type NoteScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.NoteScalarWhereWithAggregatesInput
    | Prisma.NoteScalarWhereWithAggregatesInput[]
  OR?: Prisma.NoteScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.NoteScalarWhereWithAggregatesInput
    | Prisma.NoteScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'Note'> | string
  entityType?: Prisma.StringWithAggregatesFilter<'Note'> | string
  entityId?: Prisma.StringWithAggregatesFilter<'Note'> | string
  organizationId?: Prisma.StringWithAggregatesFilter<'Note'> | string
  content?: Prisma.StringWithAggregatesFilter<'Note'> | string
  createdById?: Prisma.StringWithAggregatesFilter<'Note'> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Note'> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Note'> | Date | string
}

export type NoteCreateInput = {
  id?: string
  entityType: string
  entityId: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutNotesInput
  createdBy: Prisma.UserCreateNestedOneWithoutNotesInput
  attachments?: Prisma.FileAttachmentCreateNestedManyWithoutNoteInput
}

export type NoteUncheckedCreateInput = {
  id?: string
  entityType: string
  entityId: string
  organizationId: string
  content: string
  createdById: string
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.FileAttachmentUncheckedCreateNestedManyWithoutNoteInput
}

export type NoteUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNotesNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutNotesNestedInput
  attachments?: Prisma.FileAttachmentUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.FileAttachmentUncheckedUpdateManyWithoutNoteNestedInput
}

export type NoteCreateManyInput = {
  id?: string
  entityType: string
  entityId: string
  organizationId: string
  content: string
  createdById: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteListRelationFilter = {
  every?: Prisma.NoteWhereInput
  some?: Prisma.NoteWhereInput
  none?: Prisma.NoteWhereInput
}

export type NoteOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NoteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entityType?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entityType?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  entityType?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NoteNullableScalarRelationFilter = {
  is?: Prisma.NoteWhereInput | null
  isNot?: Prisma.NoteWhereInput | null
}

export type NoteCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.NoteCreateWithoutOrganizationInput,
        Prisma.NoteUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.NoteCreateWithoutOrganizationInput[]
    | Prisma.NoteUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.NoteCreateOrConnectWithoutOrganizationInput
    | Prisma.NoteCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.NoteCreateManyOrganizationInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.NoteCreateWithoutOrganizationInput,
        Prisma.NoteUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.NoteCreateWithoutOrganizationInput[]
    | Prisma.NoteUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.NoteCreateOrConnectWithoutOrganizationInput
    | Prisma.NoteCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.NoteCreateManyOrganizationInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NoteCreateWithoutOrganizationInput,
        Prisma.NoteUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.NoteCreateWithoutOrganizationInput[]
    | Prisma.NoteUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.NoteCreateOrConnectWithoutOrganizationInput
    | Prisma.NoteCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.NoteUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.NoteUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.NoteCreateManyOrganizationInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?:
    | Prisma.NoteUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.NoteUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.NoteUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.NoteUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NoteCreateWithoutOrganizationInput,
        Prisma.NoteUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.NoteCreateWithoutOrganizationInput[]
    | Prisma.NoteUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.NoteCreateOrConnectWithoutOrganizationInput
    | Prisma.NoteCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.NoteUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.NoteUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.NoteCreateManyOrganizationInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?:
    | Prisma.NoteUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.NoteUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.NoteUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.NoteUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.NoteCreateWithoutCreatedByInput,
        Prisma.NoteUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.NoteCreateWithoutCreatedByInput[]
    | Prisma.NoteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?:
    | Prisma.NoteCreateOrConnectWithoutCreatedByInput
    | Prisma.NoteCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.NoteCreateManyCreatedByInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.NoteCreateWithoutCreatedByInput,
        Prisma.NoteUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.NoteCreateWithoutCreatedByInput[]
    | Prisma.NoteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?:
    | Prisma.NoteCreateOrConnectWithoutCreatedByInput
    | Prisma.NoteCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.NoteCreateManyCreatedByInputEnvelope
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
}

export type NoteUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NoteCreateWithoutCreatedByInput,
        Prisma.NoteUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.NoteCreateWithoutCreatedByInput[]
    | Prisma.NoteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?:
    | Prisma.NoteCreateOrConnectWithoutCreatedByInput
    | Prisma.NoteCreateOrConnectWithoutCreatedByInput[]
  upsert?:
    | Prisma.NoteUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.NoteUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.NoteCreateManyCreatedByInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?:
    | Prisma.NoteUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.NoteUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?:
    | Prisma.NoteUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.NoteUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NoteCreateWithoutCreatedByInput,
        Prisma.NoteUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.NoteCreateWithoutCreatedByInput[]
    | Prisma.NoteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?:
    | Prisma.NoteCreateOrConnectWithoutCreatedByInput
    | Prisma.NoteCreateOrConnectWithoutCreatedByInput[]
  upsert?:
    | Prisma.NoteUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.NoteUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.NoteCreateManyCreatedByInputEnvelope
  set?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  disconnect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  delete?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  connect?: Prisma.NoteWhereUniqueInput | Prisma.NoteWhereUniqueInput[]
  update?:
    | Prisma.NoteUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.NoteUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?:
    | Prisma.NoteUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.NoteUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
}

export type NoteCreateNestedOneWithoutAttachmentsInput = {
  create?: Prisma.XOR<
    Prisma.NoteCreateWithoutAttachmentsInput,
    Prisma.NoteUncheckedCreateWithoutAttachmentsInput
  >
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutAttachmentsInput
  connect?: Prisma.NoteWhereUniqueInput
}

export type NoteUpdateOneWithoutAttachmentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.NoteCreateWithoutAttachmentsInput,
    Prisma.NoteUncheckedCreateWithoutAttachmentsInput
  >
  connectOrCreate?: Prisma.NoteCreateOrConnectWithoutAttachmentsInput
  upsert?: Prisma.NoteUpsertWithoutAttachmentsInput
  disconnect?: Prisma.NoteWhereInput | boolean
  delete?: Prisma.NoteWhereInput | boolean
  connect?: Prisma.NoteWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.NoteUpdateToOneWithWhereWithoutAttachmentsInput,
      Prisma.NoteUpdateWithoutAttachmentsInput
    >,
    Prisma.NoteUncheckedUpdateWithoutAttachmentsInput
  >
}

export type NoteCreateWithoutOrganizationInput = {
  id?: string
  entityType: string
  entityId: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  createdBy: Prisma.UserCreateNestedOneWithoutNotesInput
  attachments?: Prisma.FileAttachmentCreateNestedManyWithoutNoteInput
}

export type NoteUncheckedCreateWithoutOrganizationInput = {
  id?: string
  entityType: string
  entityId: string
  content: string
  createdById: string
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.FileAttachmentUncheckedCreateNestedManyWithoutNoteInput
}

export type NoteCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.NoteWhereUniqueInput
  create: Prisma.XOR<
    Prisma.NoteCreateWithoutOrganizationInput,
    Prisma.NoteUncheckedCreateWithoutOrganizationInput
  >
}

export type NoteCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.NoteCreateManyOrganizationInput
    | Prisma.NoteCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type NoteUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.NoteWhereUniqueInput
  update: Prisma.XOR<
    Prisma.NoteUpdateWithoutOrganizationInput,
    Prisma.NoteUncheckedUpdateWithoutOrganizationInput
  >
  create: Prisma.XOR<
    Prisma.NoteCreateWithoutOrganizationInput,
    Prisma.NoteUncheckedCreateWithoutOrganizationInput
  >
}

export type NoteUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.NoteWhereUniqueInput
  data: Prisma.XOR<
    Prisma.NoteUpdateWithoutOrganizationInput,
    Prisma.NoteUncheckedUpdateWithoutOrganizationInput
  >
}

export type NoteUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.NoteScalarWhereInput
  data: Prisma.XOR<
    Prisma.NoteUpdateManyMutationInput,
    Prisma.NoteUncheckedUpdateManyWithoutOrganizationInput
  >
}

export type NoteScalarWhereInput = {
  AND?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
  OR?: Prisma.NoteScalarWhereInput[]
  NOT?: Prisma.NoteScalarWhereInput | Prisma.NoteScalarWhereInput[]
  id?: Prisma.StringFilter<'Note'> | string
  entityType?: Prisma.StringFilter<'Note'> | string
  entityId?: Prisma.StringFilter<'Note'> | string
  organizationId?: Prisma.StringFilter<'Note'> | string
  content?: Prisma.StringFilter<'Note'> | string
  createdById?: Prisma.StringFilter<'Note'> | string
  createdAt?: Prisma.DateTimeFilter<'Note'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'Note'> | Date | string
}

export type NoteCreateWithoutCreatedByInput = {
  id?: string
  entityType: string
  entityId: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutNotesInput
  attachments?: Prisma.FileAttachmentCreateNestedManyWithoutNoteInput
}

export type NoteUncheckedCreateWithoutCreatedByInput = {
  id?: string
  entityType: string
  entityId: string
  organizationId: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  attachments?: Prisma.FileAttachmentUncheckedCreateNestedManyWithoutNoteInput
}

export type NoteCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.NoteWhereUniqueInput
  create: Prisma.XOR<
    Prisma.NoteCreateWithoutCreatedByInput,
    Prisma.NoteUncheckedCreateWithoutCreatedByInput
  >
}

export type NoteCreateManyCreatedByInputEnvelope = {
  data:
    | Prisma.NoteCreateManyCreatedByInput
    | Prisma.NoteCreateManyCreatedByInput[]
  skipDuplicates?: boolean
}

export type NoteUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.NoteWhereUniqueInput
  update: Prisma.XOR<
    Prisma.NoteUpdateWithoutCreatedByInput,
    Prisma.NoteUncheckedUpdateWithoutCreatedByInput
  >
  create: Prisma.XOR<
    Prisma.NoteCreateWithoutCreatedByInput,
    Prisma.NoteUncheckedCreateWithoutCreatedByInput
  >
}

export type NoteUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.NoteWhereUniqueInput
  data: Prisma.XOR<
    Prisma.NoteUpdateWithoutCreatedByInput,
    Prisma.NoteUncheckedUpdateWithoutCreatedByInput
  >
}

export type NoteUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.NoteScalarWhereInput
  data: Prisma.XOR<
    Prisma.NoteUpdateManyMutationInput,
    Prisma.NoteUncheckedUpdateManyWithoutCreatedByInput
  >
}

export type NoteCreateWithoutAttachmentsInput = {
  id?: string
  entityType: string
  entityId: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutNotesInput
  createdBy: Prisma.UserCreateNestedOneWithoutNotesInput
}

export type NoteUncheckedCreateWithoutAttachmentsInput = {
  id?: string
  entityType: string
  entityId: string
  organizationId: string
  content: string
  createdById: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteCreateOrConnectWithoutAttachmentsInput = {
  where: Prisma.NoteWhereUniqueInput
  create: Prisma.XOR<
    Prisma.NoteCreateWithoutAttachmentsInput,
    Prisma.NoteUncheckedCreateWithoutAttachmentsInput
  >
}

export type NoteUpsertWithoutAttachmentsInput = {
  update: Prisma.XOR<
    Prisma.NoteUpdateWithoutAttachmentsInput,
    Prisma.NoteUncheckedUpdateWithoutAttachmentsInput
  >
  create: Prisma.XOR<
    Prisma.NoteCreateWithoutAttachmentsInput,
    Prisma.NoteUncheckedCreateWithoutAttachmentsInput
  >
  where?: Prisma.NoteWhereInput
}

export type NoteUpdateToOneWithWhereWithoutAttachmentsInput = {
  where?: Prisma.NoteWhereInput
  data: Prisma.XOR<
    Prisma.NoteUpdateWithoutAttachmentsInput,
    Prisma.NoteUncheckedUpdateWithoutAttachmentsInput
  >
}

export type NoteUpdateWithoutAttachmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNotesNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutNotesNestedInput
}

export type NoteUncheckedUpdateWithoutAttachmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteCreateManyOrganizationInput = {
  id?: string
  entityType: string
  entityId: string
  content: string
  createdById: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdBy?: Prisma.UserUpdateOneRequiredWithoutNotesNestedInput
  attachments?: Prisma.FileAttachmentUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.FileAttachmentUncheckedUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NoteCreateManyCreatedByInput = {
  id?: string
  entityType: string
  entityId: string
  organizationId: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NoteUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutNotesNestedInput
  attachments?: Prisma.FileAttachmentUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  attachments?: Prisma.FileAttachmentUncheckedUpdateManyWithoutNoteNestedInput
}

export type NoteUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entityType?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

/**
 * Count Type NoteCountOutputType
 */

export type NoteCountOutputType = {
  attachments: number
}

export type NoteCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  attachments?: boolean | NoteCountOutputTypeCountAttachmentsArgs
}

/**
 * NoteCountOutputType without action
 */
export type NoteCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NoteCountOutputType
   */
  select?: Prisma.NoteCountOutputTypeSelect<ExtArgs> | null
}

/**
 * NoteCountOutputType without action
 */
export type NoteCountOutputTypeCountAttachmentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FileAttachmentWhereInput
}

export type NoteSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    organizationId?: boolean
    content?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
    attachments?: boolean | Prisma.Note$attachmentsArgs<ExtArgs>
    _count?: boolean | Prisma.NoteCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['note']
>

export type NoteSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    organizationId?: boolean
    content?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['note']
>

export type NoteSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    organizationId?: boolean
    content?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['note']
>

export type NoteSelectScalar = {
  id?: boolean
  entityType?: boolean
  entityId?: boolean
  organizationId?: boolean
  content?: boolean
  createdById?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type NoteOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'entityType'
  | 'entityId'
  | 'organizationId'
  | 'content'
  | 'createdById'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['note']
>
export type NoteInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  attachments?: boolean | Prisma.Note$attachmentsArgs<ExtArgs>
  _count?: boolean | Prisma.NoteCountOutputTypeDefaultArgs<ExtArgs>
}
export type NoteIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type NoteIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $NotePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Note'
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    createdBy: Prisma.$UserPayload<ExtArgs>
    attachments: Prisma.$FileAttachmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      entityType: string
      entityId: string
      organizationId: string
      content: string
      createdById: string
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['note']
  >
  composites: {}
}

export type NoteGetPayload<
  S extends boolean | null | undefined | NoteDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$NotePayload, S>

export type NoteCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: NoteCountAggregateInputType | true
}

export interface NoteDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Note']
    meta: { name: 'Note' }
  }
  /**
   * Find zero or one Note that matches the filter.
   * @param {NoteFindUniqueArgs} args - Arguments to find a Note
   * @example
   * // Get one Note
   * const note = await prisma.note.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NoteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__NoteClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one Note that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
   * @example
   * // Get one Note
   * const note = await prisma.note.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__NoteClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Note that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteFindFirstArgs} args - Arguments to find a Note
   * @example
   * // Get one Note
   * const note = await prisma.note.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NoteFindFirstArgs>(
    args?: Prisma.SelectSubset<T, NoteFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__NoteClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Note that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
   * @example
   * // Get one Note
   * const note = await prisma.note.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__NoteClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more Notes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Notes
   * const notes = await prisma.note.findMany()
   *
   * // Get first 10 Notes
   * const notes = await prisma.note.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
   *
   */
  findMany<T extends NoteFindManyArgs>(
    args?: Prisma.SelectSubset<T, NoteFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a Note.
   * @param {NoteCreateArgs} args - Arguments to create a Note.
   * @example
   * // Create one Note
   * const Note = await prisma.note.create({
   *   data: {
   *     // ... data to create a Note
   *   }
   * })
   *
   */
  create<T extends NoteCreateArgs>(
    args: Prisma.SelectSubset<T, NoteCreateArgs<ExtArgs>>
  ): Prisma.Prisma__NoteClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many Notes.
   * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
   * @example
   * // Create many Notes
   * const note = await prisma.note.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends NoteCreateManyArgs>(
    args?: Prisma.SelectSubset<T, NoteCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Notes and returns the data saved in the database.
   * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
   * @example
   * // Create many Notes
   * const note = await prisma.note.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Notes and only return the `id`
   * const noteWithIdOnly = await prisma.note.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a Note.
   * @param {NoteDeleteArgs} args - Arguments to delete one Note.
   * @example
   * // Delete one Note
   * const Note = await prisma.note.delete({
   *   where: {
   *     // ... filter to delete one Note
   *   }
   * })
   *
   */
  delete<T extends NoteDeleteArgs>(
    args: Prisma.SelectSubset<T, NoteDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__NoteClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one Note.
   * @param {NoteUpdateArgs} args - Arguments to update one Note.
   * @example
   * // Update one Note
   * const note = await prisma.note.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends NoteUpdateArgs>(
    args: Prisma.SelectSubset<T, NoteUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__NoteClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more Notes.
   * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
   * @example
   * // Delete a few Notes
   * const { count } = await prisma.note.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends NoteDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Notes
   * const note = await prisma.note.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends NoteUpdateManyArgs>(
    args: Prisma.SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notes and returns the data updated in the database.
   * @param {NoteUpdateManyAndReturnArgs} args - Arguments to update many Notes.
   * @example
   * // Update many Notes
   * const note = await prisma.note.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Notes and only return the `id`
   * const noteWithIdOnly = await prisma.note.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends NoteUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, NoteUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one Note.
   * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
   * @example
   * // Update or create a Note
   * const note = await prisma.note.upsert({
   *   create: {
   *     // ... data to create a Note
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Note we want to update
   *   }
   * })
   */
  upsert<T extends NoteUpsertArgs>(
    args: Prisma.SelectSubset<T, NoteUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__NoteClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of Notes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteCountArgs} args - Arguments to filter Notes to count.
   * @example
   * // Count the number of Notes
   * const count = await prisma.note.count({
   *   where: {
   *     // ... the filter for the Notes we want to count
   *   }
   * })
   **/
  count<T extends NoteCountArgs>(
    args?: Prisma.Subset<T, NoteCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NoteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Note.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends NoteAggregateArgs>(
    args: Prisma.Subset<T, NoteAggregateArgs>
  ): Prisma.PrismaPromise<GetNoteAggregateType<T>>

  /**
   * Group by Note.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends NoteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NoteGroupByArgs['orderBy'] }
      : { orderBy?: NoteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, NoteGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetNoteGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for Note.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NoteClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrganizationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  attachments<T extends Prisma.Note$attachmentsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Note$attachmentsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$FileAttachmentPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the Note model
 */
export interface NoteFieldRefs {
  readonly id: Prisma.FieldRef<'Note', 'String'>
  readonly entityType: Prisma.FieldRef<'Note', 'String'>
  readonly entityId: Prisma.FieldRef<'Note', 'String'>
  readonly organizationId: Prisma.FieldRef<'Note', 'String'>
  readonly content: Prisma.FieldRef<'Note', 'String'>
  readonly createdById: Prisma.FieldRef<'Note', 'String'>
  readonly createdAt: Prisma.FieldRef<'Note', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'Note', 'DateTime'>
}

// Custom InputTypes
/**
 * Note findUnique
 */
export type NoteFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Note to fetch.
   */
  where: Prisma.NoteWhereUniqueInput
}

/**
 * Note findUniqueOrThrow
 */
export type NoteFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Note to fetch.
   */
  where: Prisma.NoteWhereUniqueInput
}

/**
 * Note findFirst
 */
export type NoteFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Note to fetch.
   */
  where?: Prisma.NoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notes to fetch.
   */
  orderBy?:
    | Prisma.NoteOrderByWithRelationInput
    | Prisma.NoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Notes.
   */
  cursor?: Prisma.NoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Notes.
   */
  distinct?: Prisma.NoteScalarFieldEnum | Prisma.NoteScalarFieldEnum[]
}

/**
 * Note findFirstOrThrow
 */
export type NoteFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Note to fetch.
   */
  where?: Prisma.NoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notes to fetch.
   */
  orderBy?:
    | Prisma.NoteOrderByWithRelationInput
    | Prisma.NoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Notes.
   */
  cursor?: Prisma.NoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Notes.
   */
  distinct?: Prisma.NoteScalarFieldEnum | Prisma.NoteScalarFieldEnum[]
}

/**
 * Note findMany
 */
export type NoteFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter, which Notes to fetch.
   */
  where?: Prisma.NoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notes to fetch.
   */
  orderBy?:
    | Prisma.NoteOrderByWithRelationInput
    | Prisma.NoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Notes.
   */
  cursor?: Prisma.NoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notes.
   */
  skip?: number
  distinct?: Prisma.NoteScalarFieldEnum | Prisma.NoteScalarFieldEnum[]
}

/**
 * Note create
 */
export type NoteCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * The data needed to create a Note.
   */
  data: Prisma.XOR<Prisma.NoteCreateInput, Prisma.NoteUncheckedCreateInput>
}

/**
 * Note createMany
 */
export type NoteCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Notes.
   */
  data: Prisma.NoteCreateManyInput | Prisma.NoteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Note createManyAndReturn
 */
export type NoteCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * The data used to create many Notes.
   */
  data: Prisma.NoteCreateManyInput | Prisma.NoteCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Note update
 */
export type NoteUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * The data needed to update a Note.
   */
  data: Prisma.XOR<Prisma.NoteUpdateInput, Prisma.NoteUncheckedUpdateInput>
  /**
   * Choose, which Note to update.
   */
  where: Prisma.NoteWhereUniqueInput
}

/**
 * Note updateMany
 */
export type NoteUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Notes.
   */
  data: Prisma.XOR<
    Prisma.NoteUpdateManyMutationInput,
    Prisma.NoteUncheckedUpdateManyInput
  >
  /**
   * Filter which Notes to update
   */
  where?: Prisma.NoteWhereInput
  /**
   * Limit how many Notes to update.
   */
  limit?: number
}

/**
 * Note updateManyAndReturn
 */
export type NoteUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * The data used to update Notes.
   */
  data: Prisma.XOR<
    Prisma.NoteUpdateManyMutationInput,
    Prisma.NoteUncheckedUpdateManyInput
  >
  /**
   * Filter which Notes to update
   */
  where?: Prisma.NoteWhereInput
  /**
   * Limit how many Notes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Note upsert
 */
export type NoteUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * The filter to search for the Note to update in case it exists.
   */
  where: Prisma.NoteWhereUniqueInput
  /**
   * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
   */
  create: Prisma.XOR<Prisma.NoteCreateInput, Prisma.NoteUncheckedCreateInput>
  /**
   * In case the Note was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NoteUpdateInput, Prisma.NoteUncheckedUpdateInput>
}

/**
 * Note delete
 */
export type NoteDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
  /**
   * Filter which Note to delete.
   */
  where: Prisma.NoteWhereUniqueInput
}

/**
 * Note deleteMany
 */
export type NoteDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Notes to delete
   */
  where?: Prisma.NoteWhereInput
  /**
   * Limit how many Notes to delete.
   */
  limit?: number
}

/**
 * Note.attachments
 */
export type Note$attachmentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FileAttachment
   */
  select?: Prisma.FileAttachmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileAttachment
   */
  omit?: Prisma.FileAttachmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileAttachmentInclude<ExtArgs> | null
  where?: Prisma.FileAttachmentWhereInput
  orderBy?:
    | Prisma.FileAttachmentOrderByWithRelationInput
    | Prisma.FileAttachmentOrderByWithRelationInput[]
  cursor?: Prisma.FileAttachmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?:
    | Prisma.FileAttachmentScalarFieldEnum
    | Prisma.FileAttachmentScalarFieldEnum[]
}

/**
 * Note without action
 */
export type NoteDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Note
   */
  select?: Prisma.NoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Note
   */
  omit?: Prisma.NoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NoteInclude<ExtArgs> | null
}
