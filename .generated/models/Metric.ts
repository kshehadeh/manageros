/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Metric` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model Metric
 *
 */
export type MetricModel =
  runtime.Types.Result.DefaultSelection<Prisma.$MetricPayload>

export type AggregateMetric = {
  _count: MetricCountAggregateOutputType | null
  _avg: MetricAvgAggregateOutputType | null
  _sum: MetricSumAggregateOutputType | null
  _min: MetricMinAggregateOutputType | null
  _max: MetricMaxAggregateOutputType | null
}

export type MetricAvgAggregateOutputType = {
  value: number | null
}

export type MetricSumAggregateOutputType = {
  value: number | null
}

export type MetricMinAggregateOutputType = {
  id: string | null
  initiativeId: string | null
  name: string | null
  unit: string | null
  value: number | null
  capturedAt: Date | null
}

export type MetricMaxAggregateOutputType = {
  id: string | null
  initiativeId: string | null
  name: string | null
  unit: string | null
  value: number | null
  capturedAt: Date | null
}

export type MetricCountAggregateOutputType = {
  id: number
  initiativeId: number
  name: number
  unit: number
  value: number
  capturedAt: number
  _all: number
}

export type MetricAvgAggregateInputType = {
  value?: true
}

export type MetricSumAggregateInputType = {
  value?: true
}

export type MetricMinAggregateInputType = {
  id?: true
  initiativeId?: true
  name?: true
  unit?: true
  value?: true
  capturedAt?: true
}

export type MetricMaxAggregateInputType = {
  id?: true
  initiativeId?: true
  name?: true
  unit?: true
  value?: true
  capturedAt?: true
}

export type MetricCountAggregateInputType = {
  id?: true
  initiativeId?: true
  name?: true
  unit?: true
  value?: true
  capturedAt?: true
  _all?: true
}

export type MetricAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Metric to aggregate.
   */
  where?: Prisma.MetricWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Metrics to fetch.
   */
  orderBy?:
    | Prisma.MetricOrderByWithRelationInput
    | Prisma.MetricOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MetricWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Metrics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Metrics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Metrics
   **/
  _count?: true | MetricCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: MetricAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: MetricSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MetricMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MetricMaxAggregateInputType
}

export type GetMetricAggregateType<T extends MetricAggregateArgs> = {
  [P in keyof T & keyof AggregateMetric]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMetric[P]>
    : Prisma.GetScalarType<T[P], AggregateMetric[P]>
}

export type MetricGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MetricWhereInput
  orderBy?:
    | Prisma.MetricOrderByWithAggregationInput
    | Prisma.MetricOrderByWithAggregationInput[]
  by: Prisma.MetricScalarFieldEnum[] | Prisma.MetricScalarFieldEnum
  having?: Prisma.MetricScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MetricCountAggregateInputType | true
  _avg?: MetricAvgAggregateInputType
  _sum?: MetricSumAggregateInputType
  _min?: MetricMinAggregateInputType
  _max?: MetricMaxAggregateInputType
}

export type MetricGroupByOutputType = {
  id: string
  initiativeId: string
  name: string
  unit: string | null
  value: number
  capturedAt: Date
  _count: MetricCountAggregateOutputType | null
  _avg: MetricAvgAggregateOutputType | null
  _sum: MetricSumAggregateOutputType | null
  _min: MetricMinAggregateOutputType | null
  _max: MetricMaxAggregateOutputType | null
}

type GetMetricGroupByPayload<T extends MetricGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<MetricGroupByOutputType, T['by']> & {
        [P in keyof T & keyof MetricGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MetricGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MetricGroupByOutputType[P]>
      }
    >
  >

export type MetricWhereInput = {
  AND?: Prisma.MetricWhereInput | Prisma.MetricWhereInput[]
  OR?: Prisma.MetricWhereInput[]
  NOT?: Prisma.MetricWhereInput | Prisma.MetricWhereInput[]
  id?: Prisma.StringFilter<'Metric'> | string
  initiativeId?: Prisma.StringFilter<'Metric'> | string
  name?: Prisma.StringFilter<'Metric'> | string
  unit?: Prisma.StringNullableFilter<'Metric'> | string | null
  value?: Prisma.FloatFilter<'Metric'> | number
  capturedAt?: Prisma.DateTimeFilter<'Metric'> | Date | string
  initiative?: Prisma.XOR<
    Prisma.InitiativeScalarRelationFilter,
    Prisma.InitiativeWhereInput
  >
}

export type MetricOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrderInput | Prisma.SortOrder
  value?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrder
  initiative?: Prisma.InitiativeOrderByWithRelationInput
}

export type MetricWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.MetricWhereInput | Prisma.MetricWhereInput[]
    OR?: Prisma.MetricWhereInput[]
    NOT?: Prisma.MetricWhereInput | Prisma.MetricWhereInput[]
    initiativeId?: Prisma.StringFilter<'Metric'> | string
    name?: Prisma.StringFilter<'Metric'> | string
    unit?: Prisma.StringNullableFilter<'Metric'> | string | null
    value?: Prisma.FloatFilter<'Metric'> | number
    capturedAt?: Prisma.DateTimeFilter<'Metric'> | Date | string
    initiative?: Prisma.XOR<
      Prisma.InitiativeScalarRelationFilter,
      Prisma.InitiativeWhereInput
    >
  },
  'id'
>

export type MetricOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrderInput | Prisma.SortOrder
  value?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrder
  _count?: Prisma.MetricCountOrderByAggregateInput
  _avg?: Prisma.MetricAvgOrderByAggregateInput
  _max?: Prisma.MetricMaxOrderByAggregateInput
  _min?: Prisma.MetricMinOrderByAggregateInput
  _sum?: Prisma.MetricSumOrderByAggregateInput
}

export type MetricScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MetricScalarWhereWithAggregatesInput
    | Prisma.MetricScalarWhereWithAggregatesInput[]
  OR?: Prisma.MetricScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.MetricScalarWhereWithAggregatesInput
    | Prisma.MetricScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'Metric'> | string
  initiativeId?: Prisma.StringWithAggregatesFilter<'Metric'> | string
  name?: Prisma.StringWithAggregatesFilter<'Metric'> | string
  unit?: Prisma.StringNullableWithAggregatesFilter<'Metric'> | string | null
  value?: Prisma.FloatWithAggregatesFilter<'Metric'> | number
  capturedAt?: Prisma.DateTimeWithAggregatesFilter<'Metric'> | Date | string
}

export type MetricCreateInput = {
  id?: string
  name: string
  unit?: string | null
  value: number
  capturedAt?: Date | string
  initiative: Prisma.InitiativeCreateNestedOneWithoutMetricsInput
}

export type MetricUncheckedCreateInput = {
  id?: string
  initiativeId: string
  name: string
  unit?: string | null
  value: number
  capturedAt?: Date | string
}

export type MetricUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  value?: Prisma.FloatFieldUpdateOperationsInput | number
  capturedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  initiative?: Prisma.InitiativeUpdateOneRequiredWithoutMetricsNestedInput
}

export type MetricUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  value?: Prisma.FloatFieldUpdateOperationsInput | number
  capturedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MetricCreateManyInput = {
  id?: string
  initiativeId: string
  name: string
  unit?: string | null
  value: number
  capturedAt?: Date | string
}

export type MetricUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  value?: Prisma.FloatFieldUpdateOperationsInput | number
  capturedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MetricUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  value?: Prisma.FloatFieldUpdateOperationsInput | number
  capturedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MetricListRelationFilter = {
  every?: Prisma.MetricWhereInput
  some?: Prisma.MetricWhereInput
  none?: Prisma.MetricWhereInput
}

export type MetricOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MetricCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  value?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrder
}

export type MetricAvgOrderByAggregateInput = {
  value?: Prisma.SortOrder
}

export type MetricMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  value?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrder
}

export type MetricMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  value?: Prisma.SortOrder
  capturedAt?: Prisma.SortOrder
}

export type MetricSumOrderByAggregateInput = {
  value?: Prisma.SortOrder
}

export type MetricCreateNestedManyWithoutInitiativeInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricCreateWithoutInitiativeInput,
        Prisma.MetricUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.MetricCreateWithoutInitiativeInput[]
    | Prisma.MetricUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.MetricCreateOrConnectWithoutInitiativeInput
    | Prisma.MetricCreateOrConnectWithoutInitiativeInput[]
  createMany?: Prisma.MetricCreateManyInitiativeInputEnvelope
  connect?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
}

export type MetricUncheckedCreateNestedManyWithoutInitiativeInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricCreateWithoutInitiativeInput,
        Prisma.MetricUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.MetricCreateWithoutInitiativeInput[]
    | Prisma.MetricUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.MetricCreateOrConnectWithoutInitiativeInput
    | Prisma.MetricCreateOrConnectWithoutInitiativeInput[]
  createMany?: Prisma.MetricCreateManyInitiativeInputEnvelope
  connect?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
}

export type MetricUpdateManyWithoutInitiativeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricCreateWithoutInitiativeInput,
        Prisma.MetricUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.MetricCreateWithoutInitiativeInput[]
    | Prisma.MetricUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.MetricCreateOrConnectWithoutInitiativeInput
    | Prisma.MetricCreateOrConnectWithoutInitiativeInput[]
  upsert?:
    | Prisma.MetricUpsertWithWhereUniqueWithoutInitiativeInput
    | Prisma.MetricUpsertWithWhereUniqueWithoutInitiativeInput[]
  createMany?: Prisma.MetricCreateManyInitiativeInputEnvelope
  set?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
  disconnect?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
  delete?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
  connect?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
  update?:
    | Prisma.MetricUpdateWithWhereUniqueWithoutInitiativeInput
    | Prisma.MetricUpdateWithWhereUniqueWithoutInitiativeInput[]
  updateMany?:
    | Prisma.MetricUpdateManyWithWhereWithoutInitiativeInput
    | Prisma.MetricUpdateManyWithWhereWithoutInitiativeInput[]
  deleteMany?: Prisma.MetricScalarWhereInput | Prisma.MetricScalarWhereInput[]
}

export type MetricUncheckedUpdateManyWithoutInitiativeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MetricCreateWithoutInitiativeInput,
        Prisma.MetricUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.MetricCreateWithoutInitiativeInput[]
    | Prisma.MetricUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.MetricCreateOrConnectWithoutInitiativeInput
    | Prisma.MetricCreateOrConnectWithoutInitiativeInput[]
  upsert?:
    | Prisma.MetricUpsertWithWhereUniqueWithoutInitiativeInput
    | Prisma.MetricUpsertWithWhereUniqueWithoutInitiativeInput[]
  createMany?: Prisma.MetricCreateManyInitiativeInputEnvelope
  set?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
  disconnect?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
  delete?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
  connect?: Prisma.MetricWhereUniqueInput | Prisma.MetricWhereUniqueInput[]
  update?:
    | Prisma.MetricUpdateWithWhereUniqueWithoutInitiativeInput
    | Prisma.MetricUpdateWithWhereUniqueWithoutInitiativeInput[]
  updateMany?:
    | Prisma.MetricUpdateManyWithWhereWithoutInitiativeInput
    | Prisma.MetricUpdateManyWithWhereWithoutInitiativeInput[]
  deleteMany?: Prisma.MetricScalarWhereInput | Prisma.MetricScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type MetricCreateWithoutInitiativeInput = {
  id?: string
  name: string
  unit?: string | null
  value: number
  capturedAt?: Date | string
}

export type MetricUncheckedCreateWithoutInitiativeInput = {
  id?: string
  name: string
  unit?: string | null
  value: number
  capturedAt?: Date | string
}

export type MetricCreateOrConnectWithoutInitiativeInput = {
  where: Prisma.MetricWhereUniqueInput
  create: Prisma.XOR<
    Prisma.MetricCreateWithoutInitiativeInput,
    Prisma.MetricUncheckedCreateWithoutInitiativeInput
  >
}

export type MetricCreateManyInitiativeInputEnvelope = {
  data:
    | Prisma.MetricCreateManyInitiativeInput
    | Prisma.MetricCreateManyInitiativeInput[]
  skipDuplicates?: boolean
}

export type MetricUpsertWithWhereUniqueWithoutInitiativeInput = {
  where: Prisma.MetricWhereUniqueInput
  update: Prisma.XOR<
    Prisma.MetricUpdateWithoutInitiativeInput,
    Prisma.MetricUncheckedUpdateWithoutInitiativeInput
  >
  create: Prisma.XOR<
    Prisma.MetricCreateWithoutInitiativeInput,
    Prisma.MetricUncheckedCreateWithoutInitiativeInput
  >
}

export type MetricUpdateWithWhereUniqueWithoutInitiativeInput = {
  where: Prisma.MetricWhereUniqueInput
  data: Prisma.XOR<
    Prisma.MetricUpdateWithoutInitiativeInput,
    Prisma.MetricUncheckedUpdateWithoutInitiativeInput
  >
}

export type MetricUpdateManyWithWhereWithoutInitiativeInput = {
  where: Prisma.MetricScalarWhereInput
  data: Prisma.XOR<
    Prisma.MetricUpdateManyMutationInput,
    Prisma.MetricUncheckedUpdateManyWithoutInitiativeInput
  >
}

export type MetricScalarWhereInput = {
  AND?: Prisma.MetricScalarWhereInput | Prisma.MetricScalarWhereInput[]
  OR?: Prisma.MetricScalarWhereInput[]
  NOT?: Prisma.MetricScalarWhereInput | Prisma.MetricScalarWhereInput[]
  id?: Prisma.StringFilter<'Metric'> | string
  initiativeId?: Prisma.StringFilter<'Metric'> | string
  name?: Prisma.StringFilter<'Metric'> | string
  unit?: Prisma.StringNullableFilter<'Metric'> | string | null
  value?: Prisma.FloatFilter<'Metric'> | number
  capturedAt?: Prisma.DateTimeFilter<'Metric'> | Date | string
}

export type MetricCreateManyInitiativeInput = {
  id?: string
  name: string
  unit?: string | null
  value: number
  capturedAt?: Date | string
}

export type MetricUpdateWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  value?: Prisma.FloatFieldUpdateOperationsInput | number
  capturedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MetricUncheckedUpdateWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  value?: Prisma.FloatFieldUpdateOperationsInput | number
  capturedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MetricUncheckedUpdateManyWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  value?: Prisma.FloatFieldUpdateOperationsInput | number
  capturedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MetricSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    initiativeId?: boolean
    name?: boolean
    unit?: boolean
    value?: boolean
    capturedAt?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['metric']
>

export type MetricSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    initiativeId?: boolean
    name?: boolean
    unit?: boolean
    value?: boolean
    capturedAt?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['metric']
>

export type MetricSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    initiativeId?: boolean
    name?: boolean
    unit?: boolean
    value?: boolean
    capturedAt?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['metric']
>

export type MetricSelectScalar = {
  id?: boolean
  initiativeId?: boolean
  name?: boolean
  unit?: boolean
  value?: boolean
  capturedAt?: boolean
}

export type MetricOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'initiativeId' | 'name' | 'unit' | 'value' | 'capturedAt',
  ExtArgs['result']['metric']
>
export type MetricInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
}
export type MetricIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
}
export type MetricIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
}

export type $MetricPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Metric'
  objects: {
    initiative: Prisma.$InitiativePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      initiativeId: string
      name: string
      unit: string | null
      value: number
      capturedAt: Date
    },
    ExtArgs['result']['metric']
  >
  composites: {}
}

export type MetricGetPayload<
  S extends boolean | null | undefined | MetricDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MetricPayload, S>

export type MetricCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<MetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: MetricCountAggregateInputType | true
}

export interface MetricDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Metric']
    meta: { name: 'Metric' }
  }
  /**
   * Find zero or one Metric that matches the filter.
   * @param {MetricFindUniqueArgs} args - Arguments to find a Metric
   * @example
   * // Get one Metric
   * const metric = await prisma.metric.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MetricFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MetricFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__MetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one Metric that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MetricFindUniqueOrThrowArgs} args - Arguments to find a Metric
   * @example
   * // Get one Metric
   * const metric = await prisma.metric.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MetricFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MetricFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__MetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Metric that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricFindFirstArgs} args - Arguments to find a Metric
   * @example
   * // Get one Metric
   * const metric = await prisma.metric.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MetricFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MetricFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__MetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Metric that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricFindFirstOrThrowArgs} args - Arguments to find a Metric
   * @example
   * // Get one Metric
   * const metric = await prisma.metric.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MetricFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MetricFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__MetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more Metrics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Metrics
   * const metrics = await prisma.metric.findMany()
   *
   * // Get first 10 Metrics
   * const metrics = await prisma.metric.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const metricWithIdOnly = await prisma.metric.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MetricFindManyArgs>(
    args?: Prisma.SelectSubset<T, MetricFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a Metric.
   * @param {MetricCreateArgs} args - Arguments to create a Metric.
   * @example
   * // Create one Metric
   * const Metric = await prisma.metric.create({
   *   data: {
   *     // ... data to create a Metric
   *   }
   * })
   *
   */
  create<T extends MetricCreateArgs>(
    args: Prisma.SelectSubset<T, MetricCreateArgs<ExtArgs>>
  ): Prisma.Prisma__MetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many Metrics.
   * @param {MetricCreateManyArgs} args - Arguments to create many Metrics.
   * @example
   * // Create many Metrics
   * const metric = await prisma.metric.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MetricCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MetricCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Metrics and returns the data saved in the database.
   * @param {MetricCreateManyAndReturnArgs} args - Arguments to create many Metrics.
   * @example
   * // Create many Metrics
   * const metric = await prisma.metric.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Metrics and only return the `id`
   * const metricWithIdOnly = await prisma.metric.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MetricCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, MetricCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a Metric.
   * @param {MetricDeleteArgs} args - Arguments to delete one Metric.
   * @example
   * // Delete one Metric
   * const Metric = await prisma.metric.delete({
   *   where: {
   *     // ... filter to delete one Metric
   *   }
   * })
   *
   */
  delete<T extends MetricDeleteArgs>(
    args: Prisma.SelectSubset<T, MetricDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__MetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one Metric.
   * @param {MetricUpdateArgs} args - Arguments to update one Metric.
   * @example
   * // Update one Metric
   * const metric = await prisma.metric.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MetricUpdateArgs>(
    args: Prisma.SelectSubset<T, MetricUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__MetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more Metrics.
   * @param {MetricDeleteManyArgs} args - Arguments to filter Metrics to delete.
   * @example
   * // Delete a few Metrics
   * const { count } = await prisma.metric.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MetricDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MetricDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Metrics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Metrics
   * const metric = await prisma.metric.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MetricUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MetricUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Metrics and returns the data updated in the database.
   * @param {MetricUpdateManyAndReturnArgs} args - Arguments to update many Metrics.
   * @example
   * // Update many Metrics
   * const metric = await prisma.metric.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Metrics and only return the `id`
   * const metricWithIdOnly = await prisma.metric.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MetricUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, MetricUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one Metric.
   * @param {MetricUpsertArgs} args - Arguments to update or create a Metric.
   * @example
   * // Update or create a Metric
   * const metric = await prisma.metric.upsert({
   *   create: {
   *     // ... data to create a Metric
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Metric we want to update
   *   }
   * })
   */
  upsert<T extends MetricUpsertArgs>(
    args: Prisma.SelectSubset<T, MetricUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__MetricClient<
    runtime.Types.Result.GetResult<
      Prisma.$MetricPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of Metrics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricCountArgs} args - Arguments to filter Metrics to count.
   * @example
   * // Count the number of Metrics
   * const count = await prisma.metric.count({
   *   where: {
   *     // ... the filter for the Metrics we want to count
   *   }
   * })
   **/
  count<T extends MetricCountArgs>(
    args?: Prisma.Subset<T, MetricCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MetricCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Metric.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MetricAggregateArgs>(
    args: Prisma.Subset<T, MetricAggregateArgs>
  ): Prisma.PrismaPromise<GetMetricAggregateType<T>>

  /**
   * Group by Metric.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MetricGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MetricGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MetricGroupByArgs['orderBy'] }
      : { orderBy?: MetricGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MetricGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetMetricGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Metric model
   */
  readonly fields: MetricFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for Metric.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MetricClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  initiative<T extends Prisma.InitiativeDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.InitiativeDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeClient<
    | runtime.Types.Result.GetResult<
        Prisma.$InitiativePayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the Metric model
 */
export interface MetricFieldRefs {
  readonly id: Prisma.FieldRef<'Metric', 'String'>
  readonly initiativeId: Prisma.FieldRef<'Metric', 'String'>
  readonly name: Prisma.FieldRef<'Metric', 'String'>
  readonly unit: Prisma.FieldRef<'Metric', 'String'>
  readonly value: Prisma.FieldRef<'Metric', 'Float'>
  readonly capturedAt: Prisma.FieldRef<'Metric', 'DateTime'>
}

// Custom InputTypes
/**
 * Metric findUnique
 */
export type MetricFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * Filter, which Metric to fetch.
   */
  where: Prisma.MetricWhereUniqueInput
}

/**
 * Metric findUniqueOrThrow
 */
export type MetricFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * Filter, which Metric to fetch.
   */
  where: Prisma.MetricWhereUniqueInput
}

/**
 * Metric findFirst
 */
export type MetricFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * Filter, which Metric to fetch.
   */
  where?: Prisma.MetricWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Metrics to fetch.
   */
  orderBy?:
    | Prisma.MetricOrderByWithRelationInput
    | Prisma.MetricOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Metrics.
   */
  cursor?: Prisma.MetricWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Metrics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Metrics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Metrics.
   */
  distinct?: Prisma.MetricScalarFieldEnum | Prisma.MetricScalarFieldEnum[]
}

/**
 * Metric findFirstOrThrow
 */
export type MetricFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * Filter, which Metric to fetch.
   */
  where?: Prisma.MetricWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Metrics to fetch.
   */
  orderBy?:
    | Prisma.MetricOrderByWithRelationInput
    | Prisma.MetricOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Metrics.
   */
  cursor?: Prisma.MetricWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Metrics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Metrics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Metrics.
   */
  distinct?: Prisma.MetricScalarFieldEnum | Prisma.MetricScalarFieldEnum[]
}

/**
 * Metric findMany
 */
export type MetricFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * Filter, which Metrics to fetch.
   */
  where?: Prisma.MetricWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Metrics to fetch.
   */
  orderBy?:
    | Prisma.MetricOrderByWithRelationInput
    | Prisma.MetricOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Metrics.
   */
  cursor?: Prisma.MetricWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Metrics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Metrics.
   */
  skip?: number
  distinct?: Prisma.MetricScalarFieldEnum | Prisma.MetricScalarFieldEnum[]
}

/**
 * Metric create
 */
export type MetricCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * The data needed to create a Metric.
   */
  data: Prisma.XOR<Prisma.MetricCreateInput, Prisma.MetricUncheckedCreateInput>
}

/**
 * Metric createMany
 */
export type MetricCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Metrics.
   */
  data: Prisma.MetricCreateManyInput | Prisma.MetricCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Metric createManyAndReturn
 */
export type MetricCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * The data used to create many Metrics.
   */
  data: Prisma.MetricCreateManyInput | Prisma.MetricCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Metric update
 */
export type MetricUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * The data needed to update a Metric.
   */
  data: Prisma.XOR<Prisma.MetricUpdateInput, Prisma.MetricUncheckedUpdateInput>
  /**
   * Choose, which Metric to update.
   */
  where: Prisma.MetricWhereUniqueInput
}

/**
 * Metric updateMany
 */
export type MetricUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Metrics.
   */
  data: Prisma.XOR<
    Prisma.MetricUpdateManyMutationInput,
    Prisma.MetricUncheckedUpdateManyInput
  >
  /**
   * Filter which Metrics to update
   */
  where?: Prisma.MetricWhereInput
  /**
   * Limit how many Metrics to update.
   */
  limit?: number
}

/**
 * Metric updateManyAndReturn
 */
export type MetricUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * The data used to update Metrics.
   */
  data: Prisma.XOR<
    Prisma.MetricUpdateManyMutationInput,
    Prisma.MetricUncheckedUpdateManyInput
  >
  /**
   * Filter which Metrics to update
   */
  where?: Prisma.MetricWhereInput
  /**
   * Limit how many Metrics to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Metric upsert
 */
export type MetricUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * The filter to search for the Metric to update in case it exists.
   */
  where: Prisma.MetricWhereUniqueInput
  /**
   * In case the Metric found by the `where` argument doesn't exist, create a new Metric with this data.
   */
  create: Prisma.XOR<
    Prisma.MetricCreateInput,
    Prisma.MetricUncheckedCreateInput
  >
  /**
   * In case the Metric was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.MetricUpdateInput,
    Prisma.MetricUncheckedUpdateInput
  >
}

/**
 * Metric delete
 */
export type MetricDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
  /**
   * Filter which Metric to delete.
   */
  where: Prisma.MetricWhereUniqueInput
}

/**
 * Metric deleteMany
 */
export type MetricDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Metrics to delete
   */
  where?: Prisma.MetricWhereInput
  /**
   * Limit how many Metrics to delete.
   */
  limit?: number
}

/**
 * Metric without action
 */
export type MetricDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Metric
   */
  select?: Prisma.MetricSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Metric
   */
  omit?: Prisma.MetricOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MetricInclude<ExtArgs> | null
}
