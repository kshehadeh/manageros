/**
 * Auto-generated help content index
 * 
 * This file is automatically generated from markdown files in the help/ directory.
 * Do not edit this file manually. Instead, edit the markdown files and run:
 * 
 *   bun run help:generate
 * 
 * Generated on: 2025-09-27T09:22:48.588Z
 */

export interface HelpContent {
  id: string
  title: string
  content: string
  category?: string
}

// Import all help content files
import { helpContent as taskStatus } from './task-status'
import { helpContent as taskPriorities } from './task-priorities'
import { helpContent as oneOnOnes } from './one-on-ones'
import { helpContent as directReports } from './direct-reports'
import { helpContent as feedbackCampaigns } from './feedback-campaigns'
import { helpContent as jiraIntegration } from './jira-integration'
import { helpContent as peopleHierarchy } from './people-hierarchy'
import { helpContent as initiatives } from './initiatives'

// Combine all help content into a single object
export const helpContent: Record<string, HelpContent> = {
  'task-status': taskStatus,
  'task-priorities': taskPriorities,
  'one-on-ones': oneOnOnes,
  'direct-reports': directReports,
  'feedback-campaigns': feedbackCampaigns,
  'jira-integration': jiraIntegration,
  'people-hierarchy': peopleHierarchy,
  'initiatives': initiatives
}

/**
 * Get help content by ID
 */
export function getHelpContent(id: string): HelpContent | undefined {
  return helpContent[id]
}

/**
 * Get all help content for a specific category
 */
export function getHelpContentByCategory(category: string): HelpContent[] {
  return Object.values(helpContent).filter(item => item.category === category)
}

/**
 * Get all available help content
 */
export function getAllHelpContent(): HelpContent[] {
  return Object.values(helpContent)
}

/**
 * Get all available categories
 */
export function getHelpCategories(): string[] {
  return Array.from(new Set(["Tasks & Projects", "Meetings & Communication", "People & Teams", "Feedback & Development", "Integrations"])).sort()
}

/**
 * Check if a help ID exists
 */
export function hasHelpContent(id: string): boolean {
  return id in helpContent
}

/**
 * Get all available help IDs
 */
export function getHelpIds(): string[] {
  return ["task-status", "task-priorities", "one-on-ones", "direct-reports", "feedback-campaigns", "jira-integration", "people-hierarchy", "initiatives"]
}
