/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from '@prisma/client/runtime/client'
import type * as Prisma from './prismaNamespace'

const config: runtime.GetPrismaClientConfig = {
  generator: {
    name: 'client',
    provider: {
      fromEnvVar: null,
      value: 'prisma-client',
    },
    output: {
      value: '/Users/kshehadeh/dev/karim/manageros/.generated',
      fromEnvVar: null,
    },
    config: {
      engineType: 'client',
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: 'darwin-arm64',
        native: true,
      },
      {
        fromEnvVar: null,
        value: 'rhel-openssl-3.0.x',
      },
    ],
    previewFeatures: [],
    sourceFilePath: '/Users/kshehadeh/dev/karim/manageros/prisma/schema.prisma',
    isCustomOutput: true,
  },
  relativePath: '../prisma',
  clientVersion: '6.17.1',
  engineVersion: '272a37d34178c2894197e17273bf937f25acdeac',
  datasourceNames: ['db'],
  activeProvider: 'postgresql',
  postinstall: false,
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: 'DATABASE_URL',
        value: null,
      },
    },
  },
  inlineSchema:
    'generator client {\n  provider      = "prisma-client"\n  output        = "../.generated"\n  engineType    = "client"\n  binaryTargets = ["native", "rhel-openssl-3.0.x"]\n}\n\ndatasource db {\n  provider  = "postgresql"\n  url       = env("DATABASE_URL")\n  directUrl = env("DIRECT_URL")\n}\n\nenum EmployeeType {\n  FULL_TIME\n  PART_TIME\n  INTERN\n  CONSULTANT\n}\n\nmodel Organization {\n  id          String   @id @default(cuid())\n  name        String\n  slug        String   @unique\n  description String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relationships\n  users             User[]\n  teams             Team[]\n  people            Person[]\n  initiatives       Initiative[]\n  invitations       OrganizationInvitation[]\n  meetings          Meeting[]\n  meetingInstances  MeetingInstance[]\n  entityLinks       EntityLink[]\n  jobRoles          JobRole[]\n  levels            JobLevel[]\n  domains           JobDomain[]\n  notifications     Notification[]\n  reportInstances   ReportInstance[]\n  cronJobExecutions CronJobExecution[]\n  notes             Note[]\n  fileAttachments   FileAttachment[]\n}\n\nmodel User {\n  id                    String                   @id @default(cuid())\n  email                 String                   @unique\n  name                  String\n  passwordHash          String\n  role                  String                   @default("USER") // ADMIN or USER\n  organizationId        String?\n  organization          Organization?            @relation(fields: [organizationId], references: [id])\n  personId              String?                  @unique\n  person                Person?                  @relation(fields: [personId], references: [id])\n  sentInvitations       OrganizationInvitation[]\n  jiraCredentials       UserJiraCredentials?\n  githubCredentials     UserGithubCredentials?\n  feedbackCampaigns     FeedbackCampaign[]\n  createdTasks          Task[]\n  createdMeetings       Meeting[]\n  createdEntityLinks    EntityLink[]\n  notifications         Notification[]\n  notificationResponses NotificationResponse[]\n  ownedReports          Report[]                 @relation("ReportOwner")\n  reportRuns            ReportInstance[]\n  notes                 Note[]\n  fileAttachments       FileAttachment[]\n  createdAt             DateTime                 @default(now())\n  updatedAt             DateTime                 @updatedAt\n\n  @@index([organizationId])\n  @@index([personId])\n}\n\nmodel Team {\n  id             String       @id @default(cuid())\n  name           String\n  description    String?\n  avatar         String? // Avatar URL (external URL or R2 storage URL)\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id])\n  parentId       String?\n  parent         Team?        @relation("TeamHierarchy", fields: [parentId], references: [id])\n  children       Team[]       @relation("TeamHierarchy")\n  people         Person[]\n  initiatives    Initiative[]\n  meetings       Meeting[]\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  @@index([organizationId])\n  @@index([parentId])\n}\n\nmodel Person {\n  id                 String               @id @default(cuid())\n  email              String?\n  name               String\n  role               String?\n  status             String               @default("active")\n  birthday           DateTime?\n  avatar             String? // Avatar URL (external URL or R2 storage URL)\n  employeeType       EmployeeType? // Type of employee (Full Time, Part Time, Intern, Consultant)\n  organizationId     String\n  organization       Organization         @relation(fields: [organizationId], references: [id])\n  teamId             String?\n  team               Team?                @relation(fields: [teamId], references: [id])\n  managerId          String?\n  manager            Person?              @relation("MgrReports", fields: [managerId], references: [id])\n  reports            Person[]             @relation("MgrReports")\n  jobRoleId          String?\n  jobRole            JobRole?             @relation(fields: [jobRoleId], references: [id])\n  startedAt          DateTime?\n  tasks              Task[]\n  oneOnOnes          OneOnOne[]           @relation("OOOReport")\n  oneOnOnesAsManager OneOnOne[]           @relation("OOOManager")\n  idps               IDP[]\n  feedback           Feedback[]           @relation("About")\n  feedbackFrom       Feedback[]           @relation("From")\n  initiativeOwners   InitiativeOwner[]\n  checkIns           CheckIn[]\n  events             Event[]\n  user               User?\n  jiraAccount        PersonJiraAccount?\n  githubAccount      PersonGithubAccount?\n  feedbackCampaigns  FeedbackCampaign[]   @relation("CampaignTarget")\n  ownedMeetings      Meeting[]            @relation("MeetingOwner")\n\n  meetingParticipants         MeetingParticipant[]         @relation("MeetingParticipant")\n  meetingInstanceParticipants MeetingInstanceParticipant[] @relation("MeetingInstanceParticipant")\n  createdAt                   DateTime                     @default(now())\n  updatedAt                   DateTime                     @updatedAt\n  synopses                    PersonSynopsis[]\n\n  @@index([organizationId])\n  @@index([jobRoleId])\n}\n\nmodel Initiative {\n  id             String            @id @default(cuid())\n  teamId         String?\n  team           Team?             @relation(fields: [teamId], references: [id])\n  organizationId String\n  organization   Organization      @relation(fields: [organizationId], references: [id])\n  title          String\n  summary        String?\n  outcome        String?\n  startDate      DateTime?\n  targetDate     DateTime?\n  status         String            @default("planned") // planned|in_progress|paused|done|canceled\n  rag            String            @default("green") // green|amber|red\n  confidence     Int               @default(80)\n  objectives     Objective[]\n  owners         InitiativeOwner[]\n  checkIns       CheckIn[]\n  metrics        Metric[]\n  tasks          Task[]\n  meetings       Meeting[]\n  createdAt      DateTime          @default(now())\n  updatedAt      DateTime          @updatedAt\n\n  @@index([organizationId])\n}\n\nmodel InitiativeOwner {\n  initiativeId String\n  personId     String\n  role         String @default("owner") // owner|sponsor|collaborator\n\n  initiative Initiative @relation(fields: [initiativeId], references: [id])\n  person     Person     @relation(fields: [personId], references: [id])\n\n  @@id([initiativeId, personId])\n}\n\nmodel Objective {\n  id           String     @id @default(cuid())\n  initiativeId String\n  initiative   Initiative @relation(fields: [initiativeId], references: [id])\n  title        String\n  keyResult    String?\n  sortIndex    Int        @default(0)\n  tasks        Task[]\n}\n\nmodel Task {\n  id           String      @id @default(cuid())\n  objectiveId  String?\n  objective    Objective?  @relation(fields: [objectiveId], references: [id])\n  initiativeId String?\n  initiative   Initiative? @relation(fields: [initiativeId], references: [id])\n  title        String\n  description  String?\n  assigneeId   String?\n  assignee     Person?     @relation(fields: [assigneeId], references: [id])\n  createdById  String\n  createdBy    User        @relation(fields: [createdById], references: [id])\n  status       String      @default("todo") // todo|doing|blocked|done|dropped\n  priority     Int         @default(2)\n  estimate     Int?\n  dueDate      DateTime?\n  createdAt    DateTime    @default(now())\n  updatedAt    DateTime    @updatedAt\n  completedAt  DateTime?\n}\n\nmodel CheckIn {\n  id           String     @id @default(cuid())\n  initiativeId String\n  initiative   Initiative @relation(fields: [initiativeId], references: [id])\n  weekOf       DateTime\n  rag          String     @default("green")\n  confidence   Int        @default(80)\n  summary      String\n  blockers     String?\n  nextSteps    String?\n  createdById  String\n  createdBy    Person     @relation(fields: [createdById], references: [id])\n  createdAt    DateTime   @default(now())\n}\n\nmodel OneOnOne {\n  id          String    @id @default(cuid())\n  managerId   String\n  reportId    String\n  scheduledAt DateTime?\n  notes       String?\n  // actionItems  Task[]   @relation("OneOnOneTasks")\n  manager     Person    @relation("OOOManager", fields: [managerId], references: [id])\n  report      Person    @relation("OOOReport", fields: [reportId], references: [id])\n}\n\nmodel IDP {\n  id        String    @id @default(cuid())\n  personId  String\n  person    Person    @relation(fields: [personId], references: [id])\n  period    String\n  summary   String?\n  goals     IDPGoal[]\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n}\n\nmodel IDPGoal {\n  id      String    @id @default(cuid())\n  idpId   String\n  idp     IDP       @relation(fields: [idpId], references: [id])\n  title   String\n  metric  String?\n  target  String?\n  status  String    @default("in_progress")\n  dueDate DateTime?\n}\n\nmodel Feedback {\n  id        String   @id @default(cuid())\n  aboutId   String\n  about     Person   @relation("About", fields: [aboutId], references: [id])\n  fromId    String\n  from      Person   @relation("From", fields: [fromId], references: [id])\n  kind      String   @default("note") // praise|concern|note\n  isPrivate Boolean  @default(true)\n  body      String\n  createdAt DateTime @default(now())\n}\n\nmodel Metric {\n  id           String     @id @default(cuid())\n  initiativeId String\n  initiative   Initiative @relation(fields: [initiativeId], references: [id])\n  name         String\n  unit         String?\n  value        Float\n  capturedAt   DateTime   @default(now())\n}\n\nmodel Tag {\n  id    String   @id @default(cuid())\n  name  String   @unique\n  color String?\n  maps  TagMap[]\n}\n\nmodel TagMap {\n  tagId    String\n  tag      Tag    @relation(fields: [tagId], references: [id])\n  entity   String\n  entityId String\n\n  @@id([tagId, entity, entityId])\n}\n\nmodel OrganizationInvitation {\n  id             String       @id @default(cuid())\n  email          String\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id])\n  invitedById    String\n  invitedBy      User         @relation(fields: [invitedById], references: [id])\n  status         String       @default("pending") // pending|accepted|expired|revoked\n  expiresAt      DateTime\n  acceptedAt     DateTime?\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  @@unique([email, organizationId])\n  @@index([organizationId])\n  @@index([email])\n  @@index([status])\n}\n\nmodel Event {\n  id        String   @id @default(cuid())\n  actorId   String?\n  actor     Person?  @relation(fields: [actorId], references: [id])\n  entity    String\n  entityId  String\n  action    String\n  metadata  String?\n  createdAt DateTime @default(now())\n}\n\nmodel UserJiraCredentials {\n  id              String   @id @default(cuid())\n  userId          String   @unique\n  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  jiraUsername    String\n  encryptedApiKey String\n  jiraBaseUrl     String\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n}\n\nmodel PersonJiraAccount {\n  id              String   @id @default(cuid())\n  personId        String   @unique\n  person          Person   @relation(fields: [personId], references: [id], onDelete: Cascade)\n  jiraAccountId   String\n  jiraEmail       String\n  jiraDisplayName String?\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  @@index([jiraAccountId])\n  @@index([jiraEmail])\n}\n\nmodel UserGithubCredentials {\n  id             String   @id @default(cuid())\n  userId         String   @unique\n  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  githubUsername String\n  encryptedPat   String\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n}\n\nmodel PersonGithubAccount {\n  id                String   @id @default(cuid())\n  personId          String   @unique\n  person            Person   @relation(fields: [personId], references: [id], onDelete: Cascade)\n  githubUsername    String\n  githubDisplayName String?\n  githubEmail       String?\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n\n  @@index([githubUsername])\n}\n\nmodel FeedbackCampaign {\n  id             String             @id @default(cuid())\n  name           String? // Custom name for the campaign (e.g., "Performance Review 2026")\n  userId         String\n  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)\n  targetPersonId String\n  targetPerson   Person             @relation("CampaignTarget", fields: [targetPersonId], references: [id], onDelete: Cascade)\n  templateId     String?\n  template       FeedbackTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)\n  startDate      DateTime\n  endDate        DateTime\n  inviteEmails   String[] // Array of email addresses to invite\n  inviteLink     String? // Unique link for invitees to access the feedback form\n  status         String             @default("draft") // draft|active|completed|cancelled\n  responses      FeedbackResponse[]\n  createdAt      DateTime           @default(now())\n  updatedAt      DateTime           @updatedAt\n\n  @@index([userId])\n  @@index([targetPersonId])\n  @@index([templateId])\n  @@index([status])\n  @@index([startDate])\n  @@index([endDate])\n  @@index([inviteLink])\n}\n\nmodel FeedbackResponse {\n  id             String           @id @default(cuid())\n  campaignId     String\n  campaign       FeedbackCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)\n  responderEmail String\n  responses      Json // Store the structured feedback responses as JSON\n  submittedAt    DateTime         @default(now())\n\n  @@unique([campaignId, responderEmail]) // Prevent duplicate responses from same email\n  @@index([campaignId])\n  @@index([responderEmail])\n}\n\nmodel FeedbackTemplate {\n  id          String             @id @default(cuid())\n  name        String\n  description String?\n  isDefault   Boolean            @default(false)\n  questions   FeedbackQuestion[]\n  campaigns   FeedbackCampaign[]\n  createdAt   DateTime           @default(now())\n  updatedAt   DateTime           @updatedAt\n\n  @@index([isDefault])\n}\n\nmodel FeedbackQuestion {\n  id         String           @id @default(cuid())\n  templateId String\n  template   FeedbackTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)\n  question   String\n  type       String           @default("text") // text|rating|multiple_choice\n  required   Boolean          @default(true)\n  options    Json? // For multiple choice questions\n  sortOrder  Int              @default(0)\n  createdAt  DateTime         @default(now())\n  updatedAt  DateTime         @updatedAt\n\n  @@index([templateId])\n  @@index([sortOrder])\n}\n\nmodel Meeting {\n  id             String               @id @default(cuid())\n  title          String\n  description    String?\n  scheduledAt    DateTime\n  duration       Int? // Duration in minutes\n  location       String? // Physical or virtual location\n  notes          String? // Open area for notes\n  isRecurring    Boolean              @default(false)\n  recurrenceType String? // daily|weekly|monthly|bi_monthly|semi_annually\n  isPrivate      Boolean              @default(true) // Private meetings are only visible to creator and participants\n  organizationId String\n  organization   Organization         @relation(fields: [organizationId], references: [id])\n  teamId         String? // Optional team association\n  team           Team?                @relation(fields: [teamId], references: [id])\n  initiativeId   String? // Optional initiative association\n  initiative     Initiative?          @relation(fields: [initiativeId], references: [id])\n  ownerId        String? // Meeting owner (assigned to a person)\n  owner          Person?              @relation("MeetingOwner", fields: [ownerId], references: [id])\n  createdById    String // User who created the meeting\n  createdBy      User                 @relation(fields: [createdById], references: [id])\n  participants   MeetingParticipant[]\n  instances      MeetingInstance[]\n  createdAt      DateTime             @default(now())\n  updatedAt      DateTime             @updatedAt\n\n  @@index([organizationId])\n  @@index([teamId])\n  @@index([initiativeId])\n  @@index([ownerId])\n  @@index([createdById])\n  @@index([scheduledAt])\n  @@index([isRecurring])\n}\n\nmodel MeetingParticipant {\n  id        String   @id @default(cuid())\n  meetingId String\n  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)\n  personId  String\n  person    Person   @relation("MeetingParticipant", fields: [personId], references: [id])\n  status    String   @default("invited") // invited|accepted|declined|tentative\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([meetingId, personId])\n  @@index([meetingId])\n  @@index([personId])\n  @@index([status])\n}\n\nmodel MeetingInstance {\n  id             String                       @id @default(cuid())\n  meetingId      String\n  meeting        Meeting                      @relation(fields: [meetingId], references: [id], onDelete: Cascade)\n  scheduledAt    DateTime // Specific date/time for this instance\n  notes          String? // Notes for this specific instance\n  isPrivate      Boolean                      @default(true) // Inherits privacy from parent meeting\n  organizationId String\n  organization   Organization                 @relation(fields: [organizationId], references: [id])\n  participants   MeetingInstanceParticipant[]\n  createdAt      DateTime                     @default(now())\n  updatedAt      DateTime                     @updatedAt\n\n  @@index([meetingId])\n  @@index([organizationId])\n  @@index([scheduledAt])\n}\n\nmodel MeetingInstanceParticipant {\n  id                String          @id @default(cuid())\n  meetingInstanceId String\n  meetingInstance   MeetingInstance @relation(fields: [meetingInstanceId], references: [id], onDelete: Cascade)\n  personId          String\n  person            Person          @relation("MeetingInstanceParticipant", fields: [personId], references: [id])\n  status            String          @default("invited") // invited|accepted|declined|tentative|attended|absent\n  createdAt         DateTime        @default(now())\n  updatedAt         DateTime        @updatedAt\n\n  @@unique([meetingInstanceId, personId])\n  @@index([meetingInstanceId])\n  @@index([personId])\n  @@index([status])\n}\n\nmodel PersonSynopsis {\n  id              String   @id @default(cuid())\n  personId        String\n  person          Person   @relation(fields: [personId], references: [id], onDelete: Cascade)\n  fromDate        DateTime\n  toDate          DateTime\n  includeFeedback Boolean  @default(false)\n  content         String\n  sources         String[]\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  @@index([personId])\n  @@index([fromDate])\n  @@index([toDate])\n}\n\nmodel EntityLink {\n  id             String       @id @default(cuid())\n  url            String\n  title          String?\n  description    String?\n  entityType     String // The type of entity (e.g., "Initiative", "Task", "Meeting", "MeetingInstance", "Team", "Person", "OneOnOne")\n  entityId       String // The ID of the entity\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  createdById    String\n  createdBy      User         @relation(fields: [createdById], references: [id], onDelete: Cascade)\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  @@index([entityType, entityId])\n  @@index([organizationId])\n  @@index([createdById])\n}\n\nmodel JobRole {\n  id             String       @id @default(cuid())\n  title          String\n  description    String? // Markdown-enabled job description\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  levelId        String\n  level          JobLevel     @relation("JobRoleLevel", fields: [levelId], references: [id], onDelete: Restrict)\n  domainId       String\n  domain         JobDomain    @relation("JobRoleDomain", fields: [domainId], references: [id], onDelete: Restrict)\n  people         Person[]\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  @@index([organizationId])\n  @@index([levelId])\n  @@index([domainId])\n}\n\nmodel JobLevel {\n  id             String       @id @default(cuid())\n  name           String\n  order          Int          @default(0)\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  jobRoles       JobRole[]    @relation("JobRoleLevel")\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  @@unique([name, organizationId])\n  @@index([organizationId])\n  @@index([order])\n}\n\nmodel JobDomain {\n  id             String       @id @default(cuid())\n  name           String\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  jobRoles       JobRole[]    @relation("JobRoleDomain")\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  @@unique([name, organizationId])\n  @@index([organizationId])\n}\n\nmodel PasswordResetToken {\n  id        String   @id @default(cuid())\n  email     String\n  token     String   @unique\n  expires   DateTime\n  createdAt DateTime @default(now())\n\n  @@index([email])\n  @@index([token])\n}\n\nmodel Notification {\n  id             String        @id @default(cuid())\n  title          String\n  message        String\n  type           String        @default("info") // info|warning|success|error\n  organizationId String?\n  organization   Organization? @relation(fields: [organizationId], references: [id])\n  userId         String? // If null, it\'s an organization-wide notification\n  user           User?         @relation(fields: [userId], references: [id])\n  metadata       Json? // Additional data for deduplication and job tracking\n  createdAt      DateTime      @default(now())\n  updatedAt      DateTime      @updatedAt\n\n  // Relationships\n  responses NotificationResponse[]\n\n  @@index([organizationId])\n  @@index([userId])\n  @@index([createdAt])\n}\n\nmodel NotificationResponse {\n  id             String       @id @default(cuid())\n  notificationId String\n  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)\n  userId         String\n  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)\n  status         String       @default("unread") // unread|read|dismissed\n  readAt         DateTime?\n  dismissedAt    DateTime?\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  @@unique([notificationId, userId])\n  @@index([notificationId])\n  @@index([userId])\n  @@index([status])\n}\n\nmodel CronJobExecution {\n  id                   String        @id @default(cuid())\n  jobId                String\n  jobName              String\n  organizationId       String?\n  organization         Organization? @relation(fields: [organizationId], references: [id])\n  status               String        @default("running") // running|completed|failed\n  startedAt            DateTime      @default(now())\n  completedAt          DateTime?\n  notificationsCreated Int           @default(0)\n  error                String?\n  metadata             Json?\n  createdAt            DateTime      @default(now())\n  updatedAt            DateTime      @updatedAt\n\n  @@index([jobId])\n  @@index([organizationId])\n  @@index([startedAt])\n  @@index([status])\n}\n\n/// Reports define executable, extensible data aggregations.\nmodel Report {\n  id          String           @id @default(cuid())\n  codeId      String           @unique // Stable code identifier that maps to implementation/registry\n  name        String\n  description String?\n  ownerId     String?\n  owner       User?            @relation("ReportOwner", fields: [ownerId], references: [id], onDelete: SetNull)\n  inputSchema Json? // Optional JSON schema/Zod-like descriptor for dynamic forms\n  enabled     Boolean          @default(true)\n  renderers   String[] // Supported renderer identifiers (e.g., ["markdown"]) \n  createdAt   DateTime         @default(now())\n  updatedAt   DateTime         @updatedAt\n  instances   ReportInstance[]\n\n  @@index([ownerId])\n}\n\n/// A single execution of a report with captured inputs and outputs\nmodel ReportInstance {\n  id             String       @id @default(cuid())\n  reportId       String\n  report         Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)\n  userId         String // The user who executed the report\n  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)\n  organizationId String // Redundant but used for strong org isolation filters\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  renderer       String // Renderer used for this instance (e.g., "markdown")\n  input          Json // Input values used to execute the report\n  output         Json // Raw JSON output of the report execution\n  status         String       @default("completed") // queued|running|failed|completed\n  errorMessage   String?\n  startedAt      DateTime     @default(now())\n  completedAt    DateTime?\n\n  @@index([reportId])\n  @@index([userId])\n  @@index([organizationId])\n  @@index([status])\n  @@index([startedAt])\n  @@index([completedAt])\n}\n\nmodel Note {\n  id             String           @id @default(cuid())\n  entityType     String // The type of entity (e.g., "Initiative", "Task", "Meeting", "Person")\n  entityId       String // The ID of the entity\n  organizationId String\n  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  content        String\n  createdById    String\n  createdBy      User             @relation(fields: [createdById], references: [id], onDelete: Cascade)\n  createdAt      DateTime         @default(now())\n  updatedAt      DateTime         @updatedAt\n  attachments    FileAttachment[]\n\n  @@index([entityType, entityId])\n  @@index([organizationId])\n  @@index([createdById])\n  @@index([createdAt])\n}\n\nmodel FileAttachment {\n  id             String       @id @default(cuid())\n  noteId         String?\n  note           Note?        @relation(fields: [noteId], references: [id], onDelete: Cascade)\n  entityType     String // The type of entity (e.g., "Initiative", "Task", "Meeting", "Person")\n  entityId       String // The ID of the entity\n  organizationId String\n  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  fileName       String\n  originalName   String\n  fileSize       Int\n  mimeType       String\n  r2Key          String // Cloudflare R2 object key\n  r2Url          String // Public URL for the file\n  uploadedById   String\n  uploadedBy     User         @relation(fields: [uploadedById], references: [id], onDelete: Cascade)\n  createdAt      DateTime     @default(now())\n\n  @@index([noteId])\n  @@index([entityType, entityId])\n  @@index([organizationId])\n  @@index([uploadedById])\n  @@index([createdAt])\n}\n',
  inlineSchemaHash:
    'cad5092e3dd60b8c5f310dc787974e78db92122617a473872b3d01b9c6a892b9',
  copyEngine: true,
  runtimeDataModel: {
    models: {},
    enums: {},
    types: {},
  },
  dirname: '',
}

config.runtimeDataModel = JSON.parse(
  '{"models":{"Organization":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"slug","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"users","kind":"object","type":"User","relationName":"OrganizationToUser"},{"name":"teams","kind":"object","type":"Team","relationName":"OrganizationToTeam"},{"name":"people","kind":"object","type":"Person","relationName":"OrganizationToPerson"},{"name":"initiatives","kind":"object","type":"Initiative","relationName":"InitiativeToOrganization"},{"name":"invitations","kind":"object","type":"OrganizationInvitation","relationName":"OrganizationToOrganizationInvitation"},{"name":"meetings","kind":"object","type":"Meeting","relationName":"MeetingToOrganization"},{"name":"meetingInstances","kind":"object","type":"MeetingInstance","relationName":"MeetingInstanceToOrganization"},{"name":"entityLinks","kind":"object","type":"EntityLink","relationName":"EntityLinkToOrganization"},{"name":"jobRoles","kind":"object","type":"JobRole","relationName":"JobRoleToOrganization"},{"name":"levels","kind":"object","type":"JobLevel","relationName":"JobLevelToOrganization"},{"name":"domains","kind":"object","type":"JobDomain","relationName":"JobDomainToOrganization"},{"name":"notifications","kind":"object","type":"Notification","relationName":"NotificationToOrganization"},{"name":"reportInstances","kind":"object","type":"ReportInstance","relationName":"OrganizationToReportInstance"},{"name":"cronJobExecutions","kind":"object","type":"CronJobExecution","relationName":"CronJobExecutionToOrganization"},{"name":"notes","kind":"object","type":"Note","relationName":"NoteToOrganization"},{"name":"fileAttachments","kind":"object","type":"FileAttachment","relationName":"FileAttachmentToOrganization"}],"dbName":null},"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"passwordHash","kind":"scalar","type":"String"},{"name":"role","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"OrganizationToUser"},{"name":"personId","kind":"scalar","type":"String"},{"name":"person","kind":"object","type":"Person","relationName":"PersonToUser"},{"name":"sentInvitations","kind":"object","type":"OrganizationInvitation","relationName":"OrganizationInvitationToUser"},{"name":"jiraCredentials","kind":"object","type":"UserJiraCredentials","relationName":"UserToUserJiraCredentials"},{"name":"githubCredentials","kind":"object","type":"UserGithubCredentials","relationName":"UserToUserGithubCredentials"},{"name":"feedbackCampaigns","kind":"object","type":"FeedbackCampaign","relationName":"FeedbackCampaignToUser"},{"name":"createdTasks","kind":"object","type":"Task","relationName":"TaskToUser"},{"name":"createdMeetings","kind":"object","type":"Meeting","relationName":"MeetingToUser"},{"name":"createdEntityLinks","kind":"object","type":"EntityLink","relationName":"EntityLinkToUser"},{"name":"notifications","kind":"object","type":"Notification","relationName":"NotificationToUser"},{"name":"notificationResponses","kind":"object","type":"NotificationResponse","relationName":"NotificationResponseToUser"},{"name":"ownedReports","kind":"object","type":"Report","relationName":"ReportOwner"},{"name":"reportRuns","kind":"object","type":"ReportInstance","relationName":"ReportInstanceToUser"},{"name":"notes","kind":"object","type":"Note","relationName":"NoteToUser"},{"name":"fileAttachments","kind":"object","type":"FileAttachment","relationName":"FileAttachmentToUser"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Team":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"avatar","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"OrganizationToTeam"},{"name":"parentId","kind":"scalar","type":"String"},{"name":"parent","kind":"object","type":"Team","relationName":"TeamHierarchy"},{"name":"children","kind":"object","type":"Team","relationName":"TeamHierarchy"},{"name":"people","kind":"object","type":"Person","relationName":"PersonToTeam"},{"name":"initiatives","kind":"object","type":"Initiative","relationName":"InitiativeToTeam"},{"name":"meetings","kind":"object","type":"Meeting","relationName":"MeetingToTeam"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Person":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"role","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"birthday","kind":"scalar","type":"DateTime"},{"name":"avatar","kind":"scalar","type":"String"},{"name":"employeeType","kind":"enum","type":"EmployeeType"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"OrganizationToPerson"},{"name":"teamId","kind":"scalar","type":"String"},{"name":"team","kind":"object","type":"Team","relationName":"PersonToTeam"},{"name":"managerId","kind":"scalar","type":"String"},{"name":"manager","kind":"object","type":"Person","relationName":"MgrReports"},{"name":"reports","kind":"object","type":"Person","relationName":"MgrReports"},{"name":"jobRoleId","kind":"scalar","type":"String"},{"name":"jobRole","kind":"object","type":"JobRole","relationName":"JobRoleToPerson"},{"name":"startedAt","kind":"scalar","type":"DateTime"},{"name":"tasks","kind":"object","type":"Task","relationName":"PersonToTask"},{"name":"oneOnOnes","kind":"object","type":"OneOnOne","relationName":"OOOReport"},{"name":"oneOnOnesAsManager","kind":"object","type":"OneOnOne","relationName":"OOOManager"},{"name":"idps","kind":"object","type":"IDP","relationName":"IDPToPerson"},{"name":"feedback","kind":"object","type":"Feedback","relationName":"About"},{"name":"feedbackFrom","kind":"object","type":"Feedback","relationName":"From"},{"name":"initiativeOwners","kind":"object","type":"InitiativeOwner","relationName":"InitiativeOwnerToPerson"},{"name":"checkIns","kind":"object","type":"CheckIn","relationName":"CheckInToPerson"},{"name":"events","kind":"object","type":"Event","relationName":"EventToPerson"},{"name":"user","kind":"object","type":"User","relationName":"PersonToUser"},{"name":"jiraAccount","kind":"object","type":"PersonJiraAccount","relationName":"PersonToPersonJiraAccount"},{"name":"githubAccount","kind":"object","type":"PersonGithubAccount","relationName":"PersonToPersonGithubAccount"},{"name":"feedbackCampaigns","kind":"object","type":"FeedbackCampaign","relationName":"CampaignTarget"},{"name":"ownedMeetings","kind":"object","type":"Meeting","relationName":"MeetingOwner"},{"name":"meetingParticipants","kind":"object","type":"MeetingParticipant","relationName":"MeetingParticipant"},{"name":"meetingInstanceParticipants","kind":"object","type":"MeetingInstanceParticipant","relationName":"MeetingInstanceParticipant"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"synopses","kind":"object","type":"PersonSynopsis","relationName":"PersonToPersonSynopsis"}],"dbName":null},"Initiative":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"teamId","kind":"scalar","type":"String"},{"name":"team","kind":"object","type":"Team","relationName":"InitiativeToTeam"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"InitiativeToOrganization"},{"name":"title","kind":"scalar","type":"String"},{"name":"summary","kind":"scalar","type":"String"},{"name":"outcome","kind":"scalar","type":"String"},{"name":"startDate","kind":"scalar","type":"DateTime"},{"name":"targetDate","kind":"scalar","type":"DateTime"},{"name":"status","kind":"scalar","type":"String"},{"name":"rag","kind":"scalar","type":"String"},{"name":"confidence","kind":"scalar","type":"Int"},{"name":"objectives","kind":"object","type":"Objective","relationName":"InitiativeToObjective"},{"name":"owners","kind":"object","type":"InitiativeOwner","relationName":"InitiativeToInitiativeOwner"},{"name":"checkIns","kind":"object","type":"CheckIn","relationName":"CheckInToInitiative"},{"name":"metrics","kind":"object","type":"Metric","relationName":"InitiativeToMetric"},{"name":"tasks","kind":"object","type":"Task","relationName":"InitiativeToTask"},{"name":"meetings","kind":"object","type":"Meeting","relationName":"InitiativeToMeeting"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"InitiativeOwner":{"fields":[{"name":"initiativeId","kind":"scalar","type":"String"},{"name":"personId","kind":"scalar","type":"String"},{"name":"role","kind":"scalar","type":"String"},{"name":"initiative","kind":"object","type":"Initiative","relationName":"InitiativeToInitiativeOwner"},{"name":"person","kind":"object","type":"Person","relationName":"InitiativeOwnerToPerson"}],"dbName":null},"Objective":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"initiativeId","kind":"scalar","type":"String"},{"name":"initiative","kind":"object","type":"Initiative","relationName":"InitiativeToObjective"},{"name":"title","kind":"scalar","type":"String"},{"name":"keyResult","kind":"scalar","type":"String"},{"name":"sortIndex","kind":"scalar","type":"Int"},{"name":"tasks","kind":"object","type":"Task","relationName":"ObjectiveToTask"}],"dbName":null},"Task":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"objectiveId","kind":"scalar","type":"String"},{"name":"objective","kind":"object","type":"Objective","relationName":"ObjectiveToTask"},{"name":"initiativeId","kind":"scalar","type":"String"},{"name":"initiative","kind":"object","type":"Initiative","relationName":"InitiativeToTask"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"assigneeId","kind":"scalar","type":"String"},{"name":"assignee","kind":"object","type":"Person","relationName":"PersonToTask"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"TaskToUser"},{"name":"status","kind":"scalar","type":"String"},{"name":"priority","kind":"scalar","type":"Int"},{"name":"estimate","kind":"scalar","type":"Int"},{"name":"dueDate","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"completedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"CheckIn":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"initiativeId","kind":"scalar","type":"String"},{"name":"initiative","kind":"object","type":"Initiative","relationName":"CheckInToInitiative"},{"name":"weekOf","kind":"scalar","type":"DateTime"},{"name":"rag","kind":"scalar","type":"String"},{"name":"confidence","kind":"scalar","type":"Int"},{"name":"summary","kind":"scalar","type":"String"},{"name":"blockers","kind":"scalar","type":"String"},{"name":"nextSteps","kind":"scalar","type":"String"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"Person","relationName":"CheckInToPerson"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"OneOnOne":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"managerId","kind":"scalar","type":"String"},{"name":"reportId","kind":"scalar","type":"String"},{"name":"scheduledAt","kind":"scalar","type":"DateTime"},{"name":"notes","kind":"scalar","type":"String"},{"name":"manager","kind":"object","type":"Person","relationName":"OOOManager"},{"name":"report","kind":"object","type":"Person","relationName":"OOOReport"}],"dbName":null},"IDP":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"personId","kind":"scalar","type":"String"},{"name":"person","kind":"object","type":"Person","relationName":"IDPToPerson"},{"name":"period","kind":"scalar","type":"String"},{"name":"summary","kind":"scalar","type":"String"},{"name":"goals","kind":"object","type":"IDPGoal","relationName":"IDPToIDPGoal"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"IDPGoal":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"idpId","kind":"scalar","type":"String"},{"name":"idp","kind":"object","type":"IDP","relationName":"IDPToIDPGoal"},{"name":"title","kind":"scalar","type":"String"},{"name":"metric","kind":"scalar","type":"String"},{"name":"target","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"dueDate","kind":"scalar","type":"DateTime"}],"dbName":null},"Feedback":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"aboutId","kind":"scalar","type":"String"},{"name":"about","kind":"object","type":"Person","relationName":"About"},{"name":"fromId","kind":"scalar","type":"String"},{"name":"from","kind":"object","type":"Person","relationName":"From"},{"name":"kind","kind":"scalar","type":"String"},{"name":"isPrivate","kind":"scalar","type":"Boolean"},{"name":"body","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Metric":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"initiativeId","kind":"scalar","type":"String"},{"name":"initiative","kind":"object","type":"Initiative","relationName":"InitiativeToMetric"},{"name":"name","kind":"scalar","type":"String"},{"name":"unit","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"Float"},{"name":"capturedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Tag":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"color","kind":"scalar","type":"String"},{"name":"maps","kind":"object","type":"TagMap","relationName":"TagToTagMap"}],"dbName":null},"TagMap":{"fields":[{"name":"tagId","kind":"scalar","type":"String"},{"name":"tag","kind":"object","type":"Tag","relationName":"TagToTagMap"},{"name":"entity","kind":"scalar","type":"String"},{"name":"entityId","kind":"scalar","type":"String"}],"dbName":null},"OrganizationInvitation":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"OrganizationToOrganizationInvitation"},{"name":"invitedById","kind":"scalar","type":"String"},{"name":"invitedBy","kind":"object","type":"User","relationName":"OrganizationInvitationToUser"},{"name":"status","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"acceptedAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Event":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"actorId","kind":"scalar","type":"String"},{"name":"actor","kind":"object","type":"Person","relationName":"EventToPerson"},{"name":"entity","kind":"scalar","type":"String"},{"name":"entityId","kind":"scalar","type":"String"},{"name":"action","kind":"scalar","type":"String"},{"name":"metadata","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"UserJiraCredentials":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserJiraCredentials"},{"name":"jiraUsername","kind":"scalar","type":"String"},{"name":"encryptedApiKey","kind":"scalar","type":"String"},{"name":"jiraBaseUrl","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"PersonJiraAccount":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"personId","kind":"scalar","type":"String"},{"name":"person","kind":"object","type":"Person","relationName":"PersonToPersonJiraAccount"},{"name":"jiraAccountId","kind":"scalar","type":"String"},{"name":"jiraEmail","kind":"scalar","type":"String"},{"name":"jiraDisplayName","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"UserGithubCredentials":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"UserToUserGithubCredentials"},{"name":"githubUsername","kind":"scalar","type":"String"},{"name":"encryptedPat","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"PersonGithubAccount":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"personId","kind":"scalar","type":"String"},{"name":"person","kind":"object","type":"Person","relationName":"PersonToPersonGithubAccount"},{"name":"githubUsername","kind":"scalar","type":"String"},{"name":"githubDisplayName","kind":"scalar","type":"String"},{"name":"githubEmail","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"FeedbackCampaign":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"FeedbackCampaignToUser"},{"name":"targetPersonId","kind":"scalar","type":"String"},{"name":"targetPerson","kind":"object","type":"Person","relationName":"CampaignTarget"},{"name":"templateId","kind":"scalar","type":"String"},{"name":"template","kind":"object","type":"FeedbackTemplate","relationName":"FeedbackCampaignToFeedbackTemplate"},{"name":"startDate","kind":"scalar","type":"DateTime"},{"name":"endDate","kind":"scalar","type":"DateTime"},{"name":"inviteEmails","kind":"scalar","type":"String"},{"name":"inviteLink","kind":"scalar","type":"String"},{"name":"status","kind":"scalar","type":"String"},{"name":"responses","kind":"object","type":"FeedbackResponse","relationName":"FeedbackCampaignToFeedbackResponse"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"FeedbackResponse":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"campaignId","kind":"scalar","type":"String"},{"name":"campaign","kind":"object","type":"FeedbackCampaign","relationName":"FeedbackCampaignToFeedbackResponse"},{"name":"responderEmail","kind":"scalar","type":"String"},{"name":"responses","kind":"scalar","type":"Json"},{"name":"submittedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"FeedbackTemplate":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"isDefault","kind":"scalar","type":"Boolean"},{"name":"questions","kind":"object","type":"FeedbackQuestion","relationName":"FeedbackQuestionToFeedbackTemplate"},{"name":"campaigns","kind":"object","type":"FeedbackCampaign","relationName":"FeedbackCampaignToFeedbackTemplate"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"FeedbackQuestion":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"templateId","kind":"scalar","type":"String"},{"name":"template","kind":"object","type":"FeedbackTemplate","relationName":"FeedbackQuestionToFeedbackTemplate"},{"name":"question","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"required","kind":"scalar","type":"Boolean"},{"name":"options","kind":"scalar","type":"Json"},{"name":"sortOrder","kind":"scalar","type":"Int"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Meeting":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"scheduledAt","kind":"scalar","type":"DateTime"},{"name":"duration","kind":"scalar","type":"Int"},{"name":"location","kind":"scalar","type":"String"},{"name":"notes","kind":"scalar","type":"String"},{"name":"isRecurring","kind":"scalar","type":"Boolean"},{"name":"recurrenceType","kind":"scalar","type":"String"},{"name":"isPrivate","kind":"scalar","type":"Boolean"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"MeetingToOrganization"},{"name":"teamId","kind":"scalar","type":"String"},{"name":"team","kind":"object","type":"Team","relationName":"MeetingToTeam"},{"name":"initiativeId","kind":"scalar","type":"String"},{"name":"initiative","kind":"object","type":"Initiative","relationName":"InitiativeToMeeting"},{"name":"ownerId","kind":"scalar","type":"String"},{"name":"owner","kind":"object","type":"Person","relationName":"MeetingOwner"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"MeetingToUser"},{"name":"participants","kind":"object","type":"MeetingParticipant","relationName":"MeetingToMeetingParticipant"},{"name":"instances","kind":"object","type":"MeetingInstance","relationName":"MeetingToMeetingInstance"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"MeetingParticipant":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"meetingId","kind":"scalar","type":"String"},{"name":"meeting","kind":"object","type":"Meeting","relationName":"MeetingToMeetingParticipant"},{"name":"personId","kind":"scalar","type":"String"},{"name":"person","kind":"object","type":"Person","relationName":"MeetingParticipant"},{"name":"status","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"MeetingInstance":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"meetingId","kind":"scalar","type":"String"},{"name":"meeting","kind":"object","type":"Meeting","relationName":"MeetingToMeetingInstance"},{"name":"scheduledAt","kind":"scalar","type":"DateTime"},{"name":"notes","kind":"scalar","type":"String"},{"name":"isPrivate","kind":"scalar","type":"Boolean"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"MeetingInstanceToOrganization"},{"name":"participants","kind":"object","type":"MeetingInstanceParticipant","relationName":"MeetingInstanceToMeetingInstanceParticipant"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"MeetingInstanceParticipant":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"meetingInstanceId","kind":"scalar","type":"String"},{"name":"meetingInstance","kind":"object","type":"MeetingInstance","relationName":"MeetingInstanceToMeetingInstanceParticipant"},{"name":"personId","kind":"scalar","type":"String"},{"name":"person","kind":"object","type":"Person","relationName":"MeetingInstanceParticipant"},{"name":"status","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"PersonSynopsis":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"personId","kind":"scalar","type":"String"},{"name":"person","kind":"object","type":"Person","relationName":"PersonToPersonSynopsis"},{"name":"fromDate","kind":"scalar","type":"DateTime"},{"name":"toDate","kind":"scalar","type":"DateTime"},{"name":"includeFeedback","kind":"scalar","type":"Boolean"},{"name":"content","kind":"scalar","type":"String"},{"name":"sources","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"EntityLink":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"url","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"entityType","kind":"scalar","type":"String"},{"name":"entityId","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"EntityLinkToOrganization"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"EntityLinkToUser"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"JobRole":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"JobRoleToOrganization"},{"name":"levelId","kind":"scalar","type":"String"},{"name":"level","kind":"object","type":"JobLevel","relationName":"JobRoleLevel"},{"name":"domainId","kind":"scalar","type":"String"},{"name":"domain","kind":"object","type":"JobDomain","relationName":"JobRoleDomain"},{"name":"people","kind":"object","type":"Person","relationName":"JobRoleToPerson"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"JobLevel":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"order","kind":"scalar","type":"Int"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"JobLevelToOrganization"},{"name":"jobRoles","kind":"object","type":"JobRole","relationName":"JobRoleLevel"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"JobDomain":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"JobDomainToOrganization"},{"name":"jobRoles","kind":"object","type":"JobRole","relationName":"JobRoleDomain"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"PasswordResetToken":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"token","kind":"scalar","type":"String"},{"name":"expires","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Notification":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"title","kind":"scalar","type":"String"},{"name":"message","kind":"scalar","type":"String"},{"name":"type","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"NotificationToOrganization"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"NotificationToUser"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"responses","kind":"object","type":"NotificationResponse","relationName":"NotificationToNotificationResponse"}],"dbName":null},"NotificationResponse":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"notificationId","kind":"scalar","type":"String"},{"name":"notification","kind":"object","type":"Notification","relationName":"NotificationToNotificationResponse"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"NotificationResponseToUser"},{"name":"status","kind":"scalar","type":"String"},{"name":"readAt","kind":"scalar","type":"DateTime"},{"name":"dismissedAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"CronJobExecution":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"jobId","kind":"scalar","type":"String"},{"name":"jobName","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"CronJobExecutionToOrganization"},{"name":"status","kind":"scalar","type":"String"},{"name":"startedAt","kind":"scalar","type":"DateTime"},{"name":"completedAt","kind":"scalar","type":"DateTime"},{"name":"notificationsCreated","kind":"scalar","type":"Int"},{"name":"error","kind":"scalar","type":"String"},{"name":"metadata","kind":"scalar","type":"Json"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Report":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"codeId","kind":"scalar","type":"String"},{"name":"name","kind":"scalar","type":"String"},{"name":"description","kind":"scalar","type":"String"},{"name":"ownerId","kind":"scalar","type":"String"},{"name":"owner","kind":"object","type":"User","relationName":"ReportOwner"},{"name":"inputSchema","kind":"scalar","type":"Json"},{"name":"enabled","kind":"scalar","type":"Boolean"},{"name":"renderers","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"instances","kind":"object","type":"ReportInstance","relationName":"ReportToReportInstance"}],"dbName":null},"ReportInstance":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"reportId","kind":"scalar","type":"String"},{"name":"report","kind":"object","type":"Report","relationName":"ReportToReportInstance"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"ReportInstanceToUser"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"OrganizationToReportInstance"},{"name":"renderer","kind":"scalar","type":"String"},{"name":"input","kind":"scalar","type":"Json"},{"name":"output","kind":"scalar","type":"Json"},{"name":"status","kind":"scalar","type":"String"},{"name":"errorMessage","kind":"scalar","type":"String"},{"name":"startedAt","kind":"scalar","type":"DateTime"},{"name":"completedAt","kind":"scalar","type":"DateTime"}],"dbName":null},"Note":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"entityType","kind":"scalar","type":"String"},{"name":"entityId","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"NoteToOrganization"},{"name":"content","kind":"scalar","type":"String"},{"name":"createdById","kind":"scalar","type":"String"},{"name":"createdBy","kind":"object","type":"User","relationName":"NoteToUser"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"attachments","kind":"object","type":"FileAttachment","relationName":"FileAttachmentToNote"}],"dbName":null},"FileAttachment":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"noteId","kind":"scalar","type":"String"},{"name":"note","kind":"object","type":"Note","relationName":"FileAttachmentToNote"},{"name":"entityType","kind":"scalar","type":"String"},{"name":"entityId","kind":"scalar","type":"String"},{"name":"organizationId","kind":"scalar","type":"String"},{"name":"organization","kind":"object","type":"Organization","relationName":"FileAttachmentToOrganization"},{"name":"fileName","kind":"scalar","type":"String"},{"name":"originalName","kind":"scalar","type":"String"},{"name":"fileSize","kind":"scalar","type":"Int"},{"name":"mimeType","kind":"scalar","type":"String"},{"name":"r2Key","kind":"scalar","type":"String"},{"name":"r2Url","kind":"scalar","type":"String"},{"name":"uploadedById","kind":"scalar","type":"String"},{"name":"uploadedBy","kind":"object","type":"User","relationName":"FileAttachmentToUser"},{"name":"createdAt","kind":"scalar","type":"DateTime"}],"dbName":null}},"enums":{},"types":{}}'
)
config.engineWasm = undefined

async function decodeBase64AsWasm(
  wasmBase64: string
): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () =>
    await import('@prisma/client/runtime/query_compiler_bg.postgresql.mjs'),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import(
      '@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs'
    )
    return await decodeBase64AsWasm(wasm)
  },
}

export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions
    ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition>
      ? Prisma.GetEvents<ClientOptions['log']>
      : never
    : never

export interface PrismaClientConstructor {
  /**
   * ## Prisma Client
   *
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends {
      omit: infer U
    }
      ? U
      : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends
      runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  >(
    options?: Prisma.Subset<Options, Prisma.PrismaClientOptions>
  ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Organizations
 * const organizations = await prisma.organization.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends
    Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(
    eventType: V,
    callback: (
      event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent
    ) => void
  ): PrismaClient

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<number>

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<number>

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(
    query: TemplateStringsArray | Prisma.Sql,
    ...values: any[]
  ): Prisma.PrismaPromise<T>

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(
    query: string,
    ...values: any[]
  ): Prisma.PrismaPromise<T>

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: Prisma.TransactionIsolationLevel }
  ): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(
    fn: (
      prisma: Omit<PrismaClient, runtime.ITXClientDenyList>
    ) => runtime.Types.Utils.JsPromise<R>,
    options?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  ): runtime.Types.Utils.JsPromise<R>

  $extends: runtime.Types.Extensions.ExtendsHook<
    'extends',
    Prisma.TypeMapCb<OmitOpts>,
    ExtArgs,
    runtime.Types.Utils.Call<
      Prisma.TypeMapCb<OmitOpts>,
      {
        extArgs: ExtArgs
      }
    >
  >

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   */
  get user(): Prisma.UserDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Teams
   * const teams = await prisma.team.findMany()
   * ```
   */
  get team(): Prisma.TeamDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more People
   * const people = await prisma.person.findMany()
   * ```
   */
  get person(): Prisma.PersonDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.initiative`: Exposes CRUD operations for the **Initiative** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Initiatives
   * const initiatives = await prisma.initiative.findMany()
   * ```
   */
  get initiative(): Prisma.InitiativeDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.initiativeOwner`: Exposes CRUD operations for the **InitiativeOwner** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more InitiativeOwners
   * const initiativeOwners = await prisma.initiativeOwner.findMany()
   * ```
   */
  get initiativeOwner(): Prisma.InitiativeOwnerDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.objective`: Exposes CRUD operations for the **Objective** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Objectives
   * const objectives = await prisma.objective.findMany()
   * ```
   */
  get objective(): Prisma.ObjectiveDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Tasks
   * const tasks = await prisma.task.findMany()
   * ```
   */
  get task(): Prisma.TaskDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.checkIn`: Exposes CRUD operations for the **CheckIn** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CheckIns
   * const checkIns = await prisma.checkIn.findMany()
   * ```
   */
  get checkIn(): Prisma.CheckInDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.oneOnOne`: Exposes CRUD operations for the **OneOnOne** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OneOnOnes
   * const oneOnOnes = await prisma.oneOnOne.findMany()
   * ```
   */
  get oneOnOne(): Prisma.OneOnOneDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.iDP`: Exposes CRUD operations for the **IDP** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more IDPS
   * const iDPS = await prisma.iDP.findMany()
   * ```
   */
  get iDP(): Prisma.IDPDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.iDPGoal`: Exposes CRUD operations for the **IDPGoal** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more IDPGoals
   * const iDPGoals = await prisma.iDPGoal.findMany()
   * ```
   */
  get iDPGoal(): Prisma.IDPGoalDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Feedbacks
   * const feedbacks = await prisma.feedback.findMany()
   * ```
   */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.metric`: Exposes CRUD operations for the **Metric** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Metrics
   * const metrics = await prisma.metric.findMany()
   * ```
   */
  get metric(): Prisma.MetricDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Tags
   * const tags = await prisma.tag.findMany()
   * ```
   */
  get tag(): Prisma.TagDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.tagMap`: Exposes CRUD operations for the **TagMap** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more TagMaps
   * const tagMaps = await prisma.tagMap.findMany()
   * ```
   */
  get tagMap(): Prisma.TagMapDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.organizationInvitation`: Exposes CRUD operations for the **OrganizationInvitation** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more OrganizationInvitations
   * const organizationInvitations = await prisma.organizationInvitation.findMany()
   * ```
   */
  get organizationInvitation(): Prisma.OrganizationInvitationDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Events
   * const events = await prisma.event.findMany()
   * ```
   */
  get event(): Prisma.EventDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.userJiraCredentials`: Exposes CRUD operations for the **UserJiraCredentials** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserJiraCredentials
   * const userJiraCredentials = await prisma.userJiraCredentials.findMany()
   * ```
   */
  get userJiraCredentials(): Prisma.UserJiraCredentialsDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.personJiraAccount`: Exposes CRUD operations for the **PersonJiraAccount** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PersonJiraAccounts
   * const personJiraAccounts = await prisma.personJiraAccount.findMany()
   * ```
   */
  get personJiraAccount(): Prisma.PersonJiraAccountDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.userGithubCredentials`: Exposes CRUD operations for the **UserGithubCredentials** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.findMany()
   * ```
   */
  get userGithubCredentials(): Prisma.UserGithubCredentialsDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.personGithubAccount`: Exposes CRUD operations for the **PersonGithubAccount** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PersonGithubAccounts
   * const personGithubAccounts = await prisma.personGithubAccount.findMany()
   * ```
   */
  get personGithubAccount(): Prisma.PersonGithubAccountDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.feedbackCampaign`: Exposes CRUD operations for the **FeedbackCampaign** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more FeedbackCampaigns
   * const feedbackCampaigns = await prisma.feedbackCampaign.findMany()
   * ```
   */
  get feedbackCampaign(): Prisma.FeedbackCampaignDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.feedbackResponse`: Exposes CRUD operations for the **FeedbackResponse** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more FeedbackResponses
   * const feedbackResponses = await prisma.feedbackResponse.findMany()
   * ```
   */
  get feedbackResponse(): Prisma.FeedbackResponseDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.feedbackTemplate`: Exposes CRUD operations for the **FeedbackTemplate** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more FeedbackTemplates
   * const feedbackTemplates = await prisma.feedbackTemplate.findMany()
   * ```
   */
  get feedbackTemplate(): Prisma.FeedbackTemplateDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.feedbackQuestion`: Exposes CRUD operations for the **FeedbackQuestion** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more FeedbackQuestions
   * const feedbackQuestions = await prisma.feedbackQuestion.findMany()
   * ```
   */
  get feedbackQuestion(): Prisma.FeedbackQuestionDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.meeting`: Exposes CRUD operations for the **Meeting** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Meetings
   * const meetings = await prisma.meeting.findMany()
   * ```
   */
  get meeting(): Prisma.MeetingDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.meetingParticipant`: Exposes CRUD operations for the **MeetingParticipant** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MeetingParticipants
   * const meetingParticipants = await prisma.meetingParticipant.findMany()
   * ```
   */
  get meetingParticipant(): Prisma.MeetingParticipantDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.meetingInstance`: Exposes CRUD operations for the **MeetingInstance** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MeetingInstances
   * const meetingInstances = await prisma.meetingInstance.findMany()
   * ```
   */
  get meetingInstance(): Prisma.MeetingInstanceDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.meetingInstanceParticipant`: Exposes CRUD operations for the **MeetingInstanceParticipant** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more MeetingInstanceParticipants
   * const meetingInstanceParticipants = await prisma.meetingInstanceParticipant.findMany()
   * ```
   */
  get meetingInstanceParticipant(): Prisma.MeetingInstanceParticipantDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.personSynopsis`: Exposes CRUD operations for the **PersonSynopsis** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PersonSynopses
   * const personSynopses = await prisma.personSynopsis.findMany()
   * ```
   */
  get personSynopsis(): Prisma.PersonSynopsisDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.entityLink`: Exposes CRUD operations for the **EntityLink** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more EntityLinks
   * const entityLinks = await prisma.entityLink.findMany()
   * ```
   */
  get entityLink(): Prisma.EntityLinkDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.jobRole`: Exposes CRUD operations for the **JobRole** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more JobRoles
   * const jobRoles = await prisma.jobRole.findMany()
   * ```
   */
  get jobRole(): Prisma.JobRoleDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.jobLevel`: Exposes CRUD operations for the **JobLevel** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more JobLevels
   * const jobLevels = await prisma.jobLevel.findMany()
   * ```
   */
  get jobLevel(): Prisma.JobLevelDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.jobDomain`: Exposes CRUD operations for the **JobDomain** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more JobDomains
   * const jobDomains = await prisma.jobDomain.findMany()
   * ```
   */
  get jobDomain(): Prisma.JobDomainDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.passwordResetToken`: Exposes CRUD operations for the **PasswordResetToken** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more PasswordResetTokens
   * const passwordResetTokens = await prisma.passwordResetToken.findMany()
   * ```
   */
  get passwordResetToken(): Prisma.PasswordResetTokenDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Notifications
   * const notifications = await prisma.notification.findMany()
   * ```
   */
  get notification(): Prisma.NotificationDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.notificationResponse`: Exposes CRUD operations for the **NotificationResponse** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more NotificationResponses
   * const notificationResponses = await prisma.notificationResponse.findMany()
   * ```
   */
  get notificationResponse(): Prisma.NotificationResponseDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.cronJobExecution`: Exposes CRUD operations for the **CronJobExecution** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more CronJobExecutions
   * const cronJobExecutions = await prisma.cronJobExecution.findMany()
   * ```
   */
  get cronJobExecution(): Prisma.CronJobExecutionDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Reports
   * const reports = await prisma.report.findMany()
   * ```
   */
  get report(): Prisma.ReportDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.reportInstance`: Exposes CRUD operations for the **ReportInstance** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more ReportInstances
   * const reportInstances = await prisma.reportInstance.findMany()
   * ```
   */
  get reportInstance(): Prisma.ReportInstanceDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more Notes
   * const notes = await prisma.note.findMany()
   * ```
   */
  get note(): Prisma.NoteDelegate<ExtArgs, { omit: OmitOpts }>

  /**
   * `prisma.fileAttachment`: Exposes CRUD operations for the **FileAttachment** model.
   * Example usage:
   * ```ts
   * // Fetch zero or more FileAttachments
   * const fileAttachments = await prisma.fileAttachment.findMany()
   * ```
   */
  get fileAttachment(): Prisma.FileAttachmentDelegate<
    ExtArgs,
    { omit: OmitOpts }
  >
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
