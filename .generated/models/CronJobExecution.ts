/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `CronJobExecution` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model CronJobExecution
 *
 */
export type CronJobExecutionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$CronJobExecutionPayload>

export type AggregateCronJobExecution = {
  _count: CronJobExecutionCountAggregateOutputType | null
  _avg: CronJobExecutionAvgAggregateOutputType | null
  _sum: CronJobExecutionSumAggregateOutputType | null
  _min: CronJobExecutionMinAggregateOutputType | null
  _max: CronJobExecutionMaxAggregateOutputType | null
}

export type CronJobExecutionAvgAggregateOutputType = {
  notificationsCreated: number | null
}

export type CronJobExecutionSumAggregateOutputType = {
  notificationsCreated: number | null
}

export type CronJobExecutionMinAggregateOutputType = {
  id: string | null
  jobId: string | null
  jobName: string | null
  organizationId: string | null
  status: string | null
  startedAt: Date | null
  completedAt: Date | null
  notificationsCreated: number | null
  error: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CronJobExecutionMaxAggregateOutputType = {
  id: string | null
  jobId: string | null
  jobName: string | null
  organizationId: string | null
  status: string | null
  startedAt: Date | null
  completedAt: Date | null
  notificationsCreated: number | null
  error: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CronJobExecutionCountAggregateOutputType = {
  id: number
  jobId: number
  jobName: number
  organizationId: number
  status: number
  startedAt: number
  completedAt: number
  notificationsCreated: number
  error: number
  metadata: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type CronJobExecutionAvgAggregateInputType = {
  notificationsCreated?: true
}

export type CronJobExecutionSumAggregateInputType = {
  notificationsCreated?: true
}

export type CronJobExecutionMinAggregateInputType = {
  id?: true
  jobId?: true
  jobName?: true
  organizationId?: true
  status?: true
  startedAt?: true
  completedAt?: true
  notificationsCreated?: true
  error?: true
  createdAt?: true
  updatedAt?: true
}

export type CronJobExecutionMaxAggregateInputType = {
  id?: true
  jobId?: true
  jobName?: true
  organizationId?: true
  status?: true
  startedAt?: true
  completedAt?: true
  notificationsCreated?: true
  error?: true
  createdAt?: true
  updatedAt?: true
}

export type CronJobExecutionCountAggregateInputType = {
  id?: true
  jobId?: true
  jobName?: true
  organizationId?: true
  status?: true
  startedAt?: true
  completedAt?: true
  notificationsCreated?: true
  error?: true
  metadata?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CronJobExecutionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CronJobExecution to aggregate.
   */
  where?: Prisma.CronJobExecutionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CronJobExecutions to fetch.
   */
  orderBy?:
    | Prisma.CronJobExecutionOrderByWithRelationInput
    | Prisma.CronJobExecutionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.CronJobExecutionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CronJobExecutions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CronJobExecutions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned CronJobExecutions
   **/
  _count?: true | CronJobExecutionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: CronJobExecutionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: CronJobExecutionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: CronJobExecutionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: CronJobExecutionMaxAggregateInputType
}

export type GetCronJobExecutionAggregateType<
  T extends CronJobExecutionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateCronJobExecution]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCronJobExecution[P]>
    : Prisma.GetScalarType<T[P], AggregateCronJobExecution[P]>
}

export type CronJobExecutionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CronJobExecutionWhereInput
  orderBy?:
    | Prisma.CronJobExecutionOrderByWithAggregationInput
    | Prisma.CronJobExecutionOrderByWithAggregationInput[]
  by:
    | Prisma.CronJobExecutionScalarFieldEnum[]
    | Prisma.CronJobExecutionScalarFieldEnum
  having?: Prisma.CronJobExecutionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CronJobExecutionCountAggregateInputType | true
  _avg?: CronJobExecutionAvgAggregateInputType
  _sum?: CronJobExecutionSumAggregateInputType
  _min?: CronJobExecutionMinAggregateInputType
  _max?: CronJobExecutionMaxAggregateInputType
}

export type CronJobExecutionGroupByOutputType = {
  id: string
  jobId: string
  jobName: string
  organizationId: string | null
  status: string
  startedAt: Date
  completedAt: Date | null
  notificationsCreated: number
  error: string | null
  metadata: runtime.JsonValue | null
  createdAt: Date
  updatedAt: Date
  _count: CronJobExecutionCountAggregateOutputType | null
  _avg: CronJobExecutionAvgAggregateOutputType | null
  _sum: CronJobExecutionSumAggregateOutputType | null
  _min: CronJobExecutionMinAggregateOutputType | null
  _max: CronJobExecutionMaxAggregateOutputType | null
}

type GetCronJobExecutionGroupByPayload<T extends CronJobExecutionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<CronJobExecutionGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof CronJobExecutionGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CronJobExecutionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CronJobExecutionGroupByOutputType[P]>
      }
    >
  >

export type CronJobExecutionWhereInput = {
  AND?: Prisma.CronJobExecutionWhereInput | Prisma.CronJobExecutionWhereInput[]
  OR?: Prisma.CronJobExecutionWhereInput[]
  NOT?: Prisma.CronJobExecutionWhereInput | Prisma.CronJobExecutionWhereInput[]
  id?: Prisma.StringFilter<'CronJobExecution'> | string
  jobId?: Prisma.StringFilter<'CronJobExecution'> | string
  jobName?: Prisma.StringFilter<'CronJobExecution'> | string
  organizationId?:
    | Prisma.StringNullableFilter<'CronJobExecution'>
    | string
    | null
  status?: Prisma.StringFilter<'CronJobExecution'> | string
  startedAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
  completedAt?:
    | Prisma.DateTimeNullableFilter<'CronJobExecution'>
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFilter<'CronJobExecution'> | number
  error?: Prisma.StringNullableFilter<'CronJobExecution'> | string | null
  metadata?: Prisma.JsonNullableFilter<'CronJobExecution'>
  createdAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
  organization?: Prisma.XOR<
    Prisma.OrganizationNullableScalarRelationFilter,
    Prisma.OrganizationWhereInput
  > | null
}

export type CronJobExecutionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  jobName?: Prisma.SortOrder
  organizationId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  notificationsCreated?: Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
}

export type CronJobExecutionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?:
      | Prisma.CronJobExecutionWhereInput
      | Prisma.CronJobExecutionWhereInput[]
    OR?: Prisma.CronJobExecutionWhereInput[]
    NOT?:
      | Prisma.CronJobExecutionWhereInput
      | Prisma.CronJobExecutionWhereInput[]
    jobId?: Prisma.StringFilter<'CronJobExecution'> | string
    jobName?: Prisma.StringFilter<'CronJobExecution'> | string
    organizationId?:
      | Prisma.StringNullableFilter<'CronJobExecution'>
      | string
      | null
    status?: Prisma.StringFilter<'CronJobExecution'> | string
    startedAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
    completedAt?:
      | Prisma.DateTimeNullableFilter<'CronJobExecution'>
      | Date
      | string
      | null
    notificationsCreated?: Prisma.IntFilter<'CronJobExecution'> | number
    error?: Prisma.StringNullableFilter<'CronJobExecution'> | string | null
    metadata?: Prisma.JsonNullableFilter<'CronJobExecution'>
    createdAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
    organization?: Prisma.XOR<
      Prisma.OrganizationNullableScalarRelationFilter,
      Prisma.OrganizationWhereInput
    > | null
  },
  'id'
>

export type CronJobExecutionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  jobName?: Prisma.SortOrder
  organizationId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  notificationsCreated?: Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CronJobExecutionCountOrderByAggregateInput
  _avg?: Prisma.CronJobExecutionAvgOrderByAggregateInput
  _max?: Prisma.CronJobExecutionMaxOrderByAggregateInput
  _min?: Prisma.CronJobExecutionMinOrderByAggregateInput
  _sum?: Prisma.CronJobExecutionSumOrderByAggregateInput
}

export type CronJobExecutionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.CronJobExecutionScalarWhereWithAggregatesInput
    | Prisma.CronJobExecutionScalarWhereWithAggregatesInput[]
  OR?: Prisma.CronJobExecutionScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.CronJobExecutionScalarWhereWithAggregatesInput
    | Prisma.CronJobExecutionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'CronJobExecution'> | string
  jobId?: Prisma.StringWithAggregatesFilter<'CronJobExecution'> | string
  jobName?: Prisma.StringWithAggregatesFilter<'CronJobExecution'> | string
  organizationId?:
    | Prisma.StringNullableWithAggregatesFilter<'CronJobExecution'>
    | string
    | null
  status?: Prisma.StringWithAggregatesFilter<'CronJobExecution'> | string
  startedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CronJobExecution'>
    | Date
    | string
  completedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'CronJobExecution'>
    | Date
    | string
    | null
  notificationsCreated?:
    | Prisma.IntWithAggregatesFilter<'CronJobExecution'>
    | number
  error?:
    | Prisma.StringNullableWithAggregatesFilter<'CronJobExecution'>
    | string
    | null
  metadata?: Prisma.JsonNullableWithAggregatesFilter<'CronJobExecution'>
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CronJobExecution'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'CronJobExecution'>
    | Date
    | string
}

export type CronJobExecutionCreateInput = {
  id?: string
  jobId: string
  jobName: string
  status?: string
  startedAt?: Date | string
  completedAt?: Date | string | null
  notificationsCreated?: number
  error?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  organization?: Prisma.OrganizationCreateNestedOneWithoutCronJobExecutionsInput
}

export type CronJobExecutionUncheckedCreateInput = {
  id?: string
  jobId: string
  jobName: string
  organizationId?: string | null
  status?: string
  startedAt?: Date | string
  completedAt?: Date | string | null
  notificationsCreated?: number
  error?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CronJobExecutionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  jobName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFieldUpdateOperationsInput | number
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneWithoutCronJobExecutionsNestedInput
}

export type CronJobExecutionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  jobName?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFieldUpdateOperationsInput | number
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CronJobExecutionCreateManyInput = {
  id?: string
  jobId: string
  jobName: string
  organizationId?: string | null
  status?: string
  startedAt?: Date | string
  completedAt?: Date | string | null
  notificationsCreated?: number
  error?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CronJobExecutionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  jobName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFieldUpdateOperationsInput | number
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CronJobExecutionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  jobName?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFieldUpdateOperationsInput | number
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CronJobExecutionListRelationFilter = {
  every?: Prisma.CronJobExecutionWhereInput
  some?: Prisma.CronJobExecutionWhereInput
  none?: Prisma.CronJobExecutionWhereInput
}

export type CronJobExecutionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CronJobExecutionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  jobName?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
  notificationsCreated?: Prisma.SortOrder
  error?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CronJobExecutionAvgOrderByAggregateInput = {
  notificationsCreated?: Prisma.SortOrder
}

export type CronJobExecutionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  jobName?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
  notificationsCreated?: Prisma.SortOrder
  error?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CronJobExecutionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  jobId?: Prisma.SortOrder
  jobName?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
  notificationsCreated?: Prisma.SortOrder
  error?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CronJobExecutionSumOrderByAggregateInput = {
  notificationsCreated?: Prisma.SortOrder
}

export type CronJobExecutionCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.CronJobExecutionCreateWithoutOrganizationInput,
        Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.CronJobExecutionCreateWithoutOrganizationInput[]
    | Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.CronJobExecutionCreateOrConnectWithoutOrganizationInput
    | Prisma.CronJobExecutionCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.CronJobExecutionCreateManyOrganizationInputEnvelope
  connect?:
    | Prisma.CronJobExecutionWhereUniqueInput
    | Prisma.CronJobExecutionWhereUniqueInput[]
}

export type CronJobExecutionUncheckedCreateNestedManyWithoutOrganizationInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CronJobExecutionCreateWithoutOrganizationInput,
          Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput
        >
      | Prisma.CronJobExecutionCreateWithoutOrganizationInput[]
      | Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?:
      | Prisma.CronJobExecutionCreateOrConnectWithoutOrganizationInput
      | Prisma.CronJobExecutionCreateOrConnectWithoutOrganizationInput[]
    createMany?: Prisma.CronJobExecutionCreateManyOrganizationInputEnvelope
    connect?:
      | Prisma.CronJobExecutionWhereUniqueInput
      | Prisma.CronJobExecutionWhereUniqueInput[]
  }

export type CronJobExecutionUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.CronJobExecutionCreateWithoutOrganizationInput,
        Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.CronJobExecutionCreateWithoutOrganizationInput[]
    | Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.CronJobExecutionCreateOrConnectWithoutOrganizationInput
    | Prisma.CronJobExecutionCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.CronJobExecutionUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.CronJobExecutionUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.CronJobExecutionCreateManyOrganizationInputEnvelope
  set?:
    | Prisma.CronJobExecutionWhereUniqueInput
    | Prisma.CronJobExecutionWhereUniqueInput[]
  disconnect?:
    | Prisma.CronJobExecutionWhereUniqueInput
    | Prisma.CronJobExecutionWhereUniqueInput[]
  delete?:
    | Prisma.CronJobExecutionWhereUniqueInput
    | Prisma.CronJobExecutionWhereUniqueInput[]
  connect?:
    | Prisma.CronJobExecutionWhereUniqueInput
    | Prisma.CronJobExecutionWhereUniqueInput[]
  update?:
    | Prisma.CronJobExecutionUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.CronJobExecutionUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.CronJobExecutionUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.CronJobExecutionUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.CronJobExecutionScalarWhereInput
    | Prisma.CronJobExecutionScalarWhereInput[]
}

export type CronJobExecutionUncheckedUpdateManyWithoutOrganizationNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.CronJobExecutionCreateWithoutOrganizationInput,
          Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput
        >
      | Prisma.CronJobExecutionCreateWithoutOrganizationInput[]
      | Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?:
      | Prisma.CronJobExecutionCreateOrConnectWithoutOrganizationInput
      | Prisma.CronJobExecutionCreateOrConnectWithoutOrganizationInput[]
    upsert?:
      | Prisma.CronJobExecutionUpsertWithWhereUniqueWithoutOrganizationInput
      | Prisma.CronJobExecutionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: Prisma.CronJobExecutionCreateManyOrganizationInputEnvelope
    set?:
      | Prisma.CronJobExecutionWhereUniqueInput
      | Prisma.CronJobExecutionWhereUniqueInput[]
    disconnect?:
      | Prisma.CronJobExecutionWhereUniqueInput
      | Prisma.CronJobExecutionWhereUniqueInput[]
    delete?:
      | Prisma.CronJobExecutionWhereUniqueInput
      | Prisma.CronJobExecutionWhereUniqueInput[]
    connect?:
      | Prisma.CronJobExecutionWhereUniqueInput
      | Prisma.CronJobExecutionWhereUniqueInput[]
    update?:
      | Prisma.CronJobExecutionUpdateWithWhereUniqueWithoutOrganizationInput
      | Prisma.CronJobExecutionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?:
      | Prisma.CronJobExecutionUpdateManyWithWhereWithoutOrganizationInput
      | Prisma.CronJobExecutionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?:
      | Prisma.CronJobExecutionScalarWhereInput
      | Prisma.CronJobExecutionScalarWhereInput[]
  }

export type CronJobExecutionCreateWithoutOrganizationInput = {
  id?: string
  jobId: string
  jobName: string
  status?: string
  startedAt?: Date | string
  completedAt?: Date | string | null
  notificationsCreated?: number
  error?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CronJobExecutionUncheckedCreateWithoutOrganizationInput = {
  id?: string
  jobId: string
  jobName: string
  status?: string
  startedAt?: Date | string
  completedAt?: Date | string | null
  notificationsCreated?: number
  error?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CronJobExecutionCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.CronJobExecutionWhereUniqueInput
  create: Prisma.XOR<
    Prisma.CronJobExecutionCreateWithoutOrganizationInput,
    Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput
  >
}

export type CronJobExecutionCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.CronJobExecutionCreateManyOrganizationInput
    | Prisma.CronJobExecutionCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type CronJobExecutionUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.CronJobExecutionWhereUniqueInput
  update: Prisma.XOR<
    Prisma.CronJobExecutionUpdateWithoutOrganizationInput,
    Prisma.CronJobExecutionUncheckedUpdateWithoutOrganizationInput
  >
  create: Prisma.XOR<
    Prisma.CronJobExecutionCreateWithoutOrganizationInput,
    Prisma.CronJobExecutionUncheckedCreateWithoutOrganizationInput
  >
}

export type CronJobExecutionUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.CronJobExecutionWhereUniqueInput
  data: Prisma.XOR<
    Prisma.CronJobExecutionUpdateWithoutOrganizationInput,
    Prisma.CronJobExecutionUncheckedUpdateWithoutOrganizationInput
  >
}

export type CronJobExecutionUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.CronJobExecutionScalarWhereInput
  data: Prisma.XOR<
    Prisma.CronJobExecutionUpdateManyMutationInput,
    Prisma.CronJobExecutionUncheckedUpdateManyWithoutOrganizationInput
  >
}

export type CronJobExecutionScalarWhereInput = {
  AND?:
    | Prisma.CronJobExecutionScalarWhereInput
    | Prisma.CronJobExecutionScalarWhereInput[]
  OR?: Prisma.CronJobExecutionScalarWhereInput[]
  NOT?:
    | Prisma.CronJobExecutionScalarWhereInput
    | Prisma.CronJobExecutionScalarWhereInput[]
  id?: Prisma.StringFilter<'CronJobExecution'> | string
  jobId?: Prisma.StringFilter<'CronJobExecution'> | string
  jobName?: Prisma.StringFilter<'CronJobExecution'> | string
  organizationId?:
    | Prisma.StringNullableFilter<'CronJobExecution'>
    | string
    | null
  status?: Prisma.StringFilter<'CronJobExecution'> | string
  startedAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
  completedAt?:
    | Prisma.DateTimeNullableFilter<'CronJobExecution'>
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFilter<'CronJobExecution'> | number
  error?: Prisma.StringNullableFilter<'CronJobExecution'> | string | null
  metadata?: Prisma.JsonNullableFilter<'CronJobExecution'>
  createdAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'CronJobExecution'> | Date | string
}

export type CronJobExecutionCreateManyOrganizationInput = {
  id?: string
  jobId: string
  jobName: string
  status?: string
  startedAt?: Date | string
  completedAt?: Date | string | null
  notificationsCreated?: number
  error?: string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CronJobExecutionUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  jobName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFieldUpdateOperationsInput | number
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CronJobExecutionUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  jobName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFieldUpdateOperationsInput | number
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CronJobExecutionUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  jobId?: Prisma.StringFieldUpdateOperationsInput | string
  jobName?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  notificationsCreated?: Prisma.IntFieldUpdateOperationsInput | number
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CronJobExecutionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    jobId?: boolean
    jobName?: boolean
    organizationId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    notificationsCreated?: boolean
    error?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.CronJobExecution$organizationArgs<ExtArgs>
  },
  ExtArgs['result']['cronJobExecution']
>

export type CronJobExecutionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    jobId?: boolean
    jobName?: boolean
    organizationId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    notificationsCreated?: boolean
    error?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.CronJobExecution$organizationArgs<ExtArgs>
  },
  ExtArgs['result']['cronJobExecution']
>

export type CronJobExecutionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    jobId?: boolean
    jobName?: boolean
    organizationId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    notificationsCreated?: boolean
    error?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.CronJobExecution$organizationArgs<ExtArgs>
  },
  ExtArgs['result']['cronJobExecution']
>

export type CronJobExecutionSelectScalar = {
  id?: boolean
  jobId?: boolean
  jobName?: boolean
  organizationId?: boolean
  status?: boolean
  startedAt?: boolean
  completedAt?: boolean
  notificationsCreated?: boolean
  error?: boolean
  metadata?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CronJobExecutionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'jobId'
  | 'jobName'
  | 'organizationId'
  | 'status'
  | 'startedAt'
  | 'completedAt'
  | 'notificationsCreated'
  | 'error'
  | 'metadata'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['cronJobExecution']
>
export type CronJobExecutionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.CronJobExecution$organizationArgs<ExtArgs>
}
export type CronJobExecutionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.CronJobExecution$organizationArgs<ExtArgs>
}
export type CronJobExecutionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.CronJobExecution$organizationArgs<ExtArgs>
}

export type $CronJobExecutionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'CronJobExecution'
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      jobId: string
      jobName: string
      organizationId: string | null
      status: string
      startedAt: Date
      completedAt: Date | null
      notificationsCreated: number
      error: string | null
      metadata: runtime.JsonValue | null
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['cronJobExecution']
  >
  composites: {}
}

export type CronJobExecutionGetPayload<
  S extends boolean | null | undefined | CronJobExecutionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$CronJobExecutionPayload, S>

export type CronJobExecutionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  CronJobExecutionFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: CronJobExecutionCountAggregateInputType | true
}

export interface CronJobExecutionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['CronJobExecution']
    meta: { name: 'CronJobExecution' }
  }
  /**
   * Find zero or one CronJobExecution that matches the filter.
   * @param {CronJobExecutionFindUniqueArgs} args - Arguments to find a CronJobExecution
   * @example
   * // Get one CronJobExecution
   * const cronJobExecution = await prisma.cronJobExecution.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CronJobExecutionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, CronJobExecutionFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__CronJobExecutionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one CronJobExecution that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CronJobExecutionFindUniqueOrThrowArgs} args - Arguments to find a CronJobExecution
   * @example
   * // Get one CronJobExecution
   * const cronJobExecution = await prisma.cronJobExecution.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CronJobExecutionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, CronJobExecutionFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CronJobExecutionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first CronJobExecution that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CronJobExecutionFindFirstArgs} args - Arguments to find a CronJobExecution
   * @example
   * // Get one CronJobExecution
   * const cronJobExecution = await prisma.cronJobExecution.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CronJobExecutionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, CronJobExecutionFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__CronJobExecutionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first CronJobExecution that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CronJobExecutionFindFirstOrThrowArgs} args - Arguments to find a CronJobExecution
   * @example
   * // Get one CronJobExecution
   * const cronJobExecution = await prisma.cronJobExecution.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CronJobExecutionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, CronJobExecutionFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__CronJobExecutionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more CronJobExecutions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CronJobExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CronJobExecutions
   * const cronJobExecutions = await prisma.cronJobExecution.findMany()
   *
   * // Get first 10 CronJobExecutions
   * const cronJobExecutions = await prisma.cronJobExecution.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const cronJobExecutionWithIdOnly = await prisma.cronJobExecution.findMany({ select: { id: true } })
   *
   */
  findMany<T extends CronJobExecutionFindManyArgs>(
    args?: Prisma.SelectSubset<T, CronJobExecutionFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a CronJobExecution.
   * @param {CronJobExecutionCreateArgs} args - Arguments to create a CronJobExecution.
   * @example
   * // Create one CronJobExecution
   * const CronJobExecution = await prisma.cronJobExecution.create({
   *   data: {
   *     // ... data to create a CronJobExecution
   *   }
   * })
   *
   */
  create<T extends CronJobExecutionCreateArgs>(
    args: Prisma.SelectSubset<T, CronJobExecutionCreateArgs<ExtArgs>>
  ): Prisma.Prisma__CronJobExecutionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many CronJobExecutions.
   * @param {CronJobExecutionCreateManyArgs} args - Arguments to create many CronJobExecutions.
   * @example
   * // Create many CronJobExecutions
   * const cronJobExecution = await prisma.cronJobExecution.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends CronJobExecutionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, CronJobExecutionCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CronJobExecutions and returns the data saved in the database.
   * @param {CronJobExecutionCreateManyAndReturnArgs} args - Arguments to create many CronJobExecutions.
   * @example
   * // Create many CronJobExecutions
   * const cronJobExecution = await prisma.cronJobExecution.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many CronJobExecutions and only return the `id`
   * const cronJobExecutionWithIdOnly = await prisma.cronJobExecution.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends CronJobExecutionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      CronJobExecutionCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a CronJobExecution.
   * @param {CronJobExecutionDeleteArgs} args - Arguments to delete one CronJobExecution.
   * @example
   * // Delete one CronJobExecution
   * const CronJobExecution = await prisma.cronJobExecution.delete({
   *   where: {
   *     // ... filter to delete one CronJobExecution
   *   }
   * })
   *
   */
  delete<T extends CronJobExecutionDeleteArgs>(
    args: Prisma.SelectSubset<T, CronJobExecutionDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__CronJobExecutionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one CronJobExecution.
   * @param {CronJobExecutionUpdateArgs} args - Arguments to update one CronJobExecution.
   * @example
   * // Update one CronJobExecution
   * const cronJobExecution = await prisma.cronJobExecution.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends CronJobExecutionUpdateArgs>(
    args: Prisma.SelectSubset<T, CronJobExecutionUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__CronJobExecutionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more CronJobExecutions.
   * @param {CronJobExecutionDeleteManyArgs} args - Arguments to filter CronJobExecutions to delete.
   * @example
   * // Delete a few CronJobExecutions
   * const { count } = await prisma.cronJobExecution.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends CronJobExecutionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, CronJobExecutionDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CronJobExecutions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CronJobExecutionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CronJobExecutions
   * const cronJobExecution = await prisma.cronJobExecution.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends CronJobExecutionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, CronJobExecutionUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CronJobExecutions and returns the data updated in the database.
   * @param {CronJobExecutionUpdateManyAndReturnArgs} args - Arguments to update many CronJobExecutions.
   * @example
   * // Update many CronJobExecutions
   * const cronJobExecution = await prisma.cronJobExecution.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more CronJobExecutions and only return the `id`
   * const cronJobExecutionWithIdOnly = await prisma.cronJobExecution.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends CronJobExecutionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      CronJobExecutionUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one CronJobExecution.
   * @param {CronJobExecutionUpsertArgs} args - Arguments to update or create a CronJobExecution.
   * @example
   * // Update or create a CronJobExecution
   * const cronJobExecution = await prisma.cronJobExecution.upsert({
   *   create: {
   *     // ... data to create a CronJobExecution
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CronJobExecution we want to update
   *   }
   * })
   */
  upsert<T extends CronJobExecutionUpsertArgs>(
    args: Prisma.SelectSubset<T, CronJobExecutionUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__CronJobExecutionClient<
    runtime.Types.Result.GetResult<
      Prisma.$CronJobExecutionPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of CronJobExecutions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CronJobExecutionCountArgs} args - Arguments to filter CronJobExecutions to count.
   * @example
   * // Count the number of CronJobExecutions
   * const count = await prisma.cronJobExecution.count({
   *   where: {
   *     // ... the filter for the CronJobExecutions we want to count
   *   }
   * })
   **/
  count<T extends CronJobExecutionCountArgs>(
    args?: Prisma.Subset<T, CronJobExecutionCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            CronJobExecutionCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CronJobExecution.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CronJobExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends CronJobExecutionAggregateArgs>(
    args: Prisma.Subset<T, CronJobExecutionAggregateArgs>
  ): Prisma.PrismaPromise<GetCronJobExecutionAggregateType<T>>

  /**
   * Group by CronJobExecution.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CronJobExecutionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends CronJobExecutionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CronJobExecutionGroupByArgs['orderBy'] }
      : { orderBy?: CronJobExecutionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      CronJobExecutionGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetCronJobExecutionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CronJobExecution model
   */
  readonly fields: CronJobExecutionFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for CronJobExecution.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CronJobExecutionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  organization<
    T extends Prisma.CronJobExecution$organizationArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.CronJobExecution$organizationArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrganizationPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the CronJobExecution model
 */
export interface CronJobExecutionFieldRefs {
  readonly id: Prisma.FieldRef<'CronJobExecution', 'String'>
  readonly jobId: Prisma.FieldRef<'CronJobExecution', 'String'>
  readonly jobName: Prisma.FieldRef<'CronJobExecution', 'String'>
  readonly organizationId: Prisma.FieldRef<'CronJobExecution', 'String'>
  readonly status: Prisma.FieldRef<'CronJobExecution', 'String'>
  readonly startedAt: Prisma.FieldRef<'CronJobExecution', 'DateTime'>
  readonly completedAt: Prisma.FieldRef<'CronJobExecution', 'DateTime'>
  readonly notificationsCreated: Prisma.FieldRef<'CronJobExecution', 'Int'>
  readonly error: Prisma.FieldRef<'CronJobExecution', 'String'>
  readonly metadata: Prisma.FieldRef<'CronJobExecution', 'Json'>
  readonly createdAt: Prisma.FieldRef<'CronJobExecution', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'CronJobExecution', 'DateTime'>
}

// Custom InputTypes
/**
 * CronJobExecution findUnique
 */
export type CronJobExecutionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * Filter, which CronJobExecution to fetch.
   */
  where: Prisma.CronJobExecutionWhereUniqueInput
}

/**
 * CronJobExecution findUniqueOrThrow
 */
export type CronJobExecutionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * Filter, which CronJobExecution to fetch.
   */
  where: Prisma.CronJobExecutionWhereUniqueInput
}

/**
 * CronJobExecution findFirst
 */
export type CronJobExecutionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * Filter, which CronJobExecution to fetch.
   */
  where?: Prisma.CronJobExecutionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CronJobExecutions to fetch.
   */
  orderBy?:
    | Prisma.CronJobExecutionOrderByWithRelationInput
    | Prisma.CronJobExecutionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CronJobExecutions.
   */
  cursor?: Prisma.CronJobExecutionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CronJobExecutions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CronJobExecutions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CronJobExecutions.
   */
  distinct?:
    | Prisma.CronJobExecutionScalarFieldEnum
    | Prisma.CronJobExecutionScalarFieldEnum[]
}

/**
 * CronJobExecution findFirstOrThrow
 */
export type CronJobExecutionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * Filter, which CronJobExecution to fetch.
   */
  where?: Prisma.CronJobExecutionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CronJobExecutions to fetch.
   */
  orderBy?:
    | Prisma.CronJobExecutionOrderByWithRelationInput
    | Prisma.CronJobExecutionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for CronJobExecutions.
   */
  cursor?: Prisma.CronJobExecutionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CronJobExecutions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CronJobExecutions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of CronJobExecutions.
   */
  distinct?:
    | Prisma.CronJobExecutionScalarFieldEnum
    | Prisma.CronJobExecutionScalarFieldEnum[]
}

/**
 * CronJobExecution findMany
 */
export type CronJobExecutionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * Filter, which CronJobExecutions to fetch.
   */
  where?: Prisma.CronJobExecutionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of CronJobExecutions to fetch.
   */
  orderBy?:
    | Prisma.CronJobExecutionOrderByWithRelationInput
    | Prisma.CronJobExecutionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing CronJobExecutions.
   */
  cursor?: Prisma.CronJobExecutionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` CronJobExecutions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` CronJobExecutions.
   */
  skip?: number
  distinct?:
    | Prisma.CronJobExecutionScalarFieldEnum
    | Prisma.CronJobExecutionScalarFieldEnum[]
}

/**
 * CronJobExecution create
 */
export type CronJobExecutionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * The data needed to create a CronJobExecution.
   */
  data: Prisma.XOR<
    Prisma.CronJobExecutionCreateInput,
    Prisma.CronJobExecutionUncheckedCreateInput
  >
}

/**
 * CronJobExecution createMany
 */
export type CronJobExecutionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many CronJobExecutions.
   */
  data:
    | Prisma.CronJobExecutionCreateManyInput
    | Prisma.CronJobExecutionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CronJobExecution createManyAndReturn
 */
export type CronJobExecutionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * The data used to create many CronJobExecutions.
   */
  data:
    | Prisma.CronJobExecutionCreateManyInput
    | Prisma.CronJobExecutionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CronJobExecution update
 */
export type CronJobExecutionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * The data needed to update a CronJobExecution.
   */
  data: Prisma.XOR<
    Prisma.CronJobExecutionUpdateInput,
    Prisma.CronJobExecutionUncheckedUpdateInput
  >
  /**
   * Choose, which CronJobExecution to update.
   */
  where: Prisma.CronJobExecutionWhereUniqueInput
}

/**
 * CronJobExecution updateMany
 */
export type CronJobExecutionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update CronJobExecutions.
   */
  data: Prisma.XOR<
    Prisma.CronJobExecutionUpdateManyMutationInput,
    Prisma.CronJobExecutionUncheckedUpdateManyInput
  >
  /**
   * Filter which CronJobExecutions to update
   */
  where?: Prisma.CronJobExecutionWhereInput
  /**
   * Limit how many CronJobExecutions to update.
   */
  limit?: number
}

/**
 * CronJobExecution updateManyAndReturn
 */
export type CronJobExecutionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * The data used to update CronJobExecutions.
   */
  data: Prisma.XOR<
    Prisma.CronJobExecutionUpdateManyMutationInput,
    Prisma.CronJobExecutionUncheckedUpdateManyInput
  >
  /**
   * Filter which CronJobExecutions to update
   */
  where?: Prisma.CronJobExecutionWhereInput
  /**
   * Limit how many CronJobExecutions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CronJobExecution upsert
 */
export type CronJobExecutionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * The filter to search for the CronJobExecution to update in case it exists.
   */
  where: Prisma.CronJobExecutionWhereUniqueInput
  /**
   * In case the CronJobExecution found by the `where` argument doesn't exist, create a new CronJobExecution with this data.
   */
  create: Prisma.XOR<
    Prisma.CronJobExecutionCreateInput,
    Prisma.CronJobExecutionUncheckedCreateInput
  >
  /**
   * In case the CronJobExecution was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.CronJobExecutionUpdateInput,
    Prisma.CronJobExecutionUncheckedUpdateInput
  >
}

/**
 * CronJobExecution delete
 */
export type CronJobExecutionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
  /**
   * Filter which CronJobExecution to delete.
   */
  where: Prisma.CronJobExecutionWhereUniqueInput
}

/**
 * CronJobExecution deleteMany
 */
export type CronJobExecutionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which CronJobExecutions to delete
   */
  where?: Prisma.CronJobExecutionWhereInput
  /**
   * Limit how many CronJobExecutions to delete.
   */
  limit?: number
}

/**
 * CronJobExecution.organization
 */
export type CronJobExecution$organizationArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  where?: Prisma.OrganizationWhereInput
}

/**
 * CronJobExecution without action
 */
export type CronJobExecutionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the CronJobExecution
   */
  select?: Prisma.CronJobExecutionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CronJobExecution
   */
  omit?: Prisma.CronJobExecutionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CronJobExecutionInclude<ExtArgs> | null
}
