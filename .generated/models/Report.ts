/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Report` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model Report
 * Reports define executable, extensible data aggregations.
 */
export type ReportModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ReportPayload>

export type AggregateReport = {
  _count: ReportCountAggregateOutputType | null
  _min: ReportMinAggregateOutputType | null
  _max: ReportMaxAggregateOutputType | null
}

export type ReportMinAggregateOutputType = {
  id: string | null
  codeId: string | null
  name: string | null
  description: string | null
  ownerId: string | null
  enabled: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ReportMaxAggregateOutputType = {
  id: string | null
  codeId: string | null
  name: string | null
  description: string | null
  ownerId: string | null
  enabled: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ReportCountAggregateOutputType = {
  id: number
  codeId: number
  name: number
  description: number
  ownerId: number
  inputSchema: number
  enabled: number
  renderers: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type ReportMinAggregateInputType = {
  id?: true
  codeId?: true
  name?: true
  description?: true
  ownerId?: true
  enabled?: true
  createdAt?: true
  updatedAt?: true
}

export type ReportMaxAggregateInputType = {
  id?: true
  codeId?: true
  name?: true
  description?: true
  ownerId?: true
  enabled?: true
  createdAt?: true
  updatedAt?: true
}

export type ReportCountAggregateInputType = {
  id?: true
  codeId?: true
  name?: true
  description?: true
  ownerId?: true
  inputSchema?: true
  enabled?: true
  renderers?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ReportAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Report to aggregate.
   */
  where?: Prisma.ReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reports to fetch.
   */
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Reports
   **/
  _count?: true | ReportCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ReportMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ReportMaxAggregateInputType
}

export type GetReportAggregateType<T extends ReportAggregateArgs> = {
  [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReport[P]>
    : Prisma.GetScalarType<T[P], AggregateReport[P]>
}

export type ReportGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ReportWhereInput
  orderBy?:
    | Prisma.ReportOrderByWithAggregationInput
    | Prisma.ReportOrderByWithAggregationInput[]
  by: Prisma.ReportScalarFieldEnum[] | Prisma.ReportScalarFieldEnum
  having?: Prisma.ReportScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ReportCountAggregateInputType | true
  _min?: ReportMinAggregateInputType
  _max?: ReportMaxAggregateInputType
}

export type ReportGroupByOutputType = {
  id: string
  codeId: string
  name: string
  description: string | null
  ownerId: string | null
  inputSchema: runtime.JsonValue | null
  enabled: boolean
  renderers: string[]
  createdAt: Date
  updatedAt: Date
  _count: ReportCountAggregateOutputType | null
  _min: ReportMinAggregateOutputType | null
  _max: ReportMaxAggregateOutputType | null
}

type GetReportGroupByPayload<T extends ReportGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ReportGroupByOutputType, T['by']> & {
        [P in keyof T & keyof ReportGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReportGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReportGroupByOutputType[P]>
      }
    >
  >

export type ReportWhereInput = {
  AND?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[]
  OR?: Prisma.ReportWhereInput[]
  NOT?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[]
  id?: Prisma.StringFilter<'Report'> | string
  codeId?: Prisma.StringFilter<'Report'> | string
  name?: Prisma.StringFilter<'Report'> | string
  description?: Prisma.StringNullableFilter<'Report'> | string | null
  ownerId?: Prisma.StringNullableFilter<'Report'> | string | null
  inputSchema?: Prisma.JsonNullableFilter<'Report'>
  enabled?: Prisma.BoolFilter<'Report'> | boolean
  renderers?: Prisma.StringNullableListFilter<'Report'>
  createdAt?: Prisma.DateTimeFilter<'Report'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'Report'> | Date | string
  owner?: Prisma.XOR<
    Prisma.UserNullableScalarRelationFilter,
    Prisma.UserWhereInput
  > | null
  instances?: Prisma.ReportInstanceListRelationFilter
}

export type ReportOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  codeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  ownerId?: Prisma.SortOrderInput | Prisma.SortOrder
  inputSchema?: Prisma.SortOrderInput | Prisma.SortOrder
  enabled?: Prisma.SortOrder
  renderers?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  owner?: Prisma.UserOrderByWithRelationInput
  instances?: Prisma.ReportInstanceOrderByRelationAggregateInput
}

export type ReportWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    codeId?: string
    AND?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[]
    OR?: Prisma.ReportWhereInput[]
    NOT?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[]
    name?: Prisma.StringFilter<'Report'> | string
    description?: Prisma.StringNullableFilter<'Report'> | string | null
    ownerId?: Prisma.StringNullableFilter<'Report'> | string | null
    inputSchema?: Prisma.JsonNullableFilter<'Report'>
    enabled?: Prisma.BoolFilter<'Report'> | boolean
    renderers?: Prisma.StringNullableListFilter<'Report'>
    createdAt?: Prisma.DateTimeFilter<'Report'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'Report'> | Date | string
    owner?: Prisma.XOR<
      Prisma.UserNullableScalarRelationFilter,
      Prisma.UserWhereInput
    > | null
    instances?: Prisma.ReportInstanceListRelationFilter
  },
  'id' | 'codeId'
>

export type ReportOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  codeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  ownerId?: Prisma.SortOrderInput | Prisma.SortOrder
  inputSchema?: Prisma.SortOrderInput | Prisma.SortOrder
  enabled?: Prisma.SortOrder
  renderers?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ReportCountOrderByAggregateInput
  _max?: Prisma.ReportMaxOrderByAggregateInput
  _min?: Prisma.ReportMinOrderByAggregateInput
}

export type ReportScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ReportScalarWhereWithAggregatesInput
    | Prisma.ReportScalarWhereWithAggregatesInput[]
  OR?: Prisma.ReportScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.ReportScalarWhereWithAggregatesInput
    | Prisma.ReportScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'Report'> | string
  codeId?: Prisma.StringWithAggregatesFilter<'Report'> | string
  name?: Prisma.StringWithAggregatesFilter<'Report'> | string
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'Report'>
    | string
    | null
  ownerId?: Prisma.StringNullableWithAggregatesFilter<'Report'> | string | null
  inputSchema?: Prisma.JsonNullableWithAggregatesFilter<'Report'>
  enabled?: Prisma.BoolWithAggregatesFilter<'Report'> | boolean
  renderers?: Prisma.StringNullableListFilter<'Report'>
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Report'> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Report'> | Date | string
}

export type ReportCreateInput = {
  id?: string
  codeId: string
  name: string
  description?: string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: boolean
  renderers?: Prisma.ReportCreaterenderersInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  owner?: Prisma.UserCreateNestedOneWithoutOwnedReportsInput
  instances?: Prisma.ReportInstanceCreateNestedManyWithoutReportInput
}

export type ReportUncheckedCreateInput = {
  id?: string
  codeId: string
  name: string
  description?: string | null
  ownerId?: string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: boolean
  renderers?: Prisma.ReportCreaterenderersInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  instances?: Prisma.ReportInstanceUncheckedCreateNestedManyWithoutReportInput
}

export type ReportUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneWithoutOwnedReportsNestedInput
  instances?: Prisma.ReportInstanceUpdateManyWithoutReportNestedInput
}

export type ReportUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instances?: Prisma.ReportInstanceUncheckedUpdateManyWithoutReportNestedInput
}

export type ReportCreateManyInput = {
  id?: string
  codeId: string
  name: string
  description?: string | null
  ownerId?: string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: boolean
  renderers?: Prisma.ReportCreaterenderersInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportListRelationFilter = {
  every?: Prisma.ReportWhereInput
  some?: Prisma.ReportWhereInput
  none?: Prisma.ReportWhereInput
}

export type ReportOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ReportCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  inputSchema?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  renderers?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codeId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportScalarRelationFilter = {
  is?: Prisma.ReportWhereInput
  isNot?: Prisma.ReportWhereInput
}

export type ReportCreateNestedManyWithoutOwnerInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportCreateWithoutOwnerInput,
        Prisma.ReportUncheckedCreateWithoutOwnerInput
      >
    | Prisma.ReportCreateWithoutOwnerInput[]
    | Prisma.ReportUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?:
    | Prisma.ReportCreateOrConnectWithoutOwnerInput
    | Prisma.ReportCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.ReportCreateManyOwnerInputEnvelope
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
}

export type ReportUncheckedCreateNestedManyWithoutOwnerInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportCreateWithoutOwnerInput,
        Prisma.ReportUncheckedCreateWithoutOwnerInput
      >
    | Prisma.ReportCreateWithoutOwnerInput[]
    | Prisma.ReportUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?:
    | Prisma.ReportCreateOrConnectWithoutOwnerInput
    | Prisma.ReportCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.ReportCreateManyOwnerInputEnvelope
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
}

export type ReportUpdateManyWithoutOwnerNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportCreateWithoutOwnerInput,
        Prisma.ReportUncheckedCreateWithoutOwnerInput
      >
    | Prisma.ReportCreateWithoutOwnerInput[]
    | Prisma.ReportUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?:
    | Prisma.ReportCreateOrConnectWithoutOwnerInput
    | Prisma.ReportCreateOrConnectWithoutOwnerInput[]
  upsert?:
    | Prisma.ReportUpsertWithWhereUniqueWithoutOwnerInput
    | Prisma.ReportUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.ReportCreateManyOwnerInputEnvelope
  set?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  disconnect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  delete?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  update?:
    | Prisma.ReportUpdateWithWhereUniqueWithoutOwnerInput
    | Prisma.ReportUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?:
    | Prisma.ReportUpdateManyWithWhereWithoutOwnerInput
    | Prisma.ReportUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
}

export type ReportUncheckedUpdateManyWithoutOwnerNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportCreateWithoutOwnerInput,
        Prisma.ReportUncheckedCreateWithoutOwnerInput
      >
    | Prisma.ReportCreateWithoutOwnerInput[]
    | Prisma.ReportUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?:
    | Prisma.ReportCreateOrConnectWithoutOwnerInput
    | Prisma.ReportCreateOrConnectWithoutOwnerInput[]
  upsert?:
    | Prisma.ReportUpsertWithWhereUniqueWithoutOwnerInput
    | Prisma.ReportUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.ReportCreateManyOwnerInputEnvelope
  set?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  disconnect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  delete?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  update?:
    | Prisma.ReportUpdateWithWhereUniqueWithoutOwnerInput
    | Prisma.ReportUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?:
    | Prisma.ReportUpdateManyWithWhereWithoutOwnerInput
    | Prisma.ReportUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
}

export type ReportCreaterenderersInput = {
  set: string[]
}

export type ReportUpdaterenderersInput = {
  set?: string[]
  push?: string | string[]
}

export type ReportCreateNestedOneWithoutInstancesInput = {
  create?: Prisma.XOR<
    Prisma.ReportCreateWithoutInstancesInput,
    Prisma.ReportUncheckedCreateWithoutInstancesInput
  >
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutInstancesInput
  connect?: Prisma.ReportWhereUniqueInput
}

export type ReportUpdateOneRequiredWithoutInstancesNestedInput = {
  create?: Prisma.XOR<
    Prisma.ReportCreateWithoutInstancesInput,
    Prisma.ReportUncheckedCreateWithoutInstancesInput
  >
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutInstancesInput
  upsert?: Prisma.ReportUpsertWithoutInstancesInput
  connect?: Prisma.ReportWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ReportUpdateToOneWithWhereWithoutInstancesInput,
      Prisma.ReportUpdateWithoutInstancesInput
    >,
    Prisma.ReportUncheckedUpdateWithoutInstancesInput
  >
}

export type ReportCreateWithoutOwnerInput = {
  id?: string
  codeId: string
  name: string
  description?: string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: boolean
  renderers?: Prisma.ReportCreaterenderersInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  instances?: Prisma.ReportInstanceCreateNestedManyWithoutReportInput
}

export type ReportUncheckedCreateWithoutOwnerInput = {
  id?: string
  codeId: string
  name: string
  description?: string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: boolean
  renderers?: Prisma.ReportCreaterenderersInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  instances?: Prisma.ReportInstanceUncheckedCreateNestedManyWithoutReportInput
}

export type ReportCreateOrConnectWithoutOwnerInput = {
  where: Prisma.ReportWhereUniqueInput
  create: Prisma.XOR<
    Prisma.ReportCreateWithoutOwnerInput,
    Prisma.ReportUncheckedCreateWithoutOwnerInput
  >
}

export type ReportCreateManyOwnerInputEnvelope = {
  data: Prisma.ReportCreateManyOwnerInput | Prisma.ReportCreateManyOwnerInput[]
  skipDuplicates?: boolean
}

export type ReportUpsertWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.ReportWhereUniqueInput
  update: Prisma.XOR<
    Prisma.ReportUpdateWithoutOwnerInput,
    Prisma.ReportUncheckedUpdateWithoutOwnerInput
  >
  create: Prisma.XOR<
    Prisma.ReportCreateWithoutOwnerInput,
    Prisma.ReportUncheckedCreateWithoutOwnerInput
  >
}

export type ReportUpdateWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.ReportWhereUniqueInput
  data: Prisma.XOR<
    Prisma.ReportUpdateWithoutOwnerInput,
    Prisma.ReportUncheckedUpdateWithoutOwnerInput
  >
}

export type ReportUpdateManyWithWhereWithoutOwnerInput = {
  where: Prisma.ReportScalarWhereInput
  data: Prisma.XOR<
    Prisma.ReportUpdateManyMutationInput,
    Prisma.ReportUncheckedUpdateManyWithoutOwnerInput
  >
}

export type ReportScalarWhereInput = {
  AND?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
  OR?: Prisma.ReportScalarWhereInput[]
  NOT?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
  id?: Prisma.StringFilter<'Report'> | string
  codeId?: Prisma.StringFilter<'Report'> | string
  name?: Prisma.StringFilter<'Report'> | string
  description?: Prisma.StringNullableFilter<'Report'> | string | null
  ownerId?: Prisma.StringNullableFilter<'Report'> | string | null
  inputSchema?: Prisma.JsonNullableFilter<'Report'>
  enabled?: Prisma.BoolFilter<'Report'> | boolean
  renderers?: Prisma.StringNullableListFilter<'Report'>
  createdAt?: Prisma.DateTimeFilter<'Report'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'Report'> | Date | string
}

export type ReportCreateWithoutInstancesInput = {
  id?: string
  codeId: string
  name: string
  description?: string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: boolean
  renderers?: Prisma.ReportCreaterenderersInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  owner?: Prisma.UserCreateNestedOneWithoutOwnedReportsInput
}

export type ReportUncheckedCreateWithoutInstancesInput = {
  id?: string
  codeId: string
  name: string
  description?: string | null
  ownerId?: string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: boolean
  renderers?: Prisma.ReportCreaterenderersInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCreateOrConnectWithoutInstancesInput = {
  where: Prisma.ReportWhereUniqueInput
  create: Prisma.XOR<
    Prisma.ReportCreateWithoutInstancesInput,
    Prisma.ReportUncheckedCreateWithoutInstancesInput
  >
}

export type ReportUpsertWithoutInstancesInput = {
  update: Prisma.XOR<
    Prisma.ReportUpdateWithoutInstancesInput,
    Prisma.ReportUncheckedUpdateWithoutInstancesInput
  >
  create: Prisma.XOR<
    Prisma.ReportCreateWithoutInstancesInput,
    Prisma.ReportUncheckedCreateWithoutInstancesInput
  >
  where?: Prisma.ReportWhereInput
}

export type ReportUpdateToOneWithWhereWithoutInstancesInput = {
  where?: Prisma.ReportWhereInput
  data: Prisma.XOR<
    Prisma.ReportUpdateWithoutInstancesInput,
    Prisma.ReportUncheckedUpdateWithoutInstancesInput
  >
}

export type ReportUpdateWithoutInstancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneWithoutOwnedReportsNestedInput
}

export type ReportUncheckedUpdateWithoutInstancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCreateManyOwnerInput = {
  id?: string
  codeId: string
  name: string
  description?: string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: boolean
  renderers?: Prisma.ReportCreaterenderersInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instances?: Prisma.ReportInstanceUpdateManyWithoutReportNestedInput
}

export type ReportUncheckedUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  instances?: Prisma.ReportInstanceUncheckedUpdateManyWithoutReportNestedInput
}

export type ReportUncheckedUpdateManyWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codeId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  inputSchema?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  renderers?: Prisma.ReportUpdaterenderersInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

/**
 * Count Type ReportCountOutputType
 */

export type ReportCountOutputType = {
  instances: number
}

export type ReportCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  instances?: boolean | ReportCountOutputTypeCountInstancesArgs
}

/**
 * ReportCountOutputType without action
 */
export type ReportCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportCountOutputType
   */
  select?: Prisma.ReportCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ReportCountOutputType without action
 */
export type ReportCountOutputTypeCountInstancesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ReportInstanceWhereInput
}

export type ReportSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    codeId?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    inputSchema?: boolean
    enabled?: boolean
    renderers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Prisma.Report$ownerArgs<ExtArgs>
    instances?: boolean | Prisma.Report$instancesArgs<ExtArgs>
    _count?: boolean | Prisma.ReportCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['report']
>

export type ReportSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    codeId?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    inputSchema?: boolean
    enabled?: boolean
    renderers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Prisma.Report$ownerArgs<ExtArgs>
  },
  ExtArgs['result']['report']
>

export type ReportSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    codeId?: boolean
    name?: boolean
    description?: boolean
    ownerId?: boolean
    inputSchema?: boolean
    enabled?: boolean
    renderers?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | Prisma.Report$ownerArgs<ExtArgs>
  },
  ExtArgs['result']['report']
>

export type ReportSelectScalar = {
  id?: boolean
  codeId?: boolean
  name?: boolean
  description?: boolean
  ownerId?: boolean
  inputSchema?: boolean
  enabled?: boolean
  renderers?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ReportOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'codeId'
  | 'name'
  | 'description'
  | 'ownerId'
  | 'inputSchema'
  | 'enabled'
  | 'renderers'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['report']
>
export type ReportInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  owner?: boolean | Prisma.Report$ownerArgs<ExtArgs>
  instances?: boolean | Prisma.Report$instancesArgs<ExtArgs>
  _count?: boolean | Prisma.ReportCountOutputTypeDefaultArgs<ExtArgs>
}
export type ReportIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  owner?: boolean | Prisma.Report$ownerArgs<ExtArgs>
}
export type ReportIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  owner?: boolean | Prisma.Report$ownerArgs<ExtArgs>
}

export type $ReportPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Report'
  objects: {
    owner: Prisma.$UserPayload<ExtArgs> | null
    instances: Prisma.$ReportInstancePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      codeId: string
      name: string
      description: string | null
      ownerId: string | null
      inputSchema: runtime.JsonValue | null
      enabled: boolean
      renderers: string[]
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['report']
  >
  composites: {}
}

export type ReportGetPayload<
  S extends boolean | null | undefined | ReportDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ReportPayload, S>

export type ReportCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: ReportCountAggregateInputType | true
}

export interface ReportDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Report']
    meta: { name: 'Report' }
  }
  /**
   * Find zero or one Report that matches the filter.
   * @param {ReportFindUniqueArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one Report that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Report that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindFirstArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReportFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ReportFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Report that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more Reports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Reports
   * const reports = await prisma.report.findMany()
   *
   * // Get first 10 Reports
   * const reports = await prisma.report.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ReportFindManyArgs>(
    args?: Prisma.SelectSubset<T, ReportFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a Report.
   * @param {ReportCreateArgs} args - Arguments to create a Report.
   * @example
   * // Create one Report
   * const Report = await prisma.report.create({
   *   data: {
   *     // ... data to create a Report
   *   }
   * })
   *
   */
  create<T extends ReportCreateArgs>(
    args: Prisma.SelectSubset<T, ReportCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many Reports.
   * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
   * @example
   * // Create many Reports
   * const report = await prisma.report.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ReportCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ReportCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Reports and returns the data saved in the database.
   * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
   * @example
   * // Create many Reports
   * const report = await prisma.report.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Reports and only return the `id`
   * const reportWithIdOnly = await prisma.report.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a Report.
   * @param {ReportDeleteArgs} args - Arguments to delete one Report.
   * @example
   * // Delete one Report
   * const Report = await prisma.report.delete({
   *   where: {
   *     // ... filter to delete one Report
   *   }
   * })
   *
   */
  delete<T extends ReportDeleteArgs>(
    args: Prisma.SelectSubset<T, ReportDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one Report.
   * @param {ReportUpdateArgs} args - Arguments to update one Report.
   * @example
   * // Update one Report
   * const report = await prisma.report.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ReportUpdateArgs>(
    args: Prisma.SelectSubset<T, ReportUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more Reports.
   * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
   * @example
   * // Delete a few Reports
   * const { count } = await prisma.report.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ReportDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Reports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Reports
   * const report = await prisma.report.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ReportUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Reports and returns the data updated in the database.
   * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
   * @example
   * // Update many Reports
   * const report = await prisma.report.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Reports and only return the `id`
   * const reportWithIdOnly = await prisma.report.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one Report.
   * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
   * @example
   * // Update or create a Report
   * const report = await prisma.report.upsert({
   *   create: {
   *     // ... data to create a Report
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Report we want to update
   *   }
   * })
   */
  upsert<T extends ReportUpsertArgs>(
    args: Prisma.SelectSubset<T, ReportUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of Reports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCountArgs} args - Arguments to filter Reports to count.
   * @example
   * // Count the number of Reports
   * const count = await prisma.report.count({
   *   where: {
   *     // ... the filter for the Reports we want to count
   *   }
   * })
   **/
  count<T extends ReportCountArgs>(
    args?: Prisma.Subset<T, ReportCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ReportCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Report.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ReportAggregateArgs>(
    args: Prisma.Subset<T, ReportAggregateArgs>
  ): Prisma.PrismaPromise<GetReportAggregateType<T>>

  /**
   * Group by Report.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ReportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReportGroupByArgs['orderBy'] }
      : { orderBy?: ReportGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ReportGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetReportGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for Report.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReportClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  owner<T extends Prisma.Report$ownerArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Report$ownerArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >
  instances<T extends Prisma.Report$instancesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Report$instancesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ReportInstancePayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the Report model
 */
export interface ReportFieldRefs {
  readonly id: Prisma.FieldRef<'Report', 'String'>
  readonly codeId: Prisma.FieldRef<'Report', 'String'>
  readonly name: Prisma.FieldRef<'Report', 'String'>
  readonly description: Prisma.FieldRef<'Report', 'String'>
  readonly ownerId: Prisma.FieldRef<'Report', 'String'>
  readonly inputSchema: Prisma.FieldRef<'Report', 'Json'>
  readonly enabled: Prisma.FieldRef<'Report', 'Boolean'>
  readonly renderers: Prisma.FieldRef<'Report', 'String[]'>
  readonly createdAt: Prisma.FieldRef<'Report', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'Report', 'DateTime'>
}

// Custom InputTypes
/**
 * Report findUnique
 */
export type ReportFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Report to fetch.
   */
  where: Prisma.ReportWhereUniqueInput
}

/**
 * Report findUniqueOrThrow
 */
export type ReportFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Report to fetch.
   */
  where: Prisma.ReportWhereUniqueInput
}

/**
 * Report findFirst
 */
export type ReportFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Report to fetch.
   */
  where?: Prisma.ReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reports to fetch.
   */
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Reports.
   */
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[]
}

/**
 * Report findFirstOrThrow
 */
export type ReportFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Report to fetch.
   */
  where?: Prisma.ReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reports to fetch.
   */
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Reports.
   */
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[]
}

/**
 * Report findMany
 */
export type ReportFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Reports to fetch.
   */
  where?: Prisma.ReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Reports to fetch.
   */
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Reports.
   */
  skip?: number
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[]
}

/**
 * Report create
 */
export type ReportCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * The data needed to create a Report.
   */
  data: Prisma.XOR<Prisma.ReportCreateInput, Prisma.ReportUncheckedCreateInput>
}

/**
 * Report createMany
 */
export type ReportCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Reports.
   */
  data: Prisma.ReportCreateManyInput | Prisma.ReportCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Report createManyAndReturn
 */
export type ReportCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * The data used to create many Reports.
   */
  data: Prisma.ReportCreateManyInput | Prisma.ReportCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Report update
 */
export type ReportUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * The data needed to update a Report.
   */
  data: Prisma.XOR<Prisma.ReportUpdateInput, Prisma.ReportUncheckedUpdateInput>
  /**
   * Choose, which Report to update.
   */
  where: Prisma.ReportWhereUniqueInput
}

/**
 * Report updateMany
 */
export type ReportUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Reports.
   */
  data: Prisma.XOR<
    Prisma.ReportUpdateManyMutationInput,
    Prisma.ReportUncheckedUpdateManyInput
  >
  /**
   * Filter which Reports to update
   */
  where?: Prisma.ReportWhereInput
  /**
   * Limit how many Reports to update.
   */
  limit?: number
}

/**
 * Report updateManyAndReturn
 */
export type ReportUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * The data used to update Reports.
   */
  data: Prisma.XOR<
    Prisma.ReportUpdateManyMutationInput,
    Prisma.ReportUncheckedUpdateManyInput
  >
  /**
   * Filter which Reports to update
   */
  where?: Prisma.ReportWhereInput
  /**
   * Limit how many Reports to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Report upsert
 */
export type ReportUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * The filter to search for the Report to update in case it exists.
   */
  where: Prisma.ReportWhereUniqueInput
  /**
   * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
   */
  create: Prisma.XOR<
    Prisma.ReportCreateInput,
    Prisma.ReportUncheckedCreateInput
  >
  /**
   * In case the Report was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ReportUpdateInput,
    Prisma.ReportUncheckedUpdateInput
  >
}

/**
 * Report delete
 */
export type ReportDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter which Report to delete.
   */
  where: Prisma.ReportWhereUniqueInput
}

/**
 * Report deleteMany
 */
export type ReportDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Reports to delete
   */
  where?: Prisma.ReportWhereInput
  /**
   * Limit how many Reports to delete.
   */
  limit?: number
}

/**
 * Report.owner
 */
export type Report$ownerArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Report.instances
 */
export type Report$instancesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  where?: Prisma.ReportInstanceWhereInput
  orderBy?:
    | Prisma.ReportInstanceOrderByWithRelationInput
    | Prisma.ReportInstanceOrderByWithRelationInput[]
  cursor?: Prisma.ReportInstanceWhereUniqueInput
  take?: number
  skip?: number
  distinct?:
    | Prisma.ReportInstanceScalarFieldEnum
    | Prisma.ReportInstanceScalarFieldEnum[]
}

/**
 * Report without action
 */
export type ReportDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
}
