/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `NotificationResponse` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model NotificationResponse
 *
 */
export type NotificationResponseModel =
  runtime.Types.Result.DefaultSelection<Prisma.$NotificationResponsePayload>

export type AggregateNotificationResponse = {
  _count: NotificationResponseCountAggregateOutputType | null
  _min: NotificationResponseMinAggregateOutputType | null
  _max: NotificationResponseMaxAggregateOutputType | null
}

export type NotificationResponseMinAggregateOutputType = {
  id: string | null
  notificationId: string | null
  userId: string | null
  status: string | null
  readAt: Date | null
  dismissedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NotificationResponseMaxAggregateOutputType = {
  id: string | null
  notificationId: string | null
  userId: string | null
  status: string | null
  readAt: Date | null
  dismissedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type NotificationResponseCountAggregateOutputType = {
  id: number
  notificationId: number
  userId: number
  status: number
  readAt: number
  dismissedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type NotificationResponseMinAggregateInputType = {
  id?: true
  notificationId?: true
  userId?: true
  status?: true
  readAt?: true
  dismissedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type NotificationResponseMaxAggregateInputType = {
  id?: true
  notificationId?: true
  userId?: true
  status?: true
  readAt?: true
  dismissedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type NotificationResponseCountAggregateInputType = {
  id?: true
  notificationId?: true
  userId?: true
  status?: true
  readAt?: true
  dismissedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type NotificationResponseAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which NotificationResponse to aggregate.
   */
  where?: Prisma.NotificationResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationResponses to fetch.
   */
  orderBy?:
    | Prisma.NotificationResponseOrderByWithRelationInput
    | Prisma.NotificationResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.NotificationResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned NotificationResponses
   **/
  _count?: true | NotificationResponseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: NotificationResponseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: NotificationResponseMaxAggregateInputType
}

export type GetNotificationResponseAggregateType<
  T extends NotificationResponseAggregateArgs,
> = {
  [P in keyof T & keyof AggregateNotificationResponse]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotificationResponse[P]>
    : Prisma.GetScalarType<T[P], AggregateNotificationResponse[P]>
}

export type NotificationResponseGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NotificationResponseWhereInput
  orderBy?:
    | Prisma.NotificationResponseOrderByWithAggregationInput
    | Prisma.NotificationResponseOrderByWithAggregationInput[]
  by:
    | Prisma.NotificationResponseScalarFieldEnum[]
    | Prisma.NotificationResponseScalarFieldEnum
  having?: Prisma.NotificationResponseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NotificationResponseCountAggregateInputType | true
  _min?: NotificationResponseMinAggregateInputType
  _max?: NotificationResponseMaxAggregateInputType
}

export type NotificationResponseGroupByOutputType = {
  id: string
  notificationId: string
  userId: string
  status: string
  readAt: Date | null
  dismissedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: NotificationResponseCountAggregateOutputType | null
  _min: NotificationResponseMinAggregateOutputType | null
  _max: NotificationResponseMaxAggregateOutputType | null
}

type GetNotificationResponseGroupByPayload<
  T extends NotificationResponseGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NotificationResponseGroupByOutputType, T['by']> & {
      [P in keyof T &
        keyof NotificationResponseGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], NotificationResponseGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], NotificationResponseGroupByOutputType[P]>
    }
  >
>

export type NotificationResponseWhereInput = {
  AND?:
    | Prisma.NotificationResponseWhereInput
    | Prisma.NotificationResponseWhereInput[]
  OR?: Prisma.NotificationResponseWhereInput[]
  NOT?:
    | Prisma.NotificationResponseWhereInput
    | Prisma.NotificationResponseWhereInput[]
  id?: Prisma.StringFilter<'NotificationResponse'> | string
  notificationId?: Prisma.StringFilter<'NotificationResponse'> | string
  userId?: Prisma.StringFilter<'NotificationResponse'> | string
  status?: Prisma.StringFilter<'NotificationResponse'> | string
  readAt?:
    | Prisma.DateTimeNullableFilter<'NotificationResponse'>
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.DateTimeNullableFilter<'NotificationResponse'>
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFilter<'NotificationResponse'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'NotificationResponse'> | Date | string
  notification?: Prisma.XOR<
    Prisma.NotificationScalarRelationFilter,
    Prisma.NotificationWhereInput
  >
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type NotificationResponseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  readAt?: Prisma.SortOrderInput | Prisma.SortOrder
  dismissedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  notification?: Prisma.NotificationOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type NotificationResponseWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    notificationId_userId?: Prisma.NotificationResponseNotificationIdUserIdCompoundUniqueInput
    AND?:
      | Prisma.NotificationResponseWhereInput
      | Prisma.NotificationResponseWhereInput[]
    OR?: Prisma.NotificationResponseWhereInput[]
    NOT?:
      | Prisma.NotificationResponseWhereInput
      | Prisma.NotificationResponseWhereInput[]
    notificationId?: Prisma.StringFilter<'NotificationResponse'> | string
    userId?: Prisma.StringFilter<'NotificationResponse'> | string
    status?: Prisma.StringFilter<'NotificationResponse'> | string
    readAt?:
      | Prisma.DateTimeNullableFilter<'NotificationResponse'>
      | Date
      | string
      | null
    dismissedAt?:
      | Prisma.DateTimeNullableFilter<'NotificationResponse'>
      | Date
      | string
      | null
    createdAt?: Prisma.DateTimeFilter<'NotificationResponse'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'NotificationResponse'> | Date | string
    notification?: Prisma.XOR<
      Prisma.NotificationScalarRelationFilter,
      Prisma.NotificationWhereInput
    >
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  },
  'id' | 'notificationId_userId'
>

export type NotificationResponseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  readAt?: Prisma.SortOrderInput | Prisma.SortOrder
  dismissedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.NotificationResponseCountOrderByAggregateInput
  _max?: Prisma.NotificationResponseMaxOrderByAggregateInput
  _min?: Prisma.NotificationResponseMinOrderByAggregateInput
}

export type NotificationResponseScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.NotificationResponseScalarWhereWithAggregatesInput
    | Prisma.NotificationResponseScalarWhereWithAggregatesInput[]
  OR?: Prisma.NotificationResponseScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.NotificationResponseScalarWhereWithAggregatesInput
    | Prisma.NotificationResponseScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'NotificationResponse'> | string
  notificationId?:
    | Prisma.StringWithAggregatesFilter<'NotificationResponse'>
    | string
  userId?: Prisma.StringWithAggregatesFilter<'NotificationResponse'> | string
  status?: Prisma.StringWithAggregatesFilter<'NotificationResponse'> | string
  readAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'NotificationResponse'>
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'NotificationResponse'>
    | Date
    | string
    | null
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'NotificationResponse'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'NotificationResponse'>
    | Date
    | string
}

export type NotificationResponseCreateInput = {
  id?: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  notification: Prisma.NotificationCreateNestedOneWithoutResponsesInput
  user: Prisma.UserCreateNestedOneWithoutNotificationResponsesInput
}

export type NotificationResponseUncheckedCreateInput = {
  id?: string
  notificationId: string
  userId: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationResponseUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notification?: Prisma.NotificationUpdateOneRequiredWithoutResponsesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutNotificationResponsesNestedInput
}

export type NotificationResponseUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  notificationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationResponseCreateManyInput = {
  id?: string
  notificationId: string
  userId: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationResponseUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationResponseUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  notificationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationResponseListRelationFilter = {
  every?: Prisma.NotificationResponseWhereInput
  some?: Prisma.NotificationResponseWhereInput
  none?: Prisma.NotificationResponseWhereInput
}

export type NotificationResponseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NotificationResponseNotificationIdUserIdCompoundUniqueInput = {
  notificationId: string
  userId: string
}

export type NotificationResponseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
  dismissedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationResponseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
  dismissedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationResponseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  notificationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  readAt?: Prisma.SortOrder
  dismissedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type NotificationResponseCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationResponseCreateWithoutUserInput,
        Prisma.NotificationResponseUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationResponseCreateWithoutUserInput[]
    | Prisma.NotificationResponseUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.NotificationResponseCreateOrConnectWithoutUserInput
    | Prisma.NotificationResponseCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.NotificationResponseCreateManyUserInputEnvelope
  connect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
}

export type NotificationResponseUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationResponseCreateWithoutUserInput,
        Prisma.NotificationResponseUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationResponseCreateWithoutUserInput[]
    | Prisma.NotificationResponseUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.NotificationResponseCreateOrConnectWithoutUserInput
    | Prisma.NotificationResponseCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.NotificationResponseCreateManyUserInputEnvelope
  connect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
}

export type NotificationResponseUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationResponseCreateWithoutUserInput,
        Prisma.NotificationResponseUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationResponseCreateWithoutUserInput[]
    | Prisma.NotificationResponseUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.NotificationResponseCreateOrConnectWithoutUserInput
    | Prisma.NotificationResponseCreateOrConnectWithoutUserInput[]
  upsert?:
    | Prisma.NotificationResponseUpsertWithWhereUniqueWithoutUserInput
    | Prisma.NotificationResponseUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.NotificationResponseCreateManyUserInputEnvelope
  set?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  disconnect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  delete?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  connect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  update?:
    | Prisma.NotificationResponseUpdateWithWhereUniqueWithoutUserInput
    | Prisma.NotificationResponseUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?:
    | Prisma.NotificationResponseUpdateManyWithWhereWithoutUserInput
    | Prisma.NotificationResponseUpdateManyWithWhereWithoutUserInput[]
  deleteMany?:
    | Prisma.NotificationResponseScalarWhereInput
    | Prisma.NotificationResponseScalarWhereInput[]
}

export type NotificationResponseUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationResponseCreateWithoutUserInput,
        Prisma.NotificationResponseUncheckedCreateWithoutUserInput
      >
    | Prisma.NotificationResponseCreateWithoutUserInput[]
    | Prisma.NotificationResponseUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.NotificationResponseCreateOrConnectWithoutUserInput
    | Prisma.NotificationResponseCreateOrConnectWithoutUserInput[]
  upsert?:
    | Prisma.NotificationResponseUpsertWithWhereUniqueWithoutUserInput
    | Prisma.NotificationResponseUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.NotificationResponseCreateManyUserInputEnvelope
  set?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  disconnect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  delete?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  connect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  update?:
    | Prisma.NotificationResponseUpdateWithWhereUniqueWithoutUserInput
    | Prisma.NotificationResponseUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?:
    | Prisma.NotificationResponseUpdateManyWithWhereWithoutUserInput
    | Prisma.NotificationResponseUpdateManyWithWhereWithoutUserInput[]
  deleteMany?:
    | Prisma.NotificationResponseScalarWhereInput
    | Prisma.NotificationResponseScalarWhereInput[]
}

export type NotificationResponseCreateNestedManyWithoutNotificationInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationResponseCreateWithoutNotificationInput,
        Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput
      >
    | Prisma.NotificationResponseCreateWithoutNotificationInput[]
    | Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput[]
  connectOrCreate?:
    | Prisma.NotificationResponseCreateOrConnectWithoutNotificationInput
    | Prisma.NotificationResponseCreateOrConnectWithoutNotificationInput[]
  createMany?: Prisma.NotificationResponseCreateManyNotificationInputEnvelope
  connect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
}

export type NotificationResponseUncheckedCreateNestedManyWithoutNotificationInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.NotificationResponseCreateWithoutNotificationInput,
          Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput
        >
      | Prisma.NotificationResponseCreateWithoutNotificationInput[]
      | Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?:
      | Prisma.NotificationResponseCreateOrConnectWithoutNotificationInput
      | Prisma.NotificationResponseCreateOrConnectWithoutNotificationInput[]
    createMany?: Prisma.NotificationResponseCreateManyNotificationInputEnvelope
    connect?:
      | Prisma.NotificationResponseWhereUniqueInput
      | Prisma.NotificationResponseWhereUniqueInput[]
  }

export type NotificationResponseUpdateManyWithoutNotificationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationResponseCreateWithoutNotificationInput,
        Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput
      >
    | Prisma.NotificationResponseCreateWithoutNotificationInput[]
    | Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput[]
  connectOrCreate?:
    | Prisma.NotificationResponseCreateOrConnectWithoutNotificationInput
    | Prisma.NotificationResponseCreateOrConnectWithoutNotificationInput[]
  upsert?:
    | Prisma.NotificationResponseUpsertWithWhereUniqueWithoutNotificationInput
    | Prisma.NotificationResponseUpsertWithWhereUniqueWithoutNotificationInput[]
  createMany?: Prisma.NotificationResponseCreateManyNotificationInputEnvelope
  set?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  disconnect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  delete?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  connect?:
    | Prisma.NotificationResponseWhereUniqueInput
    | Prisma.NotificationResponseWhereUniqueInput[]
  update?:
    | Prisma.NotificationResponseUpdateWithWhereUniqueWithoutNotificationInput
    | Prisma.NotificationResponseUpdateWithWhereUniqueWithoutNotificationInput[]
  updateMany?:
    | Prisma.NotificationResponseUpdateManyWithWhereWithoutNotificationInput
    | Prisma.NotificationResponseUpdateManyWithWhereWithoutNotificationInput[]
  deleteMany?:
    | Prisma.NotificationResponseScalarWhereInput
    | Prisma.NotificationResponseScalarWhereInput[]
}

export type NotificationResponseUncheckedUpdateManyWithoutNotificationNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.NotificationResponseCreateWithoutNotificationInput,
          Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput
        >
      | Prisma.NotificationResponseCreateWithoutNotificationInput[]
      | Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput[]
    connectOrCreate?:
      | Prisma.NotificationResponseCreateOrConnectWithoutNotificationInput
      | Prisma.NotificationResponseCreateOrConnectWithoutNotificationInput[]
    upsert?:
      | Prisma.NotificationResponseUpsertWithWhereUniqueWithoutNotificationInput
      | Prisma.NotificationResponseUpsertWithWhereUniqueWithoutNotificationInput[]
    createMany?: Prisma.NotificationResponseCreateManyNotificationInputEnvelope
    set?:
      | Prisma.NotificationResponseWhereUniqueInput
      | Prisma.NotificationResponseWhereUniqueInput[]
    disconnect?:
      | Prisma.NotificationResponseWhereUniqueInput
      | Prisma.NotificationResponseWhereUniqueInput[]
    delete?:
      | Prisma.NotificationResponseWhereUniqueInput
      | Prisma.NotificationResponseWhereUniqueInput[]
    connect?:
      | Prisma.NotificationResponseWhereUniqueInput
      | Prisma.NotificationResponseWhereUniqueInput[]
    update?:
      | Prisma.NotificationResponseUpdateWithWhereUniqueWithoutNotificationInput
      | Prisma.NotificationResponseUpdateWithWhereUniqueWithoutNotificationInput[]
    updateMany?:
      | Prisma.NotificationResponseUpdateManyWithWhereWithoutNotificationInput
      | Prisma.NotificationResponseUpdateManyWithWhereWithoutNotificationInput[]
    deleteMany?:
      | Prisma.NotificationResponseScalarWhereInput
      | Prisma.NotificationResponseScalarWhereInput[]
  }

export type NotificationResponseCreateWithoutUserInput = {
  id?: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  notification: Prisma.NotificationCreateNestedOneWithoutResponsesInput
}

export type NotificationResponseUncheckedCreateWithoutUserInput = {
  id?: string
  notificationId: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationResponseCreateOrConnectWithoutUserInput = {
  where: Prisma.NotificationResponseWhereUniqueInput
  create: Prisma.XOR<
    Prisma.NotificationResponseCreateWithoutUserInput,
    Prisma.NotificationResponseUncheckedCreateWithoutUserInput
  >
}

export type NotificationResponseCreateManyUserInputEnvelope = {
  data:
    | Prisma.NotificationResponseCreateManyUserInput
    | Prisma.NotificationResponseCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type NotificationResponseUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.NotificationResponseWhereUniqueInput
  update: Prisma.XOR<
    Prisma.NotificationResponseUpdateWithoutUserInput,
    Prisma.NotificationResponseUncheckedUpdateWithoutUserInput
  >
  create: Prisma.XOR<
    Prisma.NotificationResponseCreateWithoutUserInput,
    Prisma.NotificationResponseUncheckedCreateWithoutUserInput
  >
}

export type NotificationResponseUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.NotificationResponseWhereUniqueInput
  data: Prisma.XOR<
    Prisma.NotificationResponseUpdateWithoutUserInput,
    Prisma.NotificationResponseUncheckedUpdateWithoutUserInput
  >
}

export type NotificationResponseUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.NotificationResponseScalarWhereInput
  data: Prisma.XOR<
    Prisma.NotificationResponseUpdateManyMutationInput,
    Prisma.NotificationResponseUncheckedUpdateManyWithoutUserInput
  >
}

export type NotificationResponseScalarWhereInput = {
  AND?:
    | Prisma.NotificationResponseScalarWhereInput
    | Prisma.NotificationResponseScalarWhereInput[]
  OR?: Prisma.NotificationResponseScalarWhereInput[]
  NOT?:
    | Prisma.NotificationResponseScalarWhereInput
    | Prisma.NotificationResponseScalarWhereInput[]
  id?: Prisma.StringFilter<'NotificationResponse'> | string
  notificationId?: Prisma.StringFilter<'NotificationResponse'> | string
  userId?: Prisma.StringFilter<'NotificationResponse'> | string
  status?: Prisma.StringFilter<'NotificationResponse'> | string
  readAt?:
    | Prisma.DateTimeNullableFilter<'NotificationResponse'>
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.DateTimeNullableFilter<'NotificationResponse'>
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFilter<'NotificationResponse'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'NotificationResponse'> | Date | string
}

export type NotificationResponseCreateWithoutNotificationInput = {
  id?: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutNotificationResponsesInput
}

export type NotificationResponseUncheckedCreateWithoutNotificationInput = {
  id?: string
  userId: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationResponseCreateOrConnectWithoutNotificationInput = {
  where: Prisma.NotificationResponseWhereUniqueInput
  create: Prisma.XOR<
    Prisma.NotificationResponseCreateWithoutNotificationInput,
    Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput
  >
}

export type NotificationResponseCreateManyNotificationInputEnvelope = {
  data:
    | Prisma.NotificationResponseCreateManyNotificationInput
    | Prisma.NotificationResponseCreateManyNotificationInput[]
  skipDuplicates?: boolean
}

export type NotificationResponseUpsertWithWhereUniqueWithoutNotificationInput =
  {
    where: Prisma.NotificationResponseWhereUniqueInput
    update: Prisma.XOR<
      Prisma.NotificationResponseUpdateWithoutNotificationInput,
      Prisma.NotificationResponseUncheckedUpdateWithoutNotificationInput
    >
    create: Prisma.XOR<
      Prisma.NotificationResponseCreateWithoutNotificationInput,
      Prisma.NotificationResponseUncheckedCreateWithoutNotificationInput
    >
  }

export type NotificationResponseUpdateWithWhereUniqueWithoutNotificationInput =
  {
    where: Prisma.NotificationResponseWhereUniqueInput
    data: Prisma.XOR<
      Prisma.NotificationResponseUpdateWithoutNotificationInput,
      Prisma.NotificationResponseUncheckedUpdateWithoutNotificationInput
    >
  }

export type NotificationResponseUpdateManyWithWhereWithoutNotificationInput = {
  where: Prisma.NotificationResponseScalarWhereInput
  data: Prisma.XOR<
    Prisma.NotificationResponseUpdateManyMutationInput,
    Prisma.NotificationResponseUncheckedUpdateManyWithoutNotificationInput
  >
}

export type NotificationResponseCreateManyUserInput = {
  id?: string
  notificationId: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationResponseUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notification?: Prisma.NotificationUpdateOneRequiredWithoutResponsesNestedInput
}

export type NotificationResponseUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  notificationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationResponseUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  notificationId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationResponseCreateManyNotificationInput = {
  id?: string
  userId: string
  status?: string
  readAt?: Date | string | null
  dismissedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type NotificationResponseUpdateWithoutNotificationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutNotificationResponsesNestedInput
}

export type NotificationResponseUncheckedUpdateWithoutNotificationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationResponseUncheckedUpdateManyWithoutNotificationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  readAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  dismissedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type NotificationResponseSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    notificationId?: boolean
    userId?: boolean
    status?: boolean
    readAt?: boolean
    dismissedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notification?: boolean | Prisma.NotificationDefaultArgs<ExtArgs>
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['notificationResponse']
>

export type NotificationResponseSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    notificationId?: boolean
    userId?: boolean
    status?: boolean
    readAt?: boolean
    dismissedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notification?: boolean | Prisma.NotificationDefaultArgs<ExtArgs>
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['notificationResponse']
>

export type NotificationResponseSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    notificationId?: boolean
    userId?: boolean
    status?: boolean
    readAt?: boolean
    dismissedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    notification?: boolean | Prisma.NotificationDefaultArgs<ExtArgs>
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['notificationResponse']
>

export type NotificationResponseSelectScalar = {
  id?: boolean
  notificationId?: boolean
  userId?: boolean
  status?: boolean
  readAt?: boolean
  dismissedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type NotificationResponseOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'notificationId'
  | 'userId'
  | 'status'
  | 'readAt'
  | 'dismissedAt'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['notificationResponse']
>
export type NotificationResponseInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  notification?: boolean | Prisma.NotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type NotificationResponseIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  notification?: boolean | Prisma.NotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type NotificationResponseIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  notification?: boolean | Prisma.NotificationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $NotificationResponsePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'NotificationResponse'
  objects: {
    notification: Prisma.$NotificationPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      notificationId: string
      userId: string
      status: string
      readAt: Date | null
      dismissedAt: Date | null
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['notificationResponse']
  >
  composites: {}
}

export type NotificationResponseGetPayload<
  S extends boolean | null | undefined | NotificationResponseDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$NotificationResponsePayload, S>

export type NotificationResponseCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  NotificationResponseFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: NotificationResponseCountAggregateInputType | true
}

export interface NotificationResponseDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['NotificationResponse']
    meta: { name: 'NotificationResponse' }
  }
  /**
   * Find zero or one NotificationResponse that matches the filter.
   * @param {NotificationResponseFindUniqueArgs} args - Arguments to find a NotificationResponse
   * @example
   * // Get one NotificationResponse
   * const notificationResponse = await prisma.notificationResponse.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotificationResponseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, NotificationResponseFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one NotificationResponse that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotificationResponseFindUniqueOrThrowArgs} args - Arguments to find a NotificationResponse
   * @example
   * // Get one NotificationResponse
   * const notificationResponse = await prisma.notificationResponse.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotificationResponseFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      NotificationResponseFindUniqueOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__NotificationResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first NotificationResponse that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationResponseFindFirstArgs} args - Arguments to find a NotificationResponse
   * @example
   * // Get one NotificationResponse
   * const notificationResponse = await prisma.notificationResponse.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotificationResponseFindFirstArgs>(
    args?: Prisma.SelectSubset<T, NotificationResponseFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first NotificationResponse that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationResponseFindFirstOrThrowArgs} args - Arguments to find a NotificationResponse
   * @example
   * // Get one NotificationResponse
   * const notificationResponse = await prisma.notificationResponse.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotificationResponseFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      NotificationResponseFindFirstOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__NotificationResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more NotificationResponses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationResponseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NotificationResponses
   * const notificationResponses = await prisma.notificationResponse.findMany()
   *
   * // Get first 10 NotificationResponses
   * const notificationResponses = await prisma.notificationResponse.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const notificationResponseWithIdOnly = await prisma.notificationResponse.findMany({ select: { id: true } })
   *
   */
  findMany<T extends NotificationResponseFindManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationResponseFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a NotificationResponse.
   * @param {NotificationResponseCreateArgs} args - Arguments to create a NotificationResponse.
   * @example
   * // Create one NotificationResponse
   * const NotificationResponse = await prisma.notificationResponse.create({
   *   data: {
   *     // ... data to create a NotificationResponse
   *   }
   * })
   *
   */
  create<T extends NotificationResponseCreateArgs>(
    args: Prisma.SelectSubset<T, NotificationResponseCreateArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many NotificationResponses.
   * @param {NotificationResponseCreateManyArgs} args - Arguments to create many NotificationResponses.
   * @example
   * // Create many NotificationResponses
   * const notificationResponse = await prisma.notificationResponse.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends NotificationResponseCreateManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationResponseCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many NotificationResponses and returns the data saved in the database.
   * @param {NotificationResponseCreateManyAndReturnArgs} args - Arguments to create many NotificationResponses.
   * @example
   * // Create many NotificationResponses
   * const notificationResponse = await prisma.notificationResponse.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many NotificationResponses and only return the `id`
   * const notificationResponseWithIdOnly = await prisma.notificationResponse.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends NotificationResponseCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      NotificationResponseCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a NotificationResponse.
   * @param {NotificationResponseDeleteArgs} args - Arguments to delete one NotificationResponse.
   * @example
   * // Delete one NotificationResponse
   * const NotificationResponse = await prisma.notificationResponse.delete({
   *   where: {
   *     // ... filter to delete one NotificationResponse
   *   }
   * })
   *
   */
  delete<T extends NotificationResponseDeleteArgs>(
    args: Prisma.SelectSubset<T, NotificationResponseDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one NotificationResponse.
   * @param {NotificationResponseUpdateArgs} args - Arguments to update one NotificationResponse.
   * @example
   * // Update one NotificationResponse
   * const notificationResponse = await prisma.notificationResponse.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends NotificationResponseUpdateArgs>(
    args: Prisma.SelectSubset<T, NotificationResponseUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more NotificationResponses.
   * @param {NotificationResponseDeleteManyArgs} args - Arguments to filter NotificationResponses to delete.
   * @example
   * // Delete a few NotificationResponses
   * const { count } = await prisma.notificationResponse.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends NotificationResponseDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationResponseDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NotificationResponses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationResponseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NotificationResponses
   * const notificationResponse = await prisma.notificationResponse.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends NotificationResponseUpdateManyArgs>(
    args: Prisma.SelectSubset<T, NotificationResponseUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NotificationResponses and returns the data updated in the database.
   * @param {NotificationResponseUpdateManyAndReturnArgs} args - Arguments to update many NotificationResponses.
   * @example
   * // Update many NotificationResponses
   * const notificationResponse = await prisma.notificationResponse.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more NotificationResponses and only return the `id`
   * const notificationResponseWithIdOnly = await prisma.notificationResponse.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends NotificationResponseUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      NotificationResponseUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one NotificationResponse.
   * @param {NotificationResponseUpsertArgs} args - Arguments to update or create a NotificationResponse.
   * @example
   * // Update or create a NotificationResponse
   * const notificationResponse = await prisma.notificationResponse.upsert({
   *   create: {
   *     // ... data to create a NotificationResponse
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NotificationResponse we want to update
   *   }
   * })
   */
  upsert<T extends NotificationResponseUpsertArgs>(
    args: Prisma.SelectSubset<T, NotificationResponseUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationResponsePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of NotificationResponses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationResponseCountArgs} args - Arguments to filter NotificationResponses to count.
   * @example
   * // Count the number of NotificationResponses
   * const count = await prisma.notificationResponse.count({
   *   where: {
   *     // ... the filter for the NotificationResponses we want to count
   *   }
   * })
   **/
  count<T extends NotificationResponseCountArgs>(
    args?: Prisma.Subset<T, NotificationResponseCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            NotificationResponseCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a NotificationResponse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends NotificationResponseAggregateArgs>(
    args: Prisma.Subset<T, NotificationResponseAggregateArgs>
  ): Prisma.PrismaPromise<GetNotificationResponseAggregateType<T>>

  /**
   * Group by NotificationResponse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationResponseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends NotificationResponseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotificationResponseGroupByArgs['orderBy'] }
      : { orderBy?: NotificationResponseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      NotificationResponseGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetNotificationResponseGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationResponse model
   */
  readonly fields: NotificationResponseFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for NotificationResponse.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotificationResponseClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  notification<T extends Prisma.NotificationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.NotificationDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__NotificationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the NotificationResponse model
 */
export interface NotificationResponseFieldRefs {
  readonly id: Prisma.FieldRef<'NotificationResponse', 'String'>
  readonly notificationId: Prisma.FieldRef<'NotificationResponse', 'String'>
  readonly userId: Prisma.FieldRef<'NotificationResponse', 'String'>
  readonly status: Prisma.FieldRef<'NotificationResponse', 'String'>
  readonly readAt: Prisma.FieldRef<'NotificationResponse', 'DateTime'>
  readonly dismissedAt: Prisma.FieldRef<'NotificationResponse', 'DateTime'>
  readonly createdAt: Prisma.FieldRef<'NotificationResponse', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'NotificationResponse', 'DateTime'>
}

// Custom InputTypes
/**
 * NotificationResponse findUnique
 */
export type NotificationResponseFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * Filter, which NotificationResponse to fetch.
   */
  where: Prisma.NotificationResponseWhereUniqueInput
}

/**
 * NotificationResponse findUniqueOrThrow
 */
export type NotificationResponseFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * Filter, which NotificationResponse to fetch.
   */
  where: Prisma.NotificationResponseWhereUniqueInput
}

/**
 * NotificationResponse findFirst
 */
export type NotificationResponseFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * Filter, which NotificationResponse to fetch.
   */
  where?: Prisma.NotificationResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationResponses to fetch.
   */
  orderBy?:
    | Prisma.NotificationResponseOrderByWithRelationInput
    | Prisma.NotificationResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for NotificationResponses.
   */
  cursor?: Prisma.NotificationResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of NotificationResponses.
   */
  distinct?:
    | Prisma.NotificationResponseScalarFieldEnum
    | Prisma.NotificationResponseScalarFieldEnum[]
}

/**
 * NotificationResponse findFirstOrThrow
 */
export type NotificationResponseFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * Filter, which NotificationResponse to fetch.
   */
  where?: Prisma.NotificationResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationResponses to fetch.
   */
  orderBy?:
    | Prisma.NotificationResponseOrderByWithRelationInput
    | Prisma.NotificationResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for NotificationResponses.
   */
  cursor?: Prisma.NotificationResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of NotificationResponses.
   */
  distinct?:
    | Prisma.NotificationResponseScalarFieldEnum
    | Prisma.NotificationResponseScalarFieldEnum[]
}

/**
 * NotificationResponse findMany
 */
export type NotificationResponseFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * Filter, which NotificationResponses to fetch.
   */
  where?: Prisma.NotificationResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationResponses to fetch.
   */
  orderBy?:
    | Prisma.NotificationResponseOrderByWithRelationInput
    | Prisma.NotificationResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing NotificationResponses.
   */
  cursor?: Prisma.NotificationResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationResponses.
   */
  skip?: number
  distinct?:
    | Prisma.NotificationResponseScalarFieldEnum
    | Prisma.NotificationResponseScalarFieldEnum[]
}

/**
 * NotificationResponse create
 */
export type NotificationResponseCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * The data needed to create a NotificationResponse.
   */
  data: Prisma.XOR<
    Prisma.NotificationResponseCreateInput,
    Prisma.NotificationResponseUncheckedCreateInput
  >
}

/**
 * NotificationResponse createMany
 */
export type NotificationResponseCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many NotificationResponses.
   */
  data:
    | Prisma.NotificationResponseCreateManyInput
    | Prisma.NotificationResponseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * NotificationResponse createManyAndReturn
 */
export type NotificationResponseCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * The data used to create many NotificationResponses.
   */
  data:
    | Prisma.NotificationResponseCreateManyInput
    | Prisma.NotificationResponseCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * NotificationResponse update
 */
export type NotificationResponseUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * The data needed to update a NotificationResponse.
   */
  data: Prisma.XOR<
    Prisma.NotificationResponseUpdateInput,
    Prisma.NotificationResponseUncheckedUpdateInput
  >
  /**
   * Choose, which NotificationResponse to update.
   */
  where: Prisma.NotificationResponseWhereUniqueInput
}

/**
 * NotificationResponse updateMany
 */
export type NotificationResponseUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update NotificationResponses.
   */
  data: Prisma.XOR<
    Prisma.NotificationResponseUpdateManyMutationInput,
    Prisma.NotificationResponseUncheckedUpdateManyInput
  >
  /**
   * Filter which NotificationResponses to update
   */
  where?: Prisma.NotificationResponseWhereInput
  /**
   * Limit how many NotificationResponses to update.
   */
  limit?: number
}

/**
 * NotificationResponse updateManyAndReturn
 */
export type NotificationResponseUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * The data used to update NotificationResponses.
   */
  data: Prisma.XOR<
    Prisma.NotificationResponseUpdateManyMutationInput,
    Prisma.NotificationResponseUncheckedUpdateManyInput
  >
  /**
   * Filter which NotificationResponses to update
   */
  where?: Prisma.NotificationResponseWhereInput
  /**
   * Limit how many NotificationResponses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * NotificationResponse upsert
 */
export type NotificationResponseUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * The filter to search for the NotificationResponse to update in case it exists.
   */
  where: Prisma.NotificationResponseWhereUniqueInput
  /**
   * In case the NotificationResponse found by the `where` argument doesn't exist, create a new NotificationResponse with this data.
   */
  create: Prisma.XOR<
    Prisma.NotificationResponseCreateInput,
    Prisma.NotificationResponseUncheckedCreateInput
  >
  /**
   * In case the NotificationResponse was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.NotificationResponseUpdateInput,
    Prisma.NotificationResponseUncheckedUpdateInput
  >
}

/**
 * NotificationResponse delete
 */
export type NotificationResponseDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
  /**
   * Filter which NotificationResponse to delete.
   */
  where: Prisma.NotificationResponseWhereUniqueInput
}

/**
 * NotificationResponse deleteMany
 */
export type NotificationResponseDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which NotificationResponses to delete
   */
  where?: Prisma.NotificationResponseWhereInput
  /**
   * Limit how many NotificationResponses to delete.
   */
  limit?: number
}

/**
 * NotificationResponse without action
 */
export type NotificationResponseDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationResponse
   */
  select?: Prisma.NotificationResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationResponse
   */
  omit?: Prisma.NotificationResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationResponseInclude<ExtArgs> | null
}
