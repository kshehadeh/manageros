/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `UserGithubCredentials` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model UserGithubCredentials
 *
 */
export type UserGithubCredentialsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$UserGithubCredentialsPayload>

export type AggregateUserGithubCredentials = {
  _count: UserGithubCredentialsCountAggregateOutputType | null
  _min: UserGithubCredentialsMinAggregateOutputType | null
  _max: UserGithubCredentialsMaxAggregateOutputType | null
}

export type UserGithubCredentialsMinAggregateOutputType = {
  id: string | null
  userId: string | null
  githubUsername: string | null
  encryptedPat: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserGithubCredentialsMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  githubUsername: string | null
  encryptedPat: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserGithubCredentialsCountAggregateOutputType = {
  id: number
  userId: number
  githubUsername: number
  encryptedPat: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type UserGithubCredentialsMinAggregateInputType = {
  id?: true
  userId?: true
  githubUsername?: true
  encryptedPat?: true
  createdAt?: true
  updatedAt?: true
}

export type UserGithubCredentialsMaxAggregateInputType = {
  id?: true
  userId?: true
  githubUsername?: true
  encryptedPat?: true
  createdAt?: true
  updatedAt?: true
}

export type UserGithubCredentialsCountAggregateInputType = {
  id?: true
  userId?: true
  githubUsername?: true
  encryptedPat?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserGithubCredentialsAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which UserGithubCredentials to aggregate.
   */
  where?: Prisma.UserGithubCredentialsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserGithubCredentials to fetch.
   */
  orderBy?:
    | Prisma.UserGithubCredentialsOrderByWithRelationInput
    | Prisma.UserGithubCredentialsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.UserGithubCredentialsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserGithubCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserGithubCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned UserGithubCredentials
   **/
  _count?: true | UserGithubCredentialsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: UserGithubCredentialsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: UserGithubCredentialsMaxAggregateInputType
}

export type GetUserGithubCredentialsAggregateType<
  T extends UserGithubCredentialsAggregateArgs,
> = {
  [P in keyof T & keyof AggregateUserGithubCredentials]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserGithubCredentials[P]>
    : Prisma.GetScalarType<T[P], AggregateUserGithubCredentials[P]>
}

export type UserGithubCredentialsGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.UserGithubCredentialsWhereInput
  orderBy?:
    | Prisma.UserGithubCredentialsOrderByWithAggregationInput
    | Prisma.UserGithubCredentialsOrderByWithAggregationInput[]
  by:
    | Prisma.UserGithubCredentialsScalarFieldEnum[]
    | Prisma.UserGithubCredentialsScalarFieldEnum
  having?: Prisma.UserGithubCredentialsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserGithubCredentialsCountAggregateInputType | true
  _min?: UserGithubCredentialsMinAggregateInputType
  _max?: UserGithubCredentialsMaxAggregateInputType
}

export type UserGithubCredentialsGroupByOutputType = {
  id: string
  userId: string
  githubUsername: string
  encryptedPat: string
  createdAt: Date
  updatedAt: Date
  _count: UserGithubCredentialsCountAggregateOutputType | null
  _min: UserGithubCredentialsMinAggregateOutputType | null
  _max: UserGithubCredentialsMaxAggregateOutputType | null
}

type GetUserGithubCredentialsGroupByPayload<
  T extends UserGithubCredentialsGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserGithubCredentialsGroupByOutputType, T['by']> & {
      [P in keyof T &
        keyof UserGithubCredentialsGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<
              T[P],
              UserGithubCredentialsGroupByOutputType[P]
            >
        : Prisma.GetScalarType<T[P], UserGithubCredentialsGroupByOutputType[P]>
    }
  >
>

export type UserGithubCredentialsWhereInput = {
  AND?:
    | Prisma.UserGithubCredentialsWhereInput
    | Prisma.UserGithubCredentialsWhereInput[]
  OR?: Prisma.UserGithubCredentialsWhereInput[]
  NOT?:
    | Prisma.UserGithubCredentialsWhereInput
    | Prisma.UserGithubCredentialsWhereInput[]
  id?: Prisma.StringFilter<'UserGithubCredentials'> | string
  userId?: Prisma.StringFilter<'UserGithubCredentials'> | string
  githubUsername?: Prisma.StringFilter<'UserGithubCredentials'> | string
  encryptedPat?: Prisma.StringFilter<'UserGithubCredentials'> | string
  createdAt?: Prisma.DateTimeFilter<'UserGithubCredentials'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'UserGithubCredentials'> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserGithubCredentialsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  encryptedPat?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserGithubCredentialsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    userId?: string
    AND?:
      | Prisma.UserGithubCredentialsWhereInput
      | Prisma.UserGithubCredentialsWhereInput[]
    OR?: Prisma.UserGithubCredentialsWhereInput[]
    NOT?:
      | Prisma.UserGithubCredentialsWhereInput
      | Prisma.UserGithubCredentialsWhereInput[]
    githubUsername?: Prisma.StringFilter<'UserGithubCredentials'> | string
    encryptedPat?: Prisma.StringFilter<'UserGithubCredentials'> | string
    createdAt?: Prisma.DateTimeFilter<'UserGithubCredentials'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'UserGithubCredentials'> | Date | string
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  },
  'id' | 'userId'
>

export type UserGithubCredentialsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  encryptedPat?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserGithubCredentialsCountOrderByAggregateInput
  _max?: Prisma.UserGithubCredentialsMaxOrderByAggregateInput
  _min?: Prisma.UserGithubCredentialsMinOrderByAggregateInput
}

export type UserGithubCredentialsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.UserGithubCredentialsScalarWhereWithAggregatesInput
    | Prisma.UserGithubCredentialsScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserGithubCredentialsScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.UserGithubCredentialsScalarWhereWithAggregatesInput
    | Prisma.UserGithubCredentialsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'UserGithubCredentials'> | string
  userId?: Prisma.StringWithAggregatesFilter<'UserGithubCredentials'> | string
  githubUsername?:
    | Prisma.StringWithAggregatesFilter<'UserGithubCredentials'>
    | string
  encryptedPat?:
    | Prisma.StringWithAggregatesFilter<'UserGithubCredentials'>
    | string
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'UserGithubCredentials'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'UserGithubCredentials'>
    | Date
    | string
}

export type UserGithubCredentialsCreateInput = {
  id?: string
  githubUsername: string
  encryptedPat: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutGithubCredentialsInput
}

export type UserGithubCredentialsUncheckedCreateInput = {
  id?: string
  userId: string
  githubUsername: string
  encryptedPat: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserGithubCredentialsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedPat?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutGithubCredentialsNestedInput
}

export type UserGithubCredentialsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedPat?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserGithubCredentialsCreateManyInput = {
  id?: string
  userId: string
  githubUsername: string
  encryptedPat: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserGithubCredentialsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedPat?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserGithubCredentialsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedPat?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserGithubCredentialsNullableScalarRelationFilter = {
  is?: Prisma.UserGithubCredentialsWhereInput | null
  isNot?: Prisma.UserGithubCredentialsWhereInput | null
}

export type UserGithubCredentialsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  encryptedPat?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserGithubCredentialsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  encryptedPat?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserGithubCredentialsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  encryptedPat?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserGithubCredentialsCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<
    Prisma.UserGithubCredentialsCreateWithoutUserInput,
    Prisma.UserGithubCredentialsUncheckedCreateWithoutUserInput
  >
  connectOrCreate?: Prisma.UserGithubCredentialsCreateOrConnectWithoutUserInput
  connect?: Prisma.UserGithubCredentialsWhereUniqueInput
}

export type UserGithubCredentialsUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<
    Prisma.UserGithubCredentialsCreateWithoutUserInput,
    Prisma.UserGithubCredentialsUncheckedCreateWithoutUserInput
  >
  connectOrCreate?: Prisma.UserGithubCredentialsCreateOrConnectWithoutUserInput
  connect?: Prisma.UserGithubCredentialsWhereUniqueInput
}

export type UserGithubCredentialsUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.UserGithubCredentialsCreateWithoutUserInput,
    Prisma.UserGithubCredentialsUncheckedCreateWithoutUserInput
  >
  connectOrCreate?: Prisma.UserGithubCredentialsCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserGithubCredentialsUpsertWithoutUserInput
  disconnect?: Prisma.UserGithubCredentialsWhereInput | boolean
  delete?: Prisma.UserGithubCredentialsWhereInput | boolean
  connect?: Prisma.UserGithubCredentialsWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.UserGithubCredentialsUpdateToOneWithWhereWithoutUserInput,
      Prisma.UserGithubCredentialsUpdateWithoutUserInput
    >,
    Prisma.UserGithubCredentialsUncheckedUpdateWithoutUserInput
  >
}

export type UserGithubCredentialsUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<
    Prisma.UserGithubCredentialsCreateWithoutUserInput,
    Prisma.UserGithubCredentialsUncheckedCreateWithoutUserInput
  >
  connectOrCreate?: Prisma.UserGithubCredentialsCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserGithubCredentialsUpsertWithoutUserInput
  disconnect?: Prisma.UserGithubCredentialsWhereInput | boolean
  delete?: Prisma.UserGithubCredentialsWhereInput | boolean
  connect?: Prisma.UserGithubCredentialsWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.UserGithubCredentialsUpdateToOneWithWhereWithoutUserInput,
      Prisma.UserGithubCredentialsUpdateWithoutUserInput
    >,
    Prisma.UserGithubCredentialsUncheckedUpdateWithoutUserInput
  >
}

export type UserGithubCredentialsCreateWithoutUserInput = {
  id?: string
  githubUsername: string
  encryptedPat: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserGithubCredentialsUncheckedCreateWithoutUserInput = {
  id?: string
  githubUsername: string
  encryptedPat: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserGithubCredentialsCreateOrConnectWithoutUserInput = {
  where: Prisma.UserGithubCredentialsWhereUniqueInput
  create: Prisma.XOR<
    Prisma.UserGithubCredentialsCreateWithoutUserInput,
    Prisma.UserGithubCredentialsUncheckedCreateWithoutUserInput
  >
}

export type UserGithubCredentialsUpsertWithoutUserInput = {
  update: Prisma.XOR<
    Prisma.UserGithubCredentialsUpdateWithoutUserInput,
    Prisma.UserGithubCredentialsUncheckedUpdateWithoutUserInput
  >
  create: Prisma.XOR<
    Prisma.UserGithubCredentialsCreateWithoutUserInput,
    Prisma.UserGithubCredentialsUncheckedCreateWithoutUserInput
  >
  where?: Prisma.UserGithubCredentialsWhereInput
}

export type UserGithubCredentialsUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserGithubCredentialsWhereInput
  data: Prisma.XOR<
    Prisma.UserGithubCredentialsUpdateWithoutUserInput,
    Prisma.UserGithubCredentialsUncheckedUpdateWithoutUserInput
  >
}

export type UserGithubCredentialsUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedPat?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserGithubCredentialsUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  encryptedPat?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserGithubCredentialsSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    userId?: boolean
    githubUsername?: boolean
    encryptedPat?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['userGithubCredentials']
>

export type UserGithubCredentialsSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    userId?: boolean
    githubUsername?: boolean
    encryptedPat?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['userGithubCredentials']
>

export type UserGithubCredentialsSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    userId?: boolean
    githubUsername?: boolean
    encryptedPat?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['userGithubCredentials']
>

export type UserGithubCredentialsSelectScalar = {
  id?: boolean
  userId?: boolean
  githubUsername?: boolean
  encryptedPat?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserGithubCredentialsOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'userId'
  | 'githubUsername'
  | 'encryptedPat'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['userGithubCredentials']
>
export type UserGithubCredentialsInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserGithubCredentialsIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserGithubCredentialsIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserGithubCredentialsPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'UserGithubCredentials'
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      userId: string
      githubUsername: string
      encryptedPat: string
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['userGithubCredentials']
  >
  composites: {}
}

export type UserGithubCredentialsGetPayload<
  S extends boolean | null | undefined | UserGithubCredentialsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$UserGithubCredentialsPayload, S>

export type UserGithubCredentialsCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  UserGithubCredentialsFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: UserGithubCredentialsCountAggregateInputType | true
}

export interface UserGithubCredentialsDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['UserGithubCredentials']
    meta: { name: 'UserGithubCredentials' }
  }
  /**
   * Find zero or one UserGithubCredentials that matches the filter.
   * @param {UserGithubCredentialsFindUniqueArgs} args - Arguments to find a UserGithubCredentials
   * @example
   * // Get one UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserGithubCredentialsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, UserGithubCredentialsFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__UserGithubCredentialsClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one UserGithubCredentials that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserGithubCredentialsFindUniqueOrThrowArgs} args - Arguments to find a UserGithubCredentials
   * @example
   * // Get one UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserGithubCredentialsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      UserGithubCredentialsFindUniqueOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__UserGithubCredentialsClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first UserGithubCredentials that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGithubCredentialsFindFirstArgs} args - Arguments to find a UserGithubCredentials
   * @example
   * // Get one UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserGithubCredentialsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, UserGithubCredentialsFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__UserGithubCredentialsClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first UserGithubCredentials that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGithubCredentialsFindFirstOrThrowArgs} args - Arguments to find a UserGithubCredentials
   * @example
   * // Get one UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserGithubCredentialsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      UserGithubCredentialsFindFirstOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__UserGithubCredentialsClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more UserGithubCredentials that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGithubCredentialsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.findMany()
   *
   * // Get first 10 UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const userGithubCredentialsWithIdOnly = await prisma.userGithubCredentials.findMany({ select: { id: true } })
   *
   */
  findMany<T extends UserGithubCredentialsFindManyArgs>(
    args?: Prisma.SelectSubset<T, UserGithubCredentialsFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a UserGithubCredentials.
   * @param {UserGithubCredentialsCreateArgs} args - Arguments to create a UserGithubCredentials.
   * @example
   * // Create one UserGithubCredentials
   * const UserGithubCredentials = await prisma.userGithubCredentials.create({
   *   data: {
   *     // ... data to create a UserGithubCredentials
   *   }
   * })
   *
   */
  create<T extends UserGithubCredentialsCreateArgs>(
    args: Prisma.SelectSubset<T, UserGithubCredentialsCreateArgs<ExtArgs>>
  ): Prisma.Prisma__UserGithubCredentialsClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many UserGithubCredentials.
   * @param {UserGithubCredentialsCreateManyArgs} args - Arguments to create many UserGithubCredentials.
   * @example
   * // Create many UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends UserGithubCredentialsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, UserGithubCredentialsCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserGithubCredentials and returns the data saved in the database.
   * @param {UserGithubCredentialsCreateManyAndReturnArgs} args - Arguments to create many UserGithubCredentials.
   * @example
   * // Create many UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many UserGithubCredentials and only return the `id`
   * const userGithubCredentialsWithIdOnly = await prisma.userGithubCredentials.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends UserGithubCredentialsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      UserGithubCredentialsCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a UserGithubCredentials.
   * @param {UserGithubCredentialsDeleteArgs} args - Arguments to delete one UserGithubCredentials.
   * @example
   * // Delete one UserGithubCredentials
   * const UserGithubCredentials = await prisma.userGithubCredentials.delete({
   *   where: {
   *     // ... filter to delete one UserGithubCredentials
   *   }
   * })
   *
   */
  delete<T extends UserGithubCredentialsDeleteArgs>(
    args: Prisma.SelectSubset<T, UserGithubCredentialsDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__UserGithubCredentialsClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one UserGithubCredentials.
   * @param {UserGithubCredentialsUpdateArgs} args - Arguments to update one UserGithubCredentials.
   * @example
   * // Update one UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends UserGithubCredentialsUpdateArgs>(
    args: Prisma.SelectSubset<T, UserGithubCredentialsUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__UserGithubCredentialsClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more UserGithubCredentials.
   * @param {UserGithubCredentialsDeleteManyArgs} args - Arguments to filter UserGithubCredentials to delete.
   * @example
   * // Delete a few UserGithubCredentials
   * const { count } = await prisma.userGithubCredentials.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends UserGithubCredentialsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, UserGithubCredentialsDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserGithubCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGithubCredentialsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends UserGithubCredentialsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, UserGithubCredentialsUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserGithubCredentials and returns the data updated in the database.
   * @param {UserGithubCredentialsUpdateManyAndReturnArgs} args - Arguments to update many UserGithubCredentials.
   * @example
   * // Update many UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more UserGithubCredentials and only return the `id`
   * const userGithubCredentialsWithIdOnly = await prisma.userGithubCredentials.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends UserGithubCredentialsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      UserGithubCredentialsUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one UserGithubCredentials.
   * @param {UserGithubCredentialsUpsertArgs} args - Arguments to update or create a UserGithubCredentials.
   * @example
   * // Update or create a UserGithubCredentials
   * const userGithubCredentials = await prisma.userGithubCredentials.upsert({
   *   create: {
   *     // ... data to create a UserGithubCredentials
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserGithubCredentials we want to update
   *   }
   * })
   */
  upsert<T extends UserGithubCredentialsUpsertArgs>(
    args: Prisma.SelectSubset<T, UserGithubCredentialsUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__UserGithubCredentialsClient<
    runtime.Types.Result.GetResult<
      Prisma.$UserGithubCredentialsPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of UserGithubCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGithubCredentialsCountArgs} args - Arguments to filter UserGithubCredentials to count.
   * @example
   * // Count the number of UserGithubCredentials
   * const count = await prisma.userGithubCredentials.count({
   *   where: {
   *     // ... the filter for the UserGithubCredentials we want to count
   *   }
   * })
   **/
  count<T extends UserGithubCredentialsCountArgs>(
    args?: Prisma.Subset<T, UserGithubCredentialsCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            UserGithubCredentialsCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserGithubCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGithubCredentialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends UserGithubCredentialsAggregateArgs>(
    args: Prisma.Subset<T, UserGithubCredentialsAggregateArgs>
  ): Prisma.PrismaPromise<GetUserGithubCredentialsAggregateType<T>>

  /**
   * Group by UserGithubCredentials.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserGithubCredentialsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends UserGithubCredentialsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserGithubCredentialsGroupByArgs['orderBy'] }
      : { orderBy?: UserGithubCredentialsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      UserGithubCredentialsGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetUserGithubCredentialsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserGithubCredentials model
   */
  readonly fields: UserGithubCredentialsFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for UserGithubCredentials.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserGithubCredentialsClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the UserGithubCredentials model
 */
export interface UserGithubCredentialsFieldRefs {
  readonly id: Prisma.FieldRef<'UserGithubCredentials', 'String'>
  readonly userId: Prisma.FieldRef<'UserGithubCredentials', 'String'>
  readonly githubUsername: Prisma.FieldRef<'UserGithubCredentials', 'String'>
  readonly encryptedPat: Prisma.FieldRef<'UserGithubCredentials', 'String'>
  readonly createdAt: Prisma.FieldRef<'UserGithubCredentials', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'UserGithubCredentials', 'DateTime'>
}

// Custom InputTypes
/**
 * UserGithubCredentials findUnique
 */
export type UserGithubCredentialsFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which UserGithubCredentials to fetch.
   */
  where: Prisma.UserGithubCredentialsWhereUniqueInput
}

/**
 * UserGithubCredentials findUniqueOrThrow
 */
export type UserGithubCredentialsFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which UserGithubCredentials to fetch.
   */
  where: Prisma.UserGithubCredentialsWhereUniqueInput
}

/**
 * UserGithubCredentials findFirst
 */
export type UserGithubCredentialsFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which UserGithubCredentials to fetch.
   */
  where?: Prisma.UserGithubCredentialsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserGithubCredentials to fetch.
   */
  orderBy?:
    | Prisma.UserGithubCredentialsOrderByWithRelationInput
    | Prisma.UserGithubCredentialsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserGithubCredentials.
   */
  cursor?: Prisma.UserGithubCredentialsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserGithubCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserGithubCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserGithubCredentials.
   */
  distinct?:
    | Prisma.UserGithubCredentialsScalarFieldEnum
    | Prisma.UserGithubCredentialsScalarFieldEnum[]
}

/**
 * UserGithubCredentials findFirstOrThrow
 */
export type UserGithubCredentialsFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which UserGithubCredentials to fetch.
   */
  where?: Prisma.UserGithubCredentialsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserGithubCredentials to fetch.
   */
  orderBy?:
    | Prisma.UserGithubCredentialsOrderByWithRelationInput
    | Prisma.UserGithubCredentialsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for UserGithubCredentials.
   */
  cursor?: Prisma.UserGithubCredentialsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserGithubCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserGithubCredentials.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of UserGithubCredentials.
   */
  distinct?:
    | Prisma.UserGithubCredentialsScalarFieldEnum
    | Prisma.UserGithubCredentialsScalarFieldEnum[]
}

/**
 * UserGithubCredentials findMany
 */
export type UserGithubCredentialsFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * Filter, which UserGithubCredentials to fetch.
   */
  where?: Prisma.UserGithubCredentialsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of UserGithubCredentials to fetch.
   */
  orderBy?:
    | Prisma.UserGithubCredentialsOrderByWithRelationInput
    | Prisma.UserGithubCredentialsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing UserGithubCredentials.
   */
  cursor?: Prisma.UserGithubCredentialsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` UserGithubCredentials from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` UserGithubCredentials.
   */
  skip?: number
  distinct?:
    | Prisma.UserGithubCredentialsScalarFieldEnum
    | Prisma.UserGithubCredentialsScalarFieldEnum[]
}

/**
 * UserGithubCredentials create
 */
export type UserGithubCredentialsCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * The data needed to create a UserGithubCredentials.
   */
  data: Prisma.XOR<
    Prisma.UserGithubCredentialsCreateInput,
    Prisma.UserGithubCredentialsUncheckedCreateInput
  >
}

/**
 * UserGithubCredentials createMany
 */
export type UserGithubCredentialsCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many UserGithubCredentials.
   */
  data:
    | Prisma.UserGithubCredentialsCreateManyInput
    | Prisma.UserGithubCredentialsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserGithubCredentials createManyAndReturn
 */
export type UserGithubCredentialsCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * The data used to create many UserGithubCredentials.
   */
  data:
    | Prisma.UserGithubCredentialsCreateManyInput
    | Prisma.UserGithubCredentialsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserGithubCredentials update
 */
export type UserGithubCredentialsUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * The data needed to update a UserGithubCredentials.
   */
  data: Prisma.XOR<
    Prisma.UserGithubCredentialsUpdateInput,
    Prisma.UserGithubCredentialsUncheckedUpdateInput
  >
  /**
   * Choose, which UserGithubCredentials to update.
   */
  where: Prisma.UserGithubCredentialsWhereUniqueInput
}

/**
 * UserGithubCredentials updateMany
 */
export type UserGithubCredentialsUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update UserGithubCredentials.
   */
  data: Prisma.XOR<
    Prisma.UserGithubCredentialsUpdateManyMutationInput,
    Prisma.UserGithubCredentialsUncheckedUpdateManyInput
  >
  /**
   * Filter which UserGithubCredentials to update
   */
  where?: Prisma.UserGithubCredentialsWhereInput
  /**
   * Limit how many UserGithubCredentials to update.
   */
  limit?: number
}

/**
 * UserGithubCredentials updateManyAndReturn
 */
export type UserGithubCredentialsUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * The data used to update UserGithubCredentials.
   */
  data: Prisma.XOR<
    Prisma.UserGithubCredentialsUpdateManyMutationInput,
    Prisma.UserGithubCredentialsUncheckedUpdateManyInput
  >
  /**
   * Filter which UserGithubCredentials to update
   */
  where?: Prisma.UserGithubCredentialsWhereInput
  /**
   * Limit how many UserGithubCredentials to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserGithubCredentials upsert
 */
export type UserGithubCredentialsUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * The filter to search for the UserGithubCredentials to update in case it exists.
   */
  where: Prisma.UserGithubCredentialsWhereUniqueInput
  /**
   * In case the UserGithubCredentials found by the `where` argument doesn't exist, create a new UserGithubCredentials with this data.
   */
  create: Prisma.XOR<
    Prisma.UserGithubCredentialsCreateInput,
    Prisma.UserGithubCredentialsUncheckedCreateInput
  >
  /**
   * In case the UserGithubCredentials was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.UserGithubCredentialsUpdateInput,
    Prisma.UserGithubCredentialsUncheckedUpdateInput
  >
}

/**
 * UserGithubCredentials delete
 */
export type UserGithubCredentialsDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
  /**
   * Filter which UserGithubCredentials to delete.
   */
  where: Prisma.UserGithubCredentialsWhereUniqueInput
}

/**
 * UserGithubCredentials deleteMany
 */
export type UserGithubCredentialsDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which UserGithubCredentials to delete
   */
  where?: Prisma.UserGithubCredentialsWhereInput
  /**
   * Limit how many UserGithubCredentials to delete.
   */
  limit?: number
}

/**
 * UserGithubCredentials without action
 */
export type UserGithubCredentialsDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the UserGithubCredentials
   */
  select?: Prisma.UserGithubCredentialsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserGithubCredentials
   */
  omit?: Prisma.UserGithubCredentialsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserGithubCredentialsInclude<ExtArgs> | null
}
