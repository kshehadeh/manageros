/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `IDPGoal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model IDPGoal
 *
 */
export type IDPGoalModel =
  runtime.Types.Result.DefaultSelection<Prisma.$IDPGoalPayload>

export type AggregateIDPGoal = {
  _count: IDPGoalCountAggregateOutputType | null
  _min: IDPGoalMinAggregateOutputType | null
  _max: IDPGoalMaxAggregateOutputType | null
}

export type IDPGoalMinAggregateOutputType = {
  id: string | null
  idpId: string | null
  title: string | null
  metric: string | null
  target: string | null
  status: string | null
  dueDate: Date | null
}

export type IDPGoalMaxAggregateOutputType = {
  id: string | null
  idpId: string | null
  title: string | null
  metric: string | null
  target: string | null
  status: string | null
  dueDate: Date | null
}

export type IDPGoalCountAggregateOutputType = {
  id: number
  idpId: number
  title: number
  metric: number
  target: number
  status: number
  dueDate: number
  _all: number
}

export type IDPGoalMinAggregateInputType = {
  id?: true
  idpId?: true
  title?: true
  metric?: true
  target?: true
  status?: true
  dueDate?: true
}

export type IDPGoalMaxAggregateInputType = {
  id?: true
  idpId?: true
  title?: true
  metric?: true
  target?: true
  status?: true
  dueDate?: true
}

export type IDPGoalCountAggregateInputType = {
  id?: true
  idpId?: true
  title?: true
  metric?: true
  target?: true
  status?: true
  dueDate?: true
  _all?: true
}

export type IDPGoalAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which IDPGoal to aggregate.
   */
  where?: Prisma.IDPGoalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of IDPGoals to fetch.
   */
  orderBy?:
    | Prisma.IDPGoalOrderByWithRelationInput
    | Prisma.IDPGoalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.IDPGoalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` IDPGoals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` IDPGoals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned IDPGoals
   **/
  _count?: true | IDPGoalCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: IDPGoalMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: IDPGoalMaxAggregateInputType
}

export type GetIDPGoalAggregateType<T extends IDPGoalAggregateArgs> = {
  [P in keyof T & keyof AggregateIDPGoal]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIDPGoal[P]>
    : Prisma.GetScalarType<T[P], AggregateIDPGoal[P]>
}

export type IDPGoalGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.IDPGoalWhereInput
  orderBy?:
    | Prisma.IDPGoalOrderByWithAggregationInput
    | Prisma.IDPGoalOrderByWithAggregationInput[]
  by: Prisma.IDPGoalScalarFieldEnum[] | Prisma.IDPGoalScalarFieldEnum
  having?: Prisma.IDPGoalScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IDPGoalCountAggregateInputType | true
  _min?: IDPGoalMinAggregateInputType
  _max?: IDPGoalMaxAggregateInputType
}

export type IDPGoalGroupByOutputType = {
  id: string
  idpId: string
  title: string
  metric: string | null
  target: string | null
  status: string
  dueDate: Date | null
  _count: IDPGoalCountAggregateOutputType | null
  _min: IDPGoalMinAggregateOutputType | null
  _max: IDPGoalMaxAggregateOutputType | null
}

type GetIDPGoalGroupByPayload<T extends IDPGoalGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<IDPGoalGroupByOutputType, T['by']> & {
        [P in keyof T & keyof IDPGoalGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IDPGoalGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IDPGoalGroupByOutputType[P]>
      }
    >
  >

export type IDPGoalWhereInput = {
  AND?: Prisma.IDPGoalWhereInput | Prisma.IDPGoalWhereInput[]
  OR?: Prisma.IDPGoalWhereInput[]
  NOT?: Prisma.IDPGoalWhereInput | Prisma.IDPGoalWhereInput[]
  id?: Prisma.StringFilter<'IDPGoal'> | string
  idpId?: Prisma.StringFilter<'IDPGoal'> | string
  title?: Prisma.StringFilter<'IDPGoal'> | string
  metric?: Prisma.StringNullableFilter<'IDPGoal'> | string | null
  target?: Prisma.StringNullableFilter<'IDPGoal'> | string | null
  status?: Prisma.StringFilter<'IDPGoal'> | string
  dueDate?: Prisma.DateTimeNullableFilter<'IDPGoal'> | Date | string | null
  idp?: Prisma.XOR<Prisma.IDPScalarRelationFilter, Prisma.IDPWhereInput>
}

export type IDPGoalOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  idpId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  metric?: Prisma.SortOrderInput | Prisma.SortOrder
  target?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  dueDate?: Prisma.SortOrderInput | Prisma.SortOrder
  idp?: Prisma.IDPOrderByWithRelationInput
}

export type IDPGoalWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.IDPGoalWhereInput | Prisma.IDPGoalWhereInput[]
    OR?: Prisma.IDPGoalWhereInput[]
    NOT?: Prisma.IDPGoalWhereInput | Prisma.IDPGoalWhereInput[]
    idpId?: Prisma.StringFilter<'IDPGoal'> | string
    title?: Prisma.StringFilter<'IDPGoal'> | string
    metric?: Prisma.StringNullableFilter<'IDPGoal'> | string | null
    target?: Prisma.StringNullableFilter<'IDPGoal'> | string | null
    status?: Prisma.StringFilter<'IDPGoal'> | string
    dueDate?: Prisma.DateTimeNullableFilter<'IDPGoal'> | Date | string | null
    idp?: Prisma.XOR<Prisma.IDPScalarRelationFilter, Prisma.IDPWhereInput>
  },
  'id'
>

export type IDPGoalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  idpId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  metric?: Prisma.SortOrderInput | Prisma.SortOrder
  target?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  dueDate?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.IDPGoalCountOrderByAggregateInput
  _max?: Prisma.IDPGoalMaxOrderByAggregateInput
  _min?: Prisma.IDPGoalMinOrderByAggregateInput
}

export type IDPGoalScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.IDPGoalScalarWhereWithAggregatesInput
    | Prisma.IDPGoalScalarWhereWithAggregatesInput[]
  OR?: Prisma.IDPGoalScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.IDPGoalScalarWhereWithAggregatesInput
    | Prisma.IDPGoalScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'IDPGoal'> | string
  idpId?: Prisma.StringWithAggregatesFilter<'IDPGoal'> | string
  title?: Prisma.StringWithAggregatesFilter<'IDPGoal'> | string
  metric?: Prisma.StringNullableWithAggregatesFilter<'IDPGoal'> | string | null
  target?: Prisma.StringNullableWithAggregatesFilter<'IDPGoal'> | string | null
  status?: Prisma.StringWithAggregatesFilter<'IDPGoal'> | string
  dueDate?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'IDPGoal'>
    | Date
    | string
    | null
}

export type IDPGoalCreateInput = {
  id?: string
  title: string
  metric?: string | null
  target?: string | null
  status?: string
  dueDate?: Date | string | null
  idp: Prisma.IDPCreateNestedOneWithoutGoalsInput
}

export type IDPGoalUncheckedCreateInput = {
  id?: string
  idpId: string
  title: string
  metric?: string | null
  target?: string | null
  status?: string
  dueDate?: Date | string | null
}

export type IDPGoalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  metric?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  idp?: Prisma.IDPUpdateOneRequiredWithoutGoalsNestedInput
}

export type IDPGoalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  idpId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  metric?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type IDPGoalCreateManyInput = {
  id?: string
  idpId: string
  title: string
  metric?: string | null
  target?: string | null
  status?: string
  dueDate?: Date | string | null
}

export type IDPGoalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  metric?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type IDPGoalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  idpId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  metric?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type IDPGoalListRelationFilter = {
  every?: Prisma.IDPGoalWhereInput
  some?: Prisma.IDPGoalWhereInput
  none?: Prisma.IDPGoalWhereInput
}

export type IDPGoalOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type IDPGoalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  idpId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  metric?: Prisma.SortOrder
  target?: Prisma.SortOrder
  status?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
}

export type IDPGoalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  idpId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  metric?: Prisma.SortOrder
  target?: Prisma.SortOrder
  status?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
}

export type IDPGoalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  idpId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  metric?: Prisma.SortOrder
  target?: Prisma.SortOrder
  status?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
}

export type IDPGoalCreateNestedManyWithoutIdpInput = {
  create?:
    | Prisma.XOR<
        Prisma.IDPGoalCreateWithoutIdpInput,
        Prisma.IDPGoalUncheckedCreateWithoutIdpInput
      >
    | Prisma.IDPGoalCreateWithoutIdpInput[]
    | Prisma.IDPGoalUncheckedCreateWithoutIdpInput[]
  connectOrCreate?:
    | Prisma.IDPGoalCreateOrConnectWithoutIdpInput
    | Prisma.IDPGoalCreateOrConnectWithoutIdpInput[]
  createMany?: Prisma.IDPGoalCreateManyIdpInputEnvelope
  connect?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
}

export type IDPGoalUncheckedCreateNestedManyWithoutIdpInput = {
  create?:
    | Prisma.XOR<
        Prisma.IDPGoalCreateWithoutIdpInput,
        Prisma.IDPGoalUncheckedCreateWithoutIdpInput
      >
    | Prisma.IDPGoalCreateWithoutIdpInput[]
    | Prisma.IDPGoalUncheckedCreateWithoutIdpInput[]
  connectOrCreate?:
    | Prisma.IDPGoalCreateOrConnectWithoutIdpInput
    | Prisma.IDPGoalCreateOrConnectWithoutIdpInput[]
  createMany?: Prisma.IDPGoalCreateManyIdpInputEnvelope
  connect?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
}

export type IDPGoalUpdateManyWithoutIdpNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IDPGoalCreateWithoutIdpInput,
        Prisma.IDPGoalUncheckedCreateWithoutIdpInput
      >
    | Prisma.IDPGoalCreateWithoutIdpInput[]
    | Prisma.IDPGoalUncheckedCreateWithoutIdpInput[]
  connectOrCreate?:
    | Prisma.IDPGoalCreateOrConnectWithoutIdpInput
    | Prisma.IDPGoalCreateOrConnectWithoutIdpInput[]
  upsert?:
    | Prisma.IDPGoalUpsertWithWhereUniqueWithoutIdpInput
    | Prisma.IDPGoalUpsertWithWhereUniqueWithoutIdpInput[]
  createMany?: Prisma.IDPGoalCreateManyIdpInputEnvelope
  set?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
  disconnect?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
  delete?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
  connect?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
  update?:
    | Prisma.IDPGoalUpdateWithWhereUniqueWithoutIdpInput
    | Prisma.IDPGoalUpdateWithWhereUniqueWithoutIdpInput[]
  updateMany?:
    | Prisma.IDPGoalUpdateManyWithWhereWithoutIdpInput
    | Prisma.IDPGoalUpdateManyWithWhereWithoutIdpInput[]
  deleteMany?: Prisma.IDPGoalScalarWhereInput | Prisma.IDPGoalScalarWhereInput[]
}

export type IDPGoalUncheckedUpdateManyWithoutIdpNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IDPGoalCreateWithoutIdpInput,
        Prisma.IDPGoalUncheckedCreateWithoutIdpInput
      >
    | Prisma.IDPGoalCreateWithoutIdpInput[]
    | Prisma.IDPGoalUncheckedCreateWithoutIdpInput[]
  connectOrCreate?:
    | Prisma.IDPGoalCreateOrConnectWithoutIdpInput
    | Prisma.IDPGoalCreateOrConnectWithoutIdpInput[]
  upsert?:
    | Prisma.IDPGoalUpsertWithWhereUniqueWithoutIdpInput
    | Prisma.IDPGoalUpsertWithWhereUniqueWithoutIdpInput[]
  createMany?: Prisma.IDPGoalCreateManyIdpInputEnvelope
  set?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
  disconnect?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
  delete?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
  connect?: Prisma.IDPGoalWhereUniqueInput | Prisma.IDPGoalWhereUniqueInput[]
  update?:
    | Prisma.IDPGoalUpdateWithWhereUniqueWithoutIdpInput
    | Prisma.IDPGoalUpdateWithWhereUniqueWithoutIdpInput[]
  updateMany?:
    | Prisma.IDPGoalUpdateManyWithWhereWithoutIdpInput
    | Prisma.IDPGoalUpdateManyWithWhereWithoutIdpInput[]
  deleteMany?: Prisma.IDPGoalScalarWhereInput | Prisma.IDPGoalScalarWhereInput[]
}

export type IDPGoalCreateWithoutIdpInput = {
  id?: string
  title: string
  metric?: string | null
  target?: string | null
  status?: string
  dueDate?: Date | string | null
}

export type IDPGoalUncheckedCreateWithoutIdpInput = {
  id?: string
  title: string
  metric?: string | null
  target?: string | null
  status?: string
  dueDate?: Date | string | null
}

export type IDPGoalCreateOrConnectWithoutIdpInput = {
  where: Prisma.IDPGoalWhereUniqueInput
  create: Prisma.XOR<
    Prisma.IDPGoalCreateWithoutIdpInput,
    Prisma.IDPGoalUncheckedCreateWithoutIdpInput
  >
}

export type IDPGoalCreateManyIdpInputEnvelope = {
  data: Prisma.IDPGoalCreateManyIdpInput | Prisma.IDPGoalCreateManyIdpInput[]
  skipDuplicates?: boolean
}

export type IDPGoalUpsertWithWhereUniqueWithoutIdpInput = {
  where: Prisma.IDPGoalWhereUniqueInput
  update: Prisma.XOR<
    Prisma.IDPGoalUpdateWithoutIdpInput,
    Prisma.IDPGoalUncheckedUpdateWithoutIdpInput
  >
  create: Prisma.XOR<
    Prisma.IDPGoalCreateWithoutIdpInput,
    Prisma.IDPGoalUncheckedCreateWithoutIdpInput
  >
}

export type IDPGoalUpdateWithWhereUniqueWithoutIdpInput = {
  where: Prisma.IDPGoalWhereUniqueInput
  data: Prisma.XOR<
    Prisma.IDPGoalUpdateWithoutIdpInput,
    Prisma.IDPGoalUncheckedUpdateWithoutIdpInput
  >
}

export type IDPGoalUpdateManyWithWhereWithoutIdpInput = {
  where: Prisma.IDPGoalScalarWhereInput
  data: Prisma.XOR<
    Prisma.IDPGoalUpdateManyMutationInput,
    Prisma.IDPGoalUncheckedUpdateManyWithoutIdpInput
  >
}

export type IDPGoalScalarWhereInput = {
  AND?: Prisma.IDPGoalScalarWhereInput | Prisma.IDPGoalScalarWhereInput[]
  OR?: Prisma.IDPGoalScalarWhereInput[]
  NOT?: Prisma.IDPGoalScalarWhereInput | Prisma.IDPGoalScalarWhereInput[]
  id?: Prisma.StringFilter<'IDPGoal'> | string
  idpId?: Prisma.StringFilter<'IDPGoal'> | string
  title?: Prisma.StringFilter<'IDPGoal'> | string
  metric?: Prisma.StringNullableFilter<'IDPGoal'> | string | null
  target?: Prisma.StringNullableFilter<'IDPGoal'> | string | null
  status?: Prisma.StringFilter<'IDPGoal'> | string
  dueDate?: Prisma.DateTimeNullableFilter<'IDPGoal'> | Date | string | null
}

export type IDPGoalCreateManyIdpInput = {
  id?: string
  title: string
  metric?: string | null
  target?: string | null
  status?: string
  dueDate?: Date | string | null
}

export type IDPGoalUpdateWithoutIdpInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  metric?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type IDPGoalUncheckedUpdateWithoutIdpInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  metric?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type IDPGoalUncheckedUpdateManyWithoutIdpInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  metric?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  target?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type IDPGoalSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    idpId?: boolean
    title?: boolean
    metric?: boolean
    target?: boolean
    status?: boolean
    dueDate?: boolean
    idp?: boolean | Prisma.IDPDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['iDPGoal']
>

export type IDPGoalSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    idpId?: boolean
    title?: boolean
    metric?: boolean
    target?: boolean
    status?: boolean
    dueDate?: boolean
    idp?: boolean | Prisma.IDPDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['iDPGoal']
>

export type IDPGoalSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    idpId?: boolean
    title?: boolean
    metric?: boolean
    target?: boolean
    status?: boolean
    dueDate?: boolean
    idp?: boolean | Prisma.IDPDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['iDPGoal']
>

export type IDPGoalSelectScalar = {
  id?: boolean
  idpId?: boolean
  title?: boolean
  metric?: boolean
  target?: boolean
  status?: boolean
  dueDate?: boolean
}

export type IDPGoalOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'idpId' | 'title' | 'metric' | 'target' | 'status' | 'dueDate',
  ExtArgs['result']['iDPGoal']
>
export type IDPGoalInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  idp?: boolean | Prisma.IDPDefaultArgs<ExtArgs>
}
export type IDPGoalIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  idp?: boolean | Prisma.IDPDefaultArgs<ExtArgs>
}
export type IDPGoalIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  idp?: boolean | Prisma.IDPDefaultArgs<ExtArgs>
}

export type $IDPGoalPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'IDPGoal'
  objects: {
    idp: Prisma.$IDPPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      idpId: string
      title: string
      metric: string | null
      target: string | null
      status: string
      dueDate: Date | null
    },
    ExtArgs['result']['iDPGoal']
  >
  composites: {}
}

export type IDPGoalGetPayload<
  S extends boolean | null | undefined | IDPGoalDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$IDPGoalPayload, S>

export type IDPGoalCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<IDPGoalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: IDPGoalCountAggregateInputType | true
}

export interface IDPGoalDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['IDPGoal']
    meta: { name: 'IDPGoal' }
  }
  /**
   * Find zero or one IDPGoal that matches the filter.
   * @param {IDPGoalFindUniqueArgs} args - Arguments to find a IDPGoal
   * @example
   * // Get one IDPGoal
   * const iDPGoal = await prisma.iDPGoal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IDPGoalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, IDPGoalFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__IDPGoalClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one IDPGoal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IDPGoalFindUniqueOrThrowArgs} args - Arguments to find a IDPGoal
   * @example
   * // Get one IDPGoal
   * const iDPGoal = await prisma.iDPGoal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IDPGoalFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, IDPGoalFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__IDPGoalClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first IDPGoal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPGoalFindFirstArgs} args - Arguments to find a IDPGoal
   * @example
   * // Get one IDPGoal
   * const iDPGoal = await prisma.iDPGoal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IDPGoalFindFirstArgs>(
    args?: Prisma.SelectSubset<T, IDPGoalFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__IDPGoalClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first IDPGoal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPGoalFindFirstOrThrowArgs} args - Arguments to find a IDPGoal
   * @example
   * // Get one IDPGoal
   * const iDPGoal = await prisma.iDPGoal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IDPGoalFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, IDPGoalFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__IDPGoalClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more IDPGoals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPGoalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IDPGoals
   * const iDPGoals = await prisma.iDPGoal.findMany()
   *
   * // Get first 10 IDPGoals
   * const iDPGoals = await prisma.iDPGoal.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const iDPGoalWithIdOnly = await prisma.iDPGoal.findMany({ select: { id: true } })
   *
   */
  findMany<T extends IDPGoalFindManyArgs>(
    args?: Prisma.SelectSubset<T, IDPGoalFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a IDPGoal.
   * @param {IDPGoalCreateArgs} args - Arguments to create a IDPGoal.
   * @example
   * // Create one IDPGoal
   * const IDPGoal = await prisma.iDPGoal.create({
   *   data: {
   *     // ... data to create a IDPGoal
   *   }
   * })
   *
   */
  create<T extends IDPGoalCreateArgs>(
    args: Prisma.SelectSubset<T, IDPGoalCreateArgs<ExtArgs>>
  ): Prisma.Prisma__IDPGoalClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many IDPGoals.
   * @param {IDPGoalCreateManyArgs} args - Arguments to create many IDPGoals.
   * @example
   * // Create many IDPGoals
   * const iDPGoal = await prisma.iDPGoal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends IDPGoalCreateManyArgs>(
    args?: Prisma.SelectSubset<T, IDPGoalCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IDPGoals and returns the data saved in the database.
   * @param {IDPGoalCreateManyAndReturnArgs} args - Arguments to create many IDPGoals.
   * @example
   * // Create many IDPGoals
   * const iDPGoal = await prisma.iDPGoal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many IDPGoals and only return the `id`
   * const iDPGoalWithIdOnly = await prisma.iDPGoal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends IDPGoalCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, IDPGoalCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a IDPGoal.
   * @param {IDPGoalDeleteArgs} args - Arguments to delete one IDPGoal.
   * @example
   * // Delete one IDPGoal
   * const IDPGoal = await prisma.iDPGoal.delete({
   *   where: {
   *     // ... filter to delete one IDPGoal
   *   }
   * })
   *
   */
  delete<T extends IDPGoalDeleteArgs>(
    args: Prisma.SelectSubset<T, IDPGoalDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__IDPGoalClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one IDPGoal.
   * @param {IDPGoalUpdateArgs} args - Arguments to update one IDPGoal.
   * @example
   * // Update one IDPGoal
   * const iDPGoal = await prisma.iDPGoal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends IDPGoalUpdateArgs>(
    args: Prisma.SelectSubset<T, IDPGoalUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__IDPGoalClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more IDPGoals.
   * @param {IDPGoalDeleteManyArgs} args - Arguments to filter IDPGoals to delete.
   * @example
   * // Delete a few IDPGoals
   * const { count } = await prisma.iDPGoal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends IDPGoalDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, IDPGoalDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IDPGoals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPGoalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IDPGoals
   * const iDPGoal = await prisma.iDPGoal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends IDPGoalUpdateManyArgs>(
    args: Prisma.SelectSubset<T, IDPGoalUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IDPGoals and returns the data updated in the database.
   * @param {IDPGoalUpdateManyAndReturnArgs} args - Arguments to update many IDPGoals.
   * @example
   * // Update many IDPGoals
   * const iDPGoal = await prisma.iDPGoal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more IDPGoals and only return the `id`
   * const iDPGoalWithIdOnly = await prisma.iDPGoal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends IDPGoalUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, IDPGoalUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one IDPGoal.
   * @param {IDPGoalUpsertArgs} args - Arguments to update or create a IDPGoal.
   * @example
   * // Update or create a IDPGoal
   * const iDPGoal = await prisma.iDPGoal.upsert({
   *   create: {
   *     // ... data to create a IDPGoal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IDPGoal we want to update
   *   }
   * })
   */
  upsert<T extends IDPGoalUpsertArgs>(
    args: Prisma.SelectSubset<T, IDPGoalUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__IDPGoalClient<
    runtime.Types.Result.GetResult<
      Prisma.$IDPGoalPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of IDPGoals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPGoalCountArgs} args - Arguments to filter IDPGoals to count.
   * @example
   * // Count the number of IDPGoals
   * const count = await prisma.iDPGoal.count({
   *   where: {
   *     // ... the filter for the IDPGoals we want to count
   *   }
   * })
   **/
  count<T extends IDPGoalCountArgs>(
    args?: Prisma.Subset<T, IDPGoalCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IDPGoalCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IDPGoal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPGoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends IDPGoalAggregateArgs>(
    args: Prisma.Subset<T, IDPGoalAggregateArgs>
  ): Prisma.PrismaPromise<GetIDPGoalAggregateType<T>>

  /**
   * Group by IDPGoal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IDPGoalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends IDPGoalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IDPGoalGroupByArgs['orderBy'] }
      : { orderBy?: IDPGoalGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, IDPGoalGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetIDPGoalGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IDPGoal model
   */
  readonly fields: IDPGoalFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for IDPGoal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IDPGoalClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  idp<T extends Prisma.IDPDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.IDPDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__IDPClient<
    | runtime.Types.Result.GetResult<
        Prisma.$IDPPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the IDPGoal model
 */
export interface IDPGoalFieldRefs {
  readonly id: Prisma.FieldRef<'IDPGoal', 'String'>
  readonly idpId: Prisma.FieldRef<'IDPGoal', 'String'>
  readonly title: Prisma.FieldRef<'IDPGoal', 'String'>
  readonly metric: Prisma.FieldRef<'IDPGoal', 'String'>
  readonly target: Prisma.FieldRef<'IDPGoal', 'String'>
  readonly status: Prisma.FieldRef<'IDPGoal', 'String'>
  readonly dueDate: Prisma.FieldRef<'IDPGoal', 'DateTime'>
}

// Custom InputTypes
/**
 * IDPGoal findUnique
 */
export type IDPGoalFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * Filter, which IDPGoal to fetch.
   */
  where: Prisma.IDPGoalWhereUniqueInput
}

/**
 * IDPGoal findUniqueOrThrow
 */
export type IDPGoalFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * Filter, which IDPGoal to fetch.
   */
  where: Prisma.IDPGoalWhereUniqueInput
}

/**
 * IDPGoal findFirst
 */
export type IDPGoalFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * Filter, which IDPGoal to fetch.
   */
  where?: Prisma.IDPGoalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of IDPGoals to fetch.
   */
  orderBy?:
    | Prisma.IDPGoalOrderByWithRelationInput
    | Prisma.IDPGoalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for IDPGoals.
   */
  cursor?: Prisma.IDPGoalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` IDPGoals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` IDPGoals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of IDPGoals.
   */
  distinct?: Prisma.IDPGoalScalarFieldEnum | Prisma.IDPGoalScalarFieldEnum[]
}

/**
 * IDPGoal findFirstOrThrow
 */
export type IDPGoalFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * Filter, which IDPGoal to fetch.
   */
  where?: Prisma.IDPGoalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of IDPGoals to fetch.
   */
  orderBy?:
    | Prisma.IDPGoalOrderByWithRelationInput
    | Prisma.IDPGoalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for IDPGoals.
   */
  cursor?: Prisma.IDPGoalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` IDPGoals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` IDPGoals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of IDPGoals.
   */
  distinct?: Prisma.IDPGoalScalarFieldEnum | Prisma.IDPGoalScalarFieldEnum[]
}

/**
 * IDPGoal findMany
 */
export type IDPGoalFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * Filter, which IDPGoals to fetch.
   */
  where?: Prisma.IDPGoalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of IDPGoals to fetch.
   */
  orderBy?:
    | Prisma.IDPGoalOrderByWithRelationInput
    | Prisma.IDPGoalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing IDPGoals.
   */
  cursor?: Prisma.IDPGoalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` IDPGoals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` IDPGoals.
   */
  skip?: number
  distinct?: Prisma.IDPGoalScalarFieldEnum | Prisma.IDPGoalScalarFieldEnum[]
}

/**
 * IDPGoal create
 */
export type IDPGoalCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * The data needed to create a IDPGoal.
   */
  data: Prisma.XOR<
    Prisma.IDPGoalCreateInput,
    Prisma.IDPGoalUncheckedCreateInput
  >
}

/**
 * IDPGoal createMany
 */
export type IDPGoalCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many IDPGoals.
   */
  data: Prisma.IDPGoalCreateManyInput | Prisma.IDPGoalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IDPGoal createManyAndReturn
 */
export type IDPGoalCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * The data used to create many IDPGoals.
   */
  data: Prisma.IDPGoalCreateManyInput | Prisma.IDPGoalCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * IDPGoal update
 */
export type IDPGoalUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * The data needed to update a IDPGoal.
   */
  data: Prisma.XOR<
    Prisma.IDPGoalUpdateInput,
    Prisma.IDPGoalUncheckedUpdateInput
  >
  /**
   * Choose, which IDPGoal to update.
   */
  where: Prisma.IDPGoalWhereUniqueInput
}

/**
 * IDPGoal updateMany
 */
export type IDPGoalUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update IDPGoals.
   */
  data: Prisma.XOR<
    Prisma.IDPGoalUpdateManyMutationInput,
    Prisma.IDPGoalUncheckedUpdateManyInput
  >
  /**
   * Filter which IDPGoals to update
   */
  where?: Prisma.IDPGoalWhereInput
  /**
   * Limit how many IDPGoals to update.
   */
  limit?: number
}

/**
 * IDPGoal updateManyAndReturn
 */
export type IDPGoalUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * The data used to update IDPGoals.
   */
  data: Prisma.XOR<
    Prisma.IDPGoalUpdateManyMutationInput,
    Prisma.IDPGoalUncheckedUpdateManyInput
  >
  /**
   * Filter which IDPGoals to update
   */
  where?: Prisma.IDPGoalWhereInput
  /**
   * Limit how many IDPGoals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * IDPGoal upsert
 */
export type IDPGoalUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * The filter to search for the IDPGoal to update in case it exists.
   */
  where: Prisma.IDPGoalWhereUniqueInput
  /**
   * In case the IDPGoal found by the `where` argument doesn't exist, create a new IDPGoal with this data.
   */
  create: Prisma.XOR<
    Prisma.IDPGoalCreateInput,
    Prisma.IDPGoalUncheckedCreateInput
  >
  /**
   * In case the IDPGoal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.IDPGoalUpdateInput,
    Prisma.IDPGoalUncheckedUpdateInput
  >
}

/**
 * IDPGoal delete
 */
export type IDPGoalDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
  /**
   * Filter which IDPGoal to delete.
   */
  where: Prisma.IDPGoalWhereUniqueInput
}

/**
 * IDPGoal deleteMany
 */
export type IDPGoalDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which IDPGoals to delete
   */
  where?: Prisma.IDPGoalWhereInput
  /**
   * Limit how many IDPGoals to delete.
   */
  limit?: number
}

/**
 * IDPGoal without action
 */
export type IDPGoalDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IDPGoal
   */
  select?: Prisma.IDPGoalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IDPGoal
   */
  omit?: Prisma.IDPGoalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IDPGoalInclude<ExtArgs> | null
}
