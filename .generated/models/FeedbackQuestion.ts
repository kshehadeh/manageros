/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `FeedbackQuestion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model FeedbackQuestion
 *
 */
export type FeedbackQuestionModel =
  runtime.Types.Result.DefaultSelection<Prisma.$FeedbackQuestionPayload>

export type AggregateFeedbackQuestion = {
  _count: FeedbackQuestionCountAggregateOutputType | null
  _avg: FeedbackQuestionAvgAggregateOutputType | null
  _sum: FeedbackQuestionSumAggregateOutputType | null
  _min: FeedbackQuestionMinAggregateOutputType | null
  _max: FeedbackQuestionMaxAggregateOutputType | null
}

export type FeedbackQuestionAvgAggregateOutputType = {
  sortOrder: number | null
}

export type FeedbackQuestionSumAggregateOutputType = {
  sortOrder: number | null
}

export type FeedbackQuestionMinAggregateOutputType = {
  id: string | null
  templateId: string | null
  question: string | null
  type: string | null
  required: boolean | null
  sortOrder: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackQuestionMaxAggregateOutputType = {
  id: string | null
  templateId: string | null
  question: string | null
  type: string | null
  required: boolean | null
  sortOrder: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackQuestionCountAggregateOutputType = {
  id: number
  templateId: number
  question: number
  type: number
  required: number
  options: number
  sortOrder: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type FeedbackQuestionAvgAggregateInputType = {
  sortOrder?: true
}

export type FeedbackQuestionSumAggregateInputType = {
  sortOrder?: true
}

export type FeedbackQuestionMinAggregateInputType = {
  id?: true
  templateId?: true
  question?: true
  type?: true
  required?: true
  sortOrder?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackQuestionMaxAggregateInputType = {
  id?: true
  templateId?: true
  question?: true
  type?: true
  required?: true
  sortOrder?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackQuestionCountAggregateInputType = {
  id?: true
  templateId?: true
  question?: true
  type?: true
  required?: true
  options?: true
  sortOrder?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FeedbackQuestionAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FeedbackQuestion to aggregate.
   */
  where?: Prisma.FeedbackQuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackQuestions to fetch.
   */
  orderBy?:
    | Prisma.FeedbackQuestionOrderByWithRelationInput
    | Prisma.FeedbackQuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FeedbackQuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackQuestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackQuestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned FeedbackQuestions
   **/
  _count?: true | FeedbackQuestionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: FeedbackQuestionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: FeedbackQuestionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FeedbackQuestionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FeedbackQuestionMaxAggregateInputType
}

export type GetFeedbackQuestionAggregateType<
  T extends FeedbackQuestionAggregateArgs,
> = {
  [P in keyof T & keyof AggregateFeedbackQuestion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeedbackQuestion[P]>
    : Prisma.GetScalarType<T[P], AggregateFeedbackQuestion[P]>
}

export type FeedbackQuestionGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeedbackQuestionWhereInput
  orderBy?:
    | Prisma.FeedbackQuestionOrderByWithAggregationInput
    | Prisma.FeedbackQuestionOrderByWithAggregationInput[]
  by:
    | Prisma.FeedbackQuestionScalarFieldEnum[]
    | Prisma.FeedbackQuestionScalarFieldEnum
  having?: Prisma.FeedbackQuestionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeedbackQuestionCountAggregateInputType | true
  _avg?: FeedbackQuestionAvgAggregateInputType
  _sum?: FeedbackQuestionSumAggregateInputType
  _min?: FeedbackQuestionMinAggregateInputType
  _max?: FeedbackQuestionMaxAggregateInputType
}

export type FeedbackQuestionGroupByOutputType = {
  id: string
  templateId: string
  question: string
  type: string
  required: boolean
  options: runtime.JsonValue | null
  sortOrder: number
  createdAt: Date
  updatedAt: Date
  _count: FeedbackQuestionCountAggregateOutputType | null
  _avg: FeedbackQuestionAvgAggregateOutputType | null
  _sum: FeedbackQuestionSumAggregateOutputType | null
  _min: FeedbackQuestionMinAggregateOutputType | null
  _max: FeedbackQuestionMaxAggregateOutputType | null
}

type GetFeedbackQuestionGroupByPayload<T extends FeedbackQuestionGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<FeedbackQuestionGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof FeedbackQuestionGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeedbackQuestionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeedbackQuestionGroupByOutputType[P]>
      }
    >
  >

export type FeedbackQuestionWhereInput = {
  AND?: Prisma.FeedbackQuestionWhereInput | Prisma.FeedbackQuestionWhereInput[]
  OR?: Prisma.FeedbackQuestionWhereInput[]
  NOT?: Prisma.FeedbackQuestionWhereInput | Prisma.FeedbackQuestionWhereInput[]
  id?: Prisma.StringFilter<'FeedbackQuestion'> | string
  templateId?: Prisma.StringFilter<'FeedbackQuestion'> | string
  question?: Prisma.StringFilter<'FeedbackQuestion'> | string
  type?: Prisma.StringFilter<'FeedbackQuestion'> | string
  required?: Prisma.BoolFilter<'FeedbackQuestion'> | boolean
  options?: Prisma.JsonNullableFilter<'FeedbackQuestion'>
  sortOrder?: Prisma.IntFilter<'FeedbackQuestion'> | number
  createdAt?: Prisma.DateTimeFilter<'FeedbackQuestion'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'FeedbackQuestion'> | Date | string
  template?: Prisma.XOR<
    Prisma.FeedbackTemplateScalarRelationFilter,
    Prisma.FeedbackTemplateWhereInput
  >
}

export type FeedbackQuestionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  templateId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  options?: Prisma.SortOrderInput | Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  template?: Prisma.FeedbackTemplateOrderByWithRelationInput
}

export type FeedbackQuestionWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?:
      | Prisma.FeedbackQuestionWhereInput
      | Prisma.FeedbackQuestionWhereInput[]
    OR?: Prisma.FeedbackQuestionWhereInput[]
    NOT?:
      | Prisma.FeedbackQuestionWhereInput
      | Prisma.FeedbackQuestionWhereInput[]
    templateId?: Prisma.StringFilter<'FeedbackQuestion'> | string
    question?: Prisma.StringFilter<'FeedbackQuestion'> | string
    type?: Prisma.StringFilter<'FeedbackQuestion'> | string
    required?: Prisma.BoolFilter<'FeedbackQuestion'> | boolean
    options?: Prisma.JsonNullableFilter<'FeedbackQuestion'>
    sortOrder?: Prisma.IntFilter<'FeedbackQuestion'> | number
    createdAt?: Prisma.DateTimeFilter<'FeedbackQuestion'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'FeedbackQuestion'> | Date | string
    template?: Prisma.XOR<
      Prisma.FeedbackTemplateScalarRelationFilter,
      Prisma.FeedbackTemplateWhereInput
    >
  },
  'id'
>

export type FeedbackQuestionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  templateId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  options?: Prisma.SortOrderInput | Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FeedbackQuestionCountOrderByAggregateInput
  _avg?: Prisma.FeedbackQuestionAvgOrderByAggregateInput
  _max?: Prisma.FeedbackQuestionMaxOrderByAggregateInput
  _min?: Prisma.FeedbackQuestionMinOrderByAggregateInput
  _sum?: Prisma.FeedbackQuestionSumOrderByAggregateInput
}

export type FeedbackQuestionScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FeedbackQuestionScalarWhereWithAggregatesInput
    | Prisma.FeedbackQuestionScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeedbackQuestionScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.FeedbackQuestionScalarWhereWithAggregatesInput
    | Prisma.FeedbackQuestionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'FeedbackQuestion'> | string
  templateId?: Prisma.StringWithAggregatesFilter<'FeedbackQuestion'> | string
  question?: Prisma.StringWithAggregatesFilter<'FeedbackQuestion'> | string
  type?: Prisma.StringWithAggregatesFilter<'FeedbackQuestion'> | string
  required?: Prisma.BoolWithAggregatesFilter<'FeedbackQuestion'> | boolean
  options?: Prisma.JsonNullableWithAggregatesFilter<'FeedbackQuestion'>
  sortOrder?: Prisma.IntWithAggregatesFilter<'FeedbackQuestion'> | number
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackQuestion'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackQuestion'>
    | Date
    | string
}

export type FeedbackQuestionCreateInput = {
  id?: string
  question: string
  type?: string
  required?: boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  template: Prisma.FeedbackTemplateCreateNestedOneWithoutQuestionsInput
}

export type FeedbackQuestionUncheckedCreateInput = {
  id?: string
  templateId: string
  question: string
  type?: string
  required?: boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackQuestionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  template?: Prisma.FeedbackTemplateUpdateOneRequiredWithoutQuestionsNestedInput
}

export type FeedbackQuestionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackQuestionCreateManyInput = {
  id?: string
  templateId: string
  question: string
  type?: string
  required?: boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackQuestionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackQuestionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackQuestionListRelationFilter = {
  every?: Prisma.FeedbackQuestionWhereInput
  some?: Prisma.FeedbackQuestionWhereInput
  none?: Prisma.FeedbackQuestionWhereInput
}

export type FeedbackQuestionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeedbackQuestionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  templateId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  options?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackQuestionAvgOrderByAggregateInput = {
  sortOrder?: Prisma.SortOrder
}

export type FeedbackQuestionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  templateId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackQuestionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  templateId?: Prisma.SortOrder
  question?: Prisma.SortOrder
  type?: Prisma.SortOrder
  required?: Prisma.SortOrder
  sortOrder?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackQuestionSumOrderByAggregateInput = {
  sortOrder?: Prisma.SortOrder
}

export type FeedbackQuestionCreateNestedManyWithoutTemplateInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackQuestionCreateWithoutTemplateInput,
        Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput
      >
    | Prisma.FeedbackQuestionCreateWithoutTemplateInput[]
    | Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput[]
  connectOrCreate?:
    | Prisma.FeedbackQuestionCreateOrConnectWithoutTemplateInput
    | Prisma.FeedbackQuestionCreateOrConnectWithoutTemplateInput[]
  createMany?: Prisma.FeedbackQuestionCreateManyTemplateInputEnvelope
  connect?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
}

export type FeedbackQuestionUncheckedCreateNestedManyWithoutTemplateInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackQuestionCreateWithoutTemplateInput,
        Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput
      >
    | Prisma.FeedbackQuestionCreateWithoutTemplateInput[]
    | Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput[]
  connectOrCreate?:
    | Prisma.FeedbackQuestionCreateOrConnectWithoutTemplateInput
    | Prisma.FeedbackQuestionCreateOrConnectWithoutTemplateInput[]
  createMany?: Prisma.FeedbackQuestionCreateManyTemplateInputEnvelope
  connect?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
}

export type FeedbackQuestionUpdateManyWithoutTemplateNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackQuestionCreateWithoutTemplateInput,
        Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput
      >
    | Prisma.FeedbackQuestionCreateWithoutTemplateInput[]
    | Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput[]
  connectOrCreate?:
    | Prisma.FeedbackQuestionCreateOrConnectWithoutTemplateInput
    | Prisma.FeedbackQuestionCreateOrConnectWithoutTemplateInput[]
  upsert?:
    | Prisma.FeedbackQuestionUpsertWithWhereUniqueWithoutTemplateInput
    | Prisma.FeedbackQuestionUpsertWithWhereUniqueWithoutTemplateInput[]
  createMany?: Prisma.FeedbackQuestionCreateManyTemplateInputEnvelope
  set?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
  update?:
    | Prisma.FeedbackQuestionUpdateWithWhereUniqueWithoutTemplateInput
    | Prisma.FeedbackQuestionUpdateWithWhereUniqueWithoutTemplateInput[]
  updateMany?:
    | Prisma.FeedbackQuestionUpdateManyWithWhereWithoutTemplateInput
    | Prisma.FeedbackQuestionUpdateManyWithWhereWithoutTemplateInput[]
  deleteMany?:
    | Prisma.FeedbackQuestionScalarWhereInput
    | Prisma.FeedbackQuestionScalarWhereInput[]
}

export type FeedbackQuestionUncheckedUpdateManyWithoutTemplateNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackQuestionCreateWithoutTemplateInput,
        Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput
      >
    | Prisma.FeedbackQuestionCreateWithoutTemplateInput[]
    | Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput[]
  connectOrCreate?:
    | Prisma.FeedbackQuestionCreateOrConnectWithoutTemplateInput
    | Prisma.FeedbackQuestionCreateOrConnectWithoutTemplateInput[]
  upsert?:
    | Prisma.FeedbackQuestionUpsertWithWhereUniqueWithoutTemplateInput
    | Prisma.FeedbackQuestionUpsertWithWhereUniqueWithoutTemplateInput[]
  createMany?: Prisma.FeedbackQuestionCreateManyTemplateInputEnvelope
  set?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackQuestionWhereUniqueInput
    | Prisma.FeedbackQuestionWhereUniqueInput[]
  update?:
    | Prisma.FeedbackQuestionUpdateWithWhereUniqueWithoutTemplateInput
    | Prisma.FeedbackQuestionUpdateWithWhereUniqueWithoutTemplateInput[]
  updateMany?:
    | Prisma.FeedbackQuestionUpdateManyWithWhereWithoutTemplateInput
    | Prisma.FeedbackQuestionUpdateManyWithWhereWithoutTemplateInput[]
  deleteMany?:
    | Prisma.FeedbackQuestionScalarWhereInput
    | Prisma.FeedbackQuestionScalarWhereInput[]
}

export type FeedbackQuestionCreateWithoutTemplateInput = {
  id?: string
  question: string
  type?: string
  required?: boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackQuestionUncheckedCreateWithoutTemplateInput = {
  id?: string
  question: string
  type?: string
  required?: boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackQuestionCreateOrConnectWithoutTemplateInput = {
  where: Prisma.FeedbackQuestionWhereUniqueInput
  create: Prisma.XOR<
    Prisma.FeedbackQuestionCreateWithoutTemplateInput,
    Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput
  >
}

export type FeedbackQuestionCreateManyTemplateInputEnvelope = {
  data:
    | Prisma.FeedbackQuestionCreateManyTemplateInput
    | Prisma.FeedbackQuestionCreateManyTemplateInput[]
  skipDuplicates?: boolean
}

export type FeedbackQuestionUpsertWithWhereUniqueWithoutTemplateInput = {
  where: Prisma.FeedbackQuestionWhereUniqueInput
  update: Prisma.XOR<
    Prisma.FeedbackQuestionUpdateWithoutTemplateInput,
    Prisma.FeedbackQuestionUncheckedUpdateWithoutTemplateInput
  >
  create: Prisma.XOR<
    Prisma.FeedbackQuestionCreateWithoutTemplateInput,
    Prisma.FeedbackQuestionUncheckedCreateWithoutTemplateInput
  >
}

export type FeedbackQuestionUpdateWithWhereUniqueWithoutTemplateInput = {
  where: Prisma.FeedbackQuestionWhereUniqueInput
  data: Prisma.XOR<
    Prisma.FeedbackQuestionUpdateWithoutTemplateInput,
    Prisma.FeedbackQuestionUncheckedUpdateWithoutTemplateInput
  >
}

export type FeedbackQuestionUpdateManyWithWhereWithoutTemplateInput = {
  where: Prisma.FeedbackQuestionScalarWhereInput
  data: Prisma.XOR<
    Prisma.FeedbackQuestionUpdateManyMutationInput,
    Prisma.FeedbackQuestionUncheckedUpdateManyWithoutTemplateInput
  >
}

export type FeedbackQuestionScalarWhereInput = {
  AND?:
    | Prisma.FeedbackQuestionScalarWhereInput
    | Prisma.FeedbackQuestionScalarWhereInput[]
  OR?: Prisma.FeedbackQuestionScalarWhereInput[]
  NOT?:
    | Prisma.FeedbackQuestionScalarWhereInput
    | Prisma.FeedbackQuestionScalarWhereInput[]
  id?: Prisma.StringFilter<'FeedbackQuestion'> | string
  templateId?: Prisma.StringFilter<'FeedbackQuestion'> | string
  question?: Prisma.StringFilter<'FeedbackQuestion'> | string
  type?: Prisma.StringFilter<'FeedbackQuestion'> | string
  required?: Prisma.BoolFilter<'FeedbackQuestion'> | boolean
  options?: Prisma.JsonNullableFilter<'FeedbackQuestion'>
  sortOrder?: Prisma.IntFilter<'FeedbackQuestion'> | number
  createdAt?: Prisma.DateTimeFilter<'FeedbackQuestion'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'FeedbackQuestion'> | Date | string
}

export type FeedbackQuestionCreateManyTemplateInput = {
  id?: string
  question: string
  type?: string
  required?: boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackQuestionUpdateWithoutTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackQuestionUncheckedUpdateWithoutTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackQuestionUncheckedUpdateManyWithoutTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  question?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  required?: Prisma.BoolFieldUpdateOperationsInput | boolean
  options?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  sortOrder?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackQuestionSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    templateId?: boolean
    question?: boolean
    type?: boolean
    required?: boolean
    options?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    template?: boolean | Prisma.FeedbackTemplateDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackQuestion']
>

export type FeedbackQuestionSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    templateId?: boolean
    question?: boolean
    type?: boolean
    required?: boolean
    options?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    template?: boolean | Prisma.FeedbackTemplateDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackQuestion']
>

export type FeedbackQuestionSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    templateId?: boolean
    question?: boolean
    type?: boolean
    required?: boolean
    options?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    template?: boolean | Prisma.FeedbackTemplateDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackQuestion']
>

export type FeedbackQuestionSelectScalar = {
  id?: boolean
  templateId?: boolean
  question?: boolean
  type?: boolean
  required?: boolean
  options?: boolean
  sortOrder?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FeedbackQuestionOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'templateId'
  | 'question'
  | 'type'
  | 'required'
  | 'options'
  | 'sortOrder'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['feedbackQuestion']
>
export type FeedbackQuestionInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  template?: boolean | Prisma.FeedbackTemplateDefaultArgs<ExtArgs>
}
export type FeedbackQuestionIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  template?: boolean | Prisma.FeedbackTemplateDefaultArgs<ExtArgs>
}
export type FeedbackQuestionIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  template?: boolean | Prisma.FeedbackTemplateDefaultArgs<ExtArgs>
}

export type $FeedbackQuestionPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'FeedbackQuestion'
  objects: {
    template: Prisma.$FeedbackTemplatePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      templateId: string
      question: string
      type: string
      required: boolean
      options: runtime.JsonValue | null
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['feedbackQuestion']
  >
  composites: {}
}

export type FeedbackQuestionGetPayload<
  S extends boolean | null | undefined | FeedbackQuestionDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$FeedbackQuestionPayload, S>

export type FeedbackQuestionCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  FeedbackQuestionFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: FeedbackQuestionCountAggregateInputType | true
}

export interface FeedbackQuestionDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['FeedbackQuestion']
    meta: { name: 'FeedbackQuestion' }
  }
  /**
   * Find zero or one FeedbackQuestion that matches the filter.
   * @param {FeedbackQuestionFindUniqueArgs} args - Arguments to find a FeedbackQuestion
   * @example
   * // Get one FeedbackQuestion
   * const feedbackQuestion = await prisma.feedbackQuestion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeedbackQuestionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FeedbackQuestionFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one FeedbackQuestion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeedbackQuestionFindUniqueOrThrowArgs} args - Arguments to find a FeedbackQuestion
   * @example
   * // Get one FeedbackQuestion
   * const feedbackQuestion = await prisma.feedbackQuestion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeedbackQuestionFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FeedbackQuestionFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first FeedbackQuestion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackQuestionFindFirstArgs} args - Arguments to find a FeedbackQuestion
   * @example
   * // Get one FeedbackQuestion
   * const feedbackQuestion = await prisma.feedbackQuestion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeedbackQuestionFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FeedbackQuestionFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first FeedbackQuestion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackQuestionFindFirstOrThrowArgs} args - Arguments to find a FeedbackQuestion
   * @example
   * // Get one FeedbackQuestion
   * const feedbackQuestion = await prisma.feedbackQuestion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeedbackQuestionFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FeedbackQuestionFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more FeedbackQuestions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeedbackQuestions
   * const feedbackQuestions = await prisma.feedbackQuestion.findMany()
   *
   * // Get first 10 FeedbackQuestions
   * const feedbackQuestions = await prisma.feedbackQuestion.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const feedbackQuestionWithIdOnly = await prisma.feedbackQuestion.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FeedbackQuestionFindManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackQuestionFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a FeedbackQuestion.
   * @param {FeedbackQuestionCreateArgs} args - Arguments to create a FeedbackQuestion.
   * @example
   * // Create one FeedbackQuestion
   * const FeedbackQuestion = await prisma.feedbackQuestion.create({
   *   data: {
   *     // ... data to create a FeedbackQuestion
   *   }
   * })
   *
   */
  create<T extends FeedbackQuestionCreateArgs>(
    args: Prisma.SelectSubset<T, FeedbackQuestionCreateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many FeedbackQuestions.
   * @param {FeedbackQuestionCreateManyArgs} args - Arguments to create many FeedbackQuestions.
   * @example
   * // Create many FeedbackQuestions
   * const feedbackQuestion = await prisma.feedbackQuestion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FeedbackQuestionCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackQuestionCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeedbackQuestions and returns the data saved in the database.
   * @param {FeedbackQuestionCreateManyAndReturnArgs} args - Arguments to create many FeedbackQuestions.
   * @example
   * // Create many FeedbackQuestions
   * const feedbackQuestion = await prisma.feedbackQuestion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many FeedbackQuestions and only return the `id`
   * const feedbackQuestionWithIdOnly = await prisma.feedbackQuestion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FeedbackQuestionCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      FeedbackQuestionCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a FeedbackQuestion.
   * @param {FeedbackQuestionDeleteArgs} args - Arguments to delete one FeedbackQuestion.
   * @example
   * // Delete one FeedbackQuestion
   * const FeedbackQuestion = await prisma.feedbackQuestion.delete({
   *   where: {
   *     // ... filter to delete one FeedbackQuestion
   *   }
   * })
   *
   */
  delete<T extends FeedbackQuestionDeleteArgs>(
    args: Prisma.SelectSubset<T, FeedbackQuestionDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one FeedbackQuestion.
   * @param {FeedbackQuestionUpdateArgs} args - Arguments to update one FeedbackQuestion.
   * @example
   * // Update one FeedbackQuestion
   * const feedbackQuestion = await prisma.feedbackQuestion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FeedbackQuestionUpdateArgs>(
    args: Prisma.SelectSubset<T, FeedbackQuestionUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more FeedbackQuestions.
   * @param {FeedbackQuestionDeleteManyArgs} args - Arguments to filter FeedbackQuestions to delete.
   * @example
   * // Delete a few FeedbackQuestions
   * const { count } = await prisma.feedbackQuestion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FeedbackQuestionDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackQuestionDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackQuestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackQuestionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeedbackQuestions
   * const feedbackQuestion = await prisma.feedbackQuestion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FeedbackQuestionUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FeedbackQuestionUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackQuestions and returns the data updated in the database.
   * @param {FeedbackQuestionUpdateManyAndReturnArgs} args - Arguments to update many FeedbackQuestions.
   * @example
   * // Update many FeedbackQuestions
   * const feedbackQuestion = await prisma.feedbackQuestion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more FeedbackQuestions and only return the `id`
   * const feedbackQuestionWithIdOnly = await prisma.feedbackQuestion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FeedbackQuestionUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      FeedbackQuestionUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one FeedbackQuestion.
   * @param {FeedbackQuestionUpsertArgs} args - Arguments to update or create a FeedbackQuestion.
   * @example
   * // Update or create a FeedbackQuestion
   * const feedbackQuestion = await prisma.feedbackQuestion.upsert({
   *   create: {
   *     // ... data to create a FeedbackQuestion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeedbackQuestion we want to update
   *   }
   * })
   */
  upsert<T extends FeedbackQuestionUpsertArgs>(
    args: Prisma.SelectSubset<T, FeedbackQuestionUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackQuestionClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackQuestionPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of FeedbackQuestions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackQuestionCountArgs} args - Arguments to filter FeedbackQuestions to count.
   * @example
   * // Count the number of FeedbackQuestions
   * const count = await prisma.feedbackQuestion.count({
   *   where: {
   *     // ... the filter for the FeedbackQuestions we want to count
   *   }
   * })
   **/
  count<T extends FeedbackQuestionCountArgs>(
    args?: Prisma.Subset<T, FeedbackQuestionCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            FeedbackQuestionCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeedbackQuestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FeedbackQuestionAggregateArgs>(
    args: Prisma.Subset<T, FeedbackQuestionAggregateArgs>
  ): Prisma.PrismaPromise<GetFeedbackQuestionAggregateType<T>>

  /**
   * Group by FeedbackQuestion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackQuestionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FeedbackQuestionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeedbackQuestionGroupByArgs['orderBy'] }
      : { orderBy?: FeedbackQuestionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      FeedbackQuestionGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetFeedbackQuestionGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackQuestion model
   */
  readonly fields: FeedbackQuestionFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for FeedbackQuestion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeedbackQuestionClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  template<T extends Prisma.FeedbackTemplateDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeedbackTemplateDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    | runtime.Types.Result.GetResult<
        Prisma.$FeedbackTemplatePayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the FeedbackQuestion model
 */
export interface FeedbackQuestionFieldRefs {
  readonly id: Prisma.FieldRef<'FeedbackQuestion', 'String'>
  readonly templateId: Prisma.FieldRef<'FeedbackQuestion', 'String'>
  readonly question: Prisma.FieldRef<'FeedbackQuestion', 'String'>
  readonly type: Prisma.FieldRef<'FeedbackQuestion', 'String'>
  readonly required: Prisma.FieldRef<'FeedbackQuestion', 'Boolean'>
  readonly options: Prisma.FieldRef<'FeedbackQuestion', 'Json'>
  readonly sortOrder: Prisma.FieldRef<'FeedbackQuestion', 'Int'>
  readonly createdAt: Prisma.FieldRef<'FeedbackQuestion', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'FeedbackQuestion', 'DateTime'>
}

// Custom InputTypes
/**
 * FeedbackQuestion findUnique
 */
export type FeedbackQuestionFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackQuestion to fetch.
   */
  where: Prisma.FeedbackQuestionWhereUniqueInput
}

/**
 * FeedbackQuestion findUniqueOrThrow
 */
export type FeedbackQuestionFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackQuestion to fetch.
   */
  where: Prisma.FeedbackQuestionWhereUniqueInput
}

/**
 * FeedbackQuestion findFirst
 */
export type FeedbackQuestionFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackQuestion to fetch.
   */
  where?: Prisma.FeedbackQuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackQuestions to fetch.
   */
  orderBy?:
    | Prisma.FeedbackQuestionOrderByWithRelationInput
    | Prisma.FeedbackQuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FeedbackQuestions.
   */
  cursor?: Prisma.FeedbackQuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackQuestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackQuestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FeedbackQuestions.
   */
  distinct?:
    | Prisma.FeedbackQuestionScalarFieldEnum
    | Prisma.FeedbackQuestionScalarFieldEnum[]
}

/**
 * FeedbackQuestion findFirstOrThrow
 */
export type FeedbackQuestionFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackQuestion to fetch.
   */
  where?: Prisma.FeedbackQuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackQuestions to fetch.
   */
  orderBy?:
    | Prisma.FeedbackQuestionOrderByWithRelationInput
    | Prisma.FeedbackQuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FeedbackQuestions.
   */
  cursor?: Prisma.FeedbackQuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackQuestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackQuestions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FeedbackQuestions.
   */
  distinct?:
    | Prisma.FeedbackQuestionScalarFieldEnum
    | Prisma.FeedbackQuestionScalarFieldEnum[]
}

/**
 * FeedbackQuestion findMany
 */
export type FeedbackQuestionFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackQuestions to fetch.
   */
  where?: Prisma.FeedbackQuestionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackQuestions to fetch.
   */
  orderBy?:
    | Prisma.FeedbackQuestionOrderByWithRelationInput
    | Prisma.FeedbackQuestionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing FeedbackQuestions.
   */
  cursor?: Prisma.FeedbackQuestionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackQuestions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackQuestions.
   */
  skip?: number
  distinct?:
    | Prisma.FeedbackQuestionScalarFieldEnum
    | Prisma.FeedbackQuestionScalarFieldEnum[]
}

/**
 * FeedbackQuestion create
 */
export type FeedbackQuestionCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * The data needed to create a FeedbackQuestion.
   */
  data: Prisma.XOR<
    Prisma.FeedbackQuestionCreateInput,
    Prisma.FeedbackQuestionUncheckedCreateInput
  >
}

/**
 * FeedbackQuestion createMany
 */
export type FeedbackQuestionCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many FeedbackQuestions.
   */
  data:
    | Prisma.FeedbackQuestionCreateManyInput
    | Prisma.FeedbackQuestionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeedbackQuestion createManyAndReturn
 */
export type FeedbackQuestionCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * The data used to create many FeedbackQuestions.
   */
  data:
    | Prisma.FeedbackQuestionCreateManyInput
    | Prisma.FeedbackQuestionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackQuestion update
 */
export type FeedbackQuestionUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * The data needed to update a FeedbackQuestion.
   */
  data: Prisma.XOR<
    Prisma.FeedbackQuestionUpdateInput,
    Prisma.FeedbackQuestionUncheckedUpdateInput
  >
  /**
   * Choose, which FeedbackQuestion to update.
   */
  where: Prisma.FeedbackQuestionWhereUniqueInput
}

/**
 * FeedbackQuestion updateMany
 */
export type FeedbackQuestionUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update FeedbackQuestions.
   */
  data: Prisma.XOR<
    Prisma.FeedbackQuestionUpdateManyMutationInput,
    Prisma.FeedbackQuestionUncheckedUpdateManyInput
  >
  /**
   * Filter which FeedbackQuestions to update
   */
  where?: Prisma.FeedbackQuestionWhereInput
  /**
   * Limit how many FeedbackQuestions to update.
   */
  limit?: number
}

/**
 * FeedbackQuestion updateManyAndReturn
 */
export type FeedbackQuestionUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * The data used to update FeedbackQuestions.
   */
  data: Prisma.XOR<
    Prisma.FeedbackQuestionUpdateManyMutationInput,
    Prisma.FeedbackQuestionUncheckedUpdateManyInput
  >
  /**
   * Filter which FeedbackQuestions to update
   */
  where?: Prisma.FeedbackQuestionWhereInput
  /**
   * Limit how many FeedbackQuestions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackQuestion upsert
 */
export type FeedbackQuestionUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * The filter to search for the FeedbackQuestion to update in case it exists.
   */
  where: Prisma.FeedbackQuestionWhereUniqueInput
  /**
   * In case the FeedbackQuestion found by the `where` argument doesn't exist, create a new FeedbackQuestion with this data.
   */
  create: Prisma.XOR<
    Prisma.FeedbackQuestionCreateInput,
    Prisma.FeedbackQuestionUncheckedCreateInput
  >
  /**
   * In case the FeedbackQuestion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.FeedbackQuestionUpdateInput,
    Prisma.FeedbackQuestionUncheckedUpdateInput
  >
}

/**
 * FeedbackQuestion delete
 */
export type FeedbackQuestionDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  /**
   * Filter which FeedbackQuestion to delete.
   */
  where: Prisma.FeedbackQuestionWhereUniqueInput
}

/**
 * FeedbackQuestion deleteMany
 */
export type FeedbackQuestionDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FeedbackQuestions to delete
   */
  where?: Prisma.FeedbackQuestionWhereInput
  /**
   * Limit how many FeedbackQuestions to delete.
   */
  limit?: number
}

/**
 * FeedbackQuestion without action
 */
export type FeedbackQuestionDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
}
