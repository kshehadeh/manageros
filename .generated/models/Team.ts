/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Team` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model Team
 *
 */
export type TeamModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TeamPayload>

export type AggregateTeam = {
  _count: TeamCountAggregateOutputType | null
  _min: TeamMinAggregateOutputType | null
  _max: TeamMaxAggregateOutputType | null
}

export type TeamMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  avatar: string | null
  organizationId: string | null
  parentId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TeamMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  avatar: string | null
  organizationId: string | null
  parentId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TeamCountAggregateOutputType = {
  id: number
  name: number
  description: number
  avatar: number
  organizationId: number
  parentId: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type TeamMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  avatar?: true
  organizationId?: true
  parentId?: true
  createdAt?: true
  updatedAt?: true
}

export type TeamMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  avatar?: true
  organizationId?: true
  parentId?: true
  createdAt?: true
  updatedAt?: true
}

export type TeamCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  avatar?: true
  organizationId?: true
  parentId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TeamAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Team to aggregate.
   */
  where?: Prisma.TeamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Teams to fetch.
   */
  orderBy?:
    | Prisma.TeamOrderByWithRelationInput
    | Prisma.TeamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TeamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Teams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Teams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Teams
   **/
  _count?: true | TeamCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TeamMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TeamMaxAggregateInputType
}

export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
  [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeam[P]>
    : Prisma.GetScalarType<T[P], AggregateTeam[P]>
}

export type TeamGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TeamWhereInput
  orderBy?:
    | Prisma.TeamOrderByWithAggregationInput
    | Prisma.TeamOrderByWithAggregationInput[]
  by: Prisma.TeamScalarFieldEnum[] | Prisma.TeamScalarFieldEnum
  having?: Prisma.TeamScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeamCountAggregateInputType | true
  _min?: TeamMinAggregateInputType
  _max?: TeamMaxAggregateInputType
}

export type TeamGroupByOutputType = {
  id: string
  name: string
  description: string | null
  avatar: string | null
  organizationId: string
  parentId: string | null
  createdAt: Date
  updatedAt: Date
  _count: TeamCountAggregateOutputType | null
  _min: TeamMinAggregateOutputType | null
  _max: TeamMaxAggregateOutputType | null
}

type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeamGroupByOutputType, T['by']> & {
      [P in keyof T & keyof TeamGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TeamGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TeamGroupByOutputType[P]>
    }
  >
>

export type TeamWhereInput = {
  AND?: Prisma.TeamWhereInput | Prisma.TeamWhereInput[]
  OR?: Prisma.TeamWhereInput[]
  NOT?: Prisma.TeamWhereInput | Prisma.TeamWhereInput[]
  id?: Prisma.StringFilter<'Team'> | string
  name?: Prisma.StringFilter<'Team'> | string
  description?: Prisma.StringNullableFilter<'Team'> | string | null
  avatar?: Prisma.StringNullableFilter<'Team'> | string | null
  organizationId?: Prisma.StringFilter<'Team'> | string
  parentId?: Prisma.StringNullableFilter<'Team'> | string | null
  createdAt?: Prisma.DateTimeFilter<'Team'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'Team'> | Date | string
  organization?: Prisma.XOR<
    Prisma.OrganizationScalarRelationFilter,
    Prisma.OrganizationWhereInput
  >
  parent?: Prisma.XOR<
    Prisma.TeamNullableScalarRelationFilter,
    Prisma.TeamWhereInput
  > | null
  children?: Prisma.TeamListRelationFilter
  people?: Prisma.PersonListRelationFilter
  initiatives?: Prisma.InitiativeListRelationFilter
  meetings?: Prisma.MeetingListRelationFilter
}

export type TeamOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  parent?: Prisma.TeamOrderByWithRelationInput
  children?: Prisma.TeamOrderByRelationAggregateInput
  people?: Prisma.PersonOrderByRelationAggregateInput
  initiatives?: Prisma.InitiativeOrderByRelationAggregateInput
  meetings?: Prisma.MeetingOrderByRelationAggregateInput
}

export type TeamWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.TeamWhereInput | Prisma.TeamWhereInput[]
    OR?: Prisma.TeamWhereInput[]
    NOT?: Prisma.TeamWhereInput | Prisma.TeamWhereInput[]
    name?: Prisma.StringFilter<'Team'> | string
    description?: Prisma.StringNullableFilter<'Team'> | string | null
    avatar?: Prisma.StringNullableFilter<'Team'> | string | null
    organizationId?: Prisma.StringFilter<'Team'> | string
    parentId?: Prisma.StringNullableFilter<'Team'> | string | null
    createdAt?: Prisma.DateTimeFilter<'Team'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'Team'> | Date | string
    organization?: Prisma.XOR<
      Prisma.OrganizationScalarRelationFilter,
      Prisma.OrganizationWhereInput
    >
    parent?: Prisma.XOR<
      Prisma.TeamNullableScalarRelationFilter,
      Prisma.TeamWhereInput
    > | null
    children?: Prisma.TeamListRelationFilter
    people?: Prisma.PersonListRelationFilter
    initiatives?: Prisma.InitiativeListRelationFilter
    meetings?: Prisma.MeetingListRelationFilter
  },
  'id'
>

export type TeamOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TeamCountOrderByAggregateInput
  _max?: Prisma.TeamMaxOrderByAggregateInput
  _min?: Prisma.TeamMinOrderByAggregateInput
}

export type TeamScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TeamScalarWhereWithAggregatesInput
    | Prisma.TeamScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeamScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.TeamScalarWhereWithAggregatesInput
    | Prisma.TeamScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'Team'> | string
  name?: Prisma.StringWithAggregatesFilter<'Team'> | string
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'Team'>
    | string
    | null
  avatar?: Prisma.StringNullableWithAggregatesFilter<'Team'> | string | null
  organizationId?: Prisma.StringWithAggregatesFilter<'Team'> | string
  parentId?: Prisma.StringNullableWithAggregatesFilter<'Team'> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Team'> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Team'> | Date | string
}

export type TeamCreateInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutTeamsInput
  parent?: Prisma.TeamCreateNestedOneWithoutChildrenInput
  children?: Prisma.TeamCreateNestedManyWithoutParentInput
  people?: Prisma.PersonCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutTeamInput
}

export type TeamUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  organizationId: string
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.TeamUncheckedCreateNestedManyWithoutParentInput
  people?: Prisma.PersonUncheckedCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeUncheckedCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutTeamInput
}

export type TeamUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeamsNestedInput
  parent?: Prisma.TeamUpdateOneWithoutChildrenNestedInput
  children?: Prisma.TeamUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.TeamUncheckedUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUncheckedUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUncheckedUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutTeamNestedInput
}

export type TeamCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  organizationId: string
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeamUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeamUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeamListRelationFilter = {
  every?: Prisma.TeamWhereInput
  some?: Prisma.TeamWhereInput
  none?: Prisma.TeamWhereInput
}

export type TeamOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TeamNullableScalarRelationFilter = {
  is?: Prisma.TeamWhereInput | null
  isNot?: Prisma.TeamWhereInput | null
}

export type TeamCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeamMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeamMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TeamCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamCreateWithoutOrganizationInput,
        Prisma.TeamUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.TeamCreateWithoutOrganizationInput[]
    | Prisma.TeamUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.TeamCreateOrConnectWithoutOrganizationInput
    | Prisma.TeamCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.TeamCreateManyOrganizationInputEnvelope
  connect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
}

export type TeamUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamCreateWithoutOrganizationInput,
        Prisma.TeamUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.TeamCreateWithoutOrganizationInput[]
    | Prisma.TeamUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.TeamCreateOrConnectWithoutOrganizationInput
    | Prisma.TeamCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.TeamCreateManyOrganizationInputEnvelope
  connect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
}

export type TeamUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamCreateWithoutOrganizationInput,
        Prisma.TeamUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.TeamCreateWithoutOrganizationInput[]
    | Prisma.TeamUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.TeamCreateOrConnectWithoutOrganizationInput
    | Prisma.TeamCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.TeamUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.TeamUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.TeamCreateManyOrganizationInputEnvelope
  set?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  disconnect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  delete?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  connect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  update?:
    | Prisma.TeamUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.TeamUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.TeamUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.TeamUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.TeamScalarWhereInput | Prisma.TeamScalarWhereInput[]
}

export type TeamUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamCreateWithoutOrganizationInput,
        Prisma.TeamUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.TeamCreateWithoutOrganizationInput[]
    | Prisma.TeamUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.TeamCreateOrConnectWithoutOrganizationInput
    | Prisma.TeamCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.TeamUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.TeamUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.TeamCreateManyOrganizationInputEnvelope
  set?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  disconnect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  delete?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  connect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  update?:
    | Prisma.TeamUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.TeamUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.TeamUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.TeamUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.TeamScalarWhereInput | Prisma.TeamScalarWhereInput[]
}

export type TeamCreateNestedOneWithoutChildrenInput = {
  create?: Prisma.XOR<
    Prisma.TeamCreateWithoutChildrenInput,
    Prisma.TeamUncheckedCreateWithoutChildrenInput
  >
  connectOrCreate?: Prisma.TeamCreateOrConnectWithoutChildrenInput
  connect?: Prisma.TeamWhereUniqueInput
}

export type TeamCreateNestedManyWithoutParentInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamCreateWithoutParentInput,
        Prisma.TeamUncheckedCreateWithoutParentInput
      >
    | Prisma.TeamCreateWithoutParentInput[]
    | Prisma.TeamUncheckedCreateWithoutParentInput[]
  connectOrCreate?:
    | Prisma.TeamCreateOrConnectWithoutParentInput
    | Prisma.TeamCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.TeamCreateManyParentInputEnvelope
  connect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
}

export type TeamUncheckedCreateNestedManyWithoutParentInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamCreateWithoutParentInput,
        Prisma.TeamUncheckedCreateWithoutParentInput
      >
    | Prisma.TeamCreateWithoutParentInput[]
    | Prisma.TeamUncheckedCreateWithoutParentInput[]
  connectOrCreate?:
    | Prisma.TeamCreateOrConnectWithoutParentInput
    | Prisma.TeamCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.TeamCreateManyParentInputEnvelope
  connect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
}

export type TeamUpdateOneWithoutChildrenNestedInput = {
  create?: Prisma.XOR<
    Prisma.TeamCreateWithoutChildrenInput,
    Prisma.TeamUncheckedCreateWithoutChildrenInput
  >
  connectOrCreate?: Prisma.TeamCreateOrConnectWithoutChildrenInput
  upsert?: Prisma.TeamUpsertWithoutChildrenInput
  disconnect?: Prisma.TeamWhereInput | boolean
  delete?: Prisma.TeamWhereInput | boolean
  connect?: Prisma.TeamWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TeamUpdateToOneWithWhereWithoutChildrenInput,
      Prisma.TeamUpdateWithoutChildrenInput
    >,
    Prisma.TeamUncheckedUpdateWithoutChildrenInput
  >
}

export type TeamUpdateManyWithoutParentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamCreateWithoutParentInput,
        Prisma.TeamUncheckedCreateWithoutParentInput
      >
    | Prisma.TeamCreateWithoutParentInput[]
    | Prisma.TeamUncheckedCreateWithoutParentInput[]
  connectOrCreate?:
    | Prisma.TeamCreateOrConnectWithoutParentInput
    | Prisma.TeamCreateOrConnectWithoutParentInput[]
  upsert?:
    | Prisma.TeamUpsertWithWhereUniqueWithoutParentInput
    | Prisma.TeamUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.TeamCreateManyParentInputEnvelope
  set?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  disconnect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  delete?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  connect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  update?:
    | Prisma.TeamUpdateWithWhereUniqueWithoutParentInput
    | Prisma.TeamUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?:
    | Prisma.TeamUpdateManyWithWhereWithoutParentInput
    | Prisma.TeamUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.TeamScalarWhereInput | Prisma.TeamScalarWhereInput[]
}

export type TeamUncheckedUpdateManyWithoutParentNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TeamCreateWithoutParentInput,
        Prisma.TeamUncheckedCreateWithoutParentInput
      >
    | Prisma.TeamCreateWithoutParentInput[]
    | Prisma.TeamUncheckedCreateWithoutParentInput[]
  connectOrCreate?:
    | Prisma.TeamCreateOrConnectWithoutParentInput
    | Prisma.TeamCreateOrConnectWithoutParentInput[]
  upsert?:
    | Prisma.TeamUpsertWithWhereUniqueWithoutParentInput
    | Prisma.TeamUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.TeamCreateManyParentInputEnvelope
  set?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  disconnect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  delete?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  connect?: Prisma.TeamWhereUniqueInput | Prisma.TeamWhereUniqueInput[]
  update?:
    | Prisma.TeamUpdateWithWhereUniqueWithoutParentInput
    | Prisma.TeamUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?:
    | Prisma.TeamUpdateManyWithWhereWithoutParentInput
    | Prisma.TeamUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.TeamScalarWhereInput | Prisma.TeamScalarWhereInput[]
}

export type TeamCreateNestedOneWithoutPeopleInput = {
  create?: Prisma.XOR<
    Prisma.TeamCreateWithoutPeopleInput,
    Prisma.TeamUncheckedCreateWithoutPeopleInput
  >
  connectOrCreate?: Prisma.TeamCreateOrConnectWithoutPeopleInput
  connect?: Prisma.TeamWhereUniqueInput
}

export type TeamUpdateOneWithoutPeopleNestedInput = {
  create?: Prisma.XOR<
    Prisma.TeamCreateWithoutPeopleInput,
    Prisma.TeamUncheckedCreateWithoutPeopleInput
  >
  connectOrCreate?: Prisma.TeamCreateOrConnectWithoutPeopleInput
  upsert?: Prisma.TeamUpsertWithoutPeopleInput
  disconnect?: Prisma.TeamWhereInput | boolean
  delete?: Prisma.TeamWhereInput | boolean
  connect?: Prisma.TeamWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TeamUpdateToOneWithWhereWithoutPeopleInput,
      Prisma.TeamUpdateWithoutPeopleInput
    >,
    Prisma.TeamUncheckedUpdateWithoutPeopleInput
  >
}

export type TeamCreateNestedOneWithoutInitiativesInput = {
  create?: Prisma.XOR<
    Prisma.TeamCreateWithoutInitiativesInput,
    Prisma.TeamUncheckedCreateWithoutInitiativesInput
  >
  connectOrCreate?: Prisma.TeamCreateOrConnectWithoutInitiativesInput
  connect?: Prisma.TeamWhereUniqueInput
}

export type TeamUpdateOneWithoutInitiativesNestedInput = {
  create?: Prisma.XOR<
    Prisma.TeamCreateWithoutInitiativesInput,
    Prisma.TeamUncheckedCreateWithoutInitiativesInput
  >
  connectOrCreate?: Prisma.TeamCreateOrConnectWithoutInitiativesInput
  upsert?: Prisma.TeamUpsertWithoutInitiativesInput
  disconnect?: Prisma.TeamWhereInput | boolean
  delete?: Prisma.TeamWhereInput | boolean
  connect?: Prisma.TeamWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TeamUpdateToOneWithWhereWithoutInitiativesInput,
      Prisma.TeamUpdateWithoutInitiativesInput
    >,
    Prisma.TeamUncheckedUpdateWithoutInitiativesInput
  >
}

export type TeamCreateNestedOneWithoutMeetingsInput = {
  create?: Prisma.XOR<
    Prisma.TeamCreateWithoutMeetingsInput,
    Prisma.TeamUncheckedCreateWithoutMeetingsInput
  >
  connectOrCreate?: Prisma.TeamCreateOrConnectWithoutMeetingsInput
  connect?: Prisma.TeamWhereUniqueInput
}

export type TeamUpdateOneWithoutMeetingsNestedInput = {
  create?: Prisma.XOR<
    Prisma.TeamCreateWithoutMeetingsInput,
    Prisma.TeamUncheckedCreateWithoutMeetingsInput
  >
  connectOrCreate?: Prisma.TeamCreateOrConnectWithoutMeetingsInput
  upsert?: Prisma.TeamUpsertWithoutMeetingsInput
  disconnect?: Prisma.TeamWhereInput | boolean
  delete?: Prisma.TeamWhereInput | boolean
  connect?: Prisma.TeamWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.TeamUpdateToOneWithWhereWithoutMeetingsInput,
      Prisma.TeamUpdateWithoutMeetingsInput
    >,
    Prisma.TeamUncheckedUpdateWithoutMeetingsInput
  >
}

export type TeamCreateWithoutOrganizationInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  parent?: Prisma.TeamCreateNestedOneWithoutChildrenInput
  children?: Prisma.TeamCreateNestedManyWithoutParentInput
  people?: Prisma.PersonCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutTeamInput
}

export type TeamUncheckedCreateWithoutOrganizationInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.TeamUncheckedCreateNestedManyWithoutParentInput
  people?: Prisma.PersonUncheckedCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeUncheckedCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.TeamWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutOrganizationInput,
    Prisma.TeamUncheckedCreateWithoutOrganizationInput
  >
}

export type TeamCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.TeamCreateManyOrganizationInput
    | Prisma.TeamCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type TeamUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.TeamWhereUniqueInput
  update: Prisma.XOR<
    Prisma.TeamUpdateWithoutOrganizationInput,
    Prisma.TeamUncheckedUpdateWithoutOrganizationInput
  >
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutOrganizationInput,
    Prisma.TeamUncheckedCreateWithoutOrganizationInput
  >
}

export type TeamUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.TeamWhereUniqueInput
  data: Prisma.XOR<
    Prisma.TeamUpdateWithoutOrganizationInput,
    Prisma.TeamUncheckedUpdateWithoutOrganizationInput
  >
}

export type TeamUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.TeamScalarWhereInput
  data: Prisma.XOR<
    Prisma.TeamUpdateManyMutationInput,
    Prisma.TeamUncheckedUpdateManyWithoutOrganizationInput
  >
}

export type TeamScalarWhereInput = {
  AND?: Prisma.TeamScalarWhereInput | Prisma.TeamScalarWhereInput[]
  OR?: Prisma.TeamScalarWhereInput[]
  NOT?: Prisma.TeamScalarWhereInput | Prisma.TeamScalarWhereInput[]
  id?: Prisma.StringFilter<'Team'> | string
  name?: Prisma.StringFilter<'Team'> | string
  description?: Prisma.StringNullableFilter<'Team'> | string | null
  avatar?: Prisma.StringNullableFilter<'Team'> | string | null
  organizationId?: Prisma.StringFilter<'Team'> | string
  parentId?: Prisma.StringNullableFilter<'Team'> | string | null
  createdAt?: Prisma.DateTimeFilter<'Team'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'Team'> | Date | string
}

export type TeamCreateWithoutChildrenInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutTeamsInput
  parent?: Prisma.TeamCreateNestedOneWithoutChildrenInput
  people?: Prisma.PersonCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutTeamInput
}

export type TeamUncheckedCreateWithoutChildrenInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  organizationId: string
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  people?: Prisma.PersonUncheckedCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeUncheckedCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutChildrenInput = {
  where: Prisma.TeamWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutChildrenInput,
    Prisma.TeamUncheckedCreateWithoutChildrenInput
  >
}

export type TeamCreateWithoutParentInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutTeamsInput
  children?: Prisma.TeamCreateNestedManyWithoutParentInput
  people?: Prisma.PersonCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutTeamInput
}

export type TeamUncheckedCreateWithoutParentInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.TeamUncheckedCreateNestedManyWithoutParentInput
  people?: Prisma.PersonUncheckedCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeUncheckedCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutParentInput = {
  where: Prisma.TeamWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutParentInput,
    Prisma.TeamUncheckedCreateWithoutParentInput
  >
}

export type TeamCreateManyParentInputEnvelope = {
  data: Prisma.TeamCreateManyParentInput | Prisma.TeamCreateManyParentInput[]
  skipDuplicates?: boolean
}

export type TeamUpsertWithoutChildrenInput = {
  update: Prisma.XOR<
    Prisma.TeamUpdateWithoutChildrenInput,
    Prisma.TeamUncheckedUpdateWithoutChildrenInput
  >
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutChildrenInput,
    Prisma.TeamUncheckedCreateWithoutChildrenInput
  >
  where?: Prisma.TeamWhereInput
}

export type TeamUpdateToOneWithWhereWithoutChildrenInput = {
  where?: Prisma.TeamWhereInput
  data: Prisma.XOR<
    Prisma.TeamUpdateWithoutChildrenInput,
    Prisma.TeamUncheckedUpdateWithoutChildrenInput
  >
}

export type TeamUpdateWithoutChildrenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeamsNestedInput
  parent?: Prisma.TeamUpdateOneWithoutChildrenNestedInput
  people?: Prisma.PersonUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateWithoutChildrenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  people?: Prisma.PersonUncheckedUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUncheckedUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutTeamNestedInput
}

export type TeamUpsertWithWhereUniqueWithoutParentInput = {
  where: Prisma.TeamWhereUniqueInput
  update: Prisma.XOR<
    Prisma.TeamUpdateWithoutParentInput,
    Prisma.TeamUncheckedUpdateWithoutParentInput
  >
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutParentInput,
    Prisma.TeamUncheckedCreateWithoutParentInput
  >
}

export type TeamUpdateWithWhereUniqueWithoutParentInput = {
  where: Prisma.TeamWhereUniqueInput
  data: Prisma.XOR<
    Prisma.TeamUpdateWithoutParentInput,
    Prisma.TeamUncheckedUpdateWithoutParentInput
  >
}

export type TeamUpdateManyWithWhereWithoutParentInput = {
  where: Prisma.TeamScalarWhereInput
  data: Prisma.XOR<
    Prisma.TeamUpdateManyMutationInput,
    Prisma.TeamUncheckedUpdateManyWithoutParentInput
  >
}

export type TeamCreateWithoutPeopleInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutTeamsInput
  parent?: Prisma.TeamCreateNestedOneWithoutChildrenInput
  children?: Prisma.TeamCreateNestedManyWithoutParentInput
  initiatives?: Prisma.InitiativeCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutTeamInput
}

export type TeamUncheckedCreateWithoutPeopleInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  organizationId: string
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.TeamUncheckedCreateNestedManyWithoutParentInput
  initiatives?: Prisma.InitiativeUncheckedCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutPeopleInput = {
  where: Prisma.TeamWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutPeopleInput,
    Prisma.TeamUncheckedCreateWithoutPeopleInput
  >
}

export type TeamUpsertWithoutPeopleInput = {
  update: Prisma.XOR<
    Prisma.TeamUpdateWithoutPeopleInput,
    Prisma.TeamUncheckedUpdateWithoutPeopleInput
  >
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutPeopleInput,
    Prisma.TeamUncheckedCreateWithoutPeopleInput
  >
  where?: Prisma.TeamWhereInput
}

export type TeamUpdateToOneWithWhereWithoutPeopleInput = {
  where?: Prisma.TeamWhereInput
  data: Prisma.XOR<
    Prisma.TeamUpdateWithoutPeopleInput,
    Prisma.TeamUncheckedUpdateWithoutPeopleInput
  >
}

export type TeamUpdateWithoutPeopleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeamsNestedInput
  parent?: Prisma.TeamUpdateOneWithoutChildrenNestedInput
  children?: Prisma.TeamUpdateManyWithoutParentNestedInput
  initiatives?: Prisma.InitiativeUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateWithoutPeopleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.TeamUncheckedUpdateManyWithoutParentNestedInput
  initiatives?: Prisma.InitiativeUncheckedUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutTeamNestedInput
}

export type TeamCreateWithoutInitiativesInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutTeamsInput
  parent?: Prisma.TeamCreateNestedOneWithoutChildrenInput
  children?: Prisma.TeamCreateNestedManyWithoutParentInput
  people?: Prisma.PersonCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingCreateNestedManyWithoutTeamInput
}

export type TeamUncheckedCreateWithoutInitiativesInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  organizationId: string
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.TeamUncheckedCreateNestedManyWithoutParentInput
  people?: Prisma.PersonUncheckedCreateNestedManyWithoutTeamInput
  meetings?: Prisma.MeetingUncheckedCreateNestedManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutInitiativesInput = {
  where: Prisma.TeamWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutInitiativesInput,
    Prisma.TeamUncheckedCreateWithoutInitiativesInput
  >
}

export type TeamUpsertWithoutInitiativesInput = {
  update: Prisma.XOR<
    Prisma.TeamUpdateWithoutInitiativesInput,
    Prisma.TeamUncheckedUpdateWithoutInitiativesInput
  >
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutInitiativesInput,
    Prisma.TeamUncheckedCreateWithoutInitiativesInput
  >
  where?: Prisma.TeamWhereInput
}

export type TeamUpdateToOneWithWhereWithoutInitiativesInput = {
  where?: Prisma.TeamWhereInput
  data: Prisma.XOR<
    Prisma.TeamUpdateWithoutInitiativesInput,
    Prisma.TeamUncheckedUpdateWithoutInitiativesInput
  >
}

export type TeamUpdateWithoutInitiativesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeamsNestedInput
  parent?: Prisma.TeamUpdateOneWithoutChildrenNestedInput
  children?: Prisma.TeamUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateWithoutInitiativesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.TeamUncheckedUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUncheckedUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutTeamNestedInput
}

export type TeamCreateWithoutMeetingsInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutTeamsInput
  parent?: Prisma.TeamCreateNestedOneWithoutChildrenInput
  children?: Prisma.TeamCreateNestedManyWithoutParentInput
  people?: Prisma.PersonCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeCreateNestedManyWithoutTeamInput
}

export type TeamUncheckedCreateWithoutMeetingsInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  organizationId: string
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  children?: Prisma.TeamUncheckedCreateNestedManyWithoutParentInput
  people?: Prisma.PersonUncheckedCreateNestedManyWithoutTeamInput
  initiatives?: Prisma.InitiativeUncheckedCreateNestedManyWithoutTeamInput
}

export type TeamCreateOrConnectWithoutMeetingsInput = {
  where: Prisma.TeamWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutMeetingsInput,
    Prisma.TeamUncheckedCreateWithoutMeetingsInput
  >
}

export type TeamUpsertWithoutMeetingsInput = {
  update: Prisma.XOR<
    Prisma.TeamUpdateWithoutMeetingsInput,
    Prisma.TeamUncheckedUpdateWithoutMeetingsInput
  >
  create: Prisma.XOR<
    Prisma.TeamCreateWithoutMeetingsInput,
    Prisma.TeamUncheckedCreateWithoutMeetingsInput
  >
  where?: Prisma.TeamWhereInput
}

export type TeamUpdateToOneWithWhereWithoutMeetingsInput = {
  where?: Prisma.TeamWhereInput
  data: Prisma.XOR<
    Prisma.TeamUpdateWithoutMeetingsInput,
    Prisma.TeamUncheckedUpdateWithoutMeetingsInput
  >
}

export type TeamUpdateWithoutMeetingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeamsNestedInput
  parent?: Prisma.TeamUpdateOneWithoutChildrenNestedInput
  children?: Prisma.TeamUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateWithoutMeetingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.TeamUncheckedUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUncheckedUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUncheckedUpdateManyWithoutTeamNestedInput
}

export type TeamCreateManyOrganizationInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  parentId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeamUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  parent?: Prisma.TeamUpdateOneWithoutChildrenNestedInput
  children?: Prisma.TeamUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.TeamUncheckedUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUncheckedUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUncheckedUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TeamCreateManyParentInput = {
  id?: string
  name: string
  description?: string | null
  avatar?: string | null
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TeamUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutTeamsNestedInput
  children?: Prisma.TeamUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  children?: Prisma.TeamUncheckedUpdateManyWithoutParentNestedInput
  people?: Prisma.PersonUncheckedUpdateManyWithoutTeamNestedInput
  initiatives?: Prisma.InitiativeUncheckedUpdateManyWithoutTeamNestedInput
  meetings?: Prisma.MeetingUncheckedUpdateManyWithoutTeamNestedInput
}

export type TeamUncheckedUpdateManyWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

/**
 * Count Type TeamCountOutputType
 */

export type TeamCountOutputType = {
  children: number
  people: number
  initiatives: number
  meetings: number
}

export type TeamCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  children?: boolean | TeamCountOutputTypeCountChildrenArgs
  people?: boolean | TeamCountOutputTypeCountPeopleArgs
  initiatives?: boolean | TeamCountOutputTypeCountInitiativesArgs
  meetings?: boolean | TeamCountOutputTypeCountMeetingsArgs
}

/**
 * TeamCountOutputType without action
 */
export type TeamCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TeamCountOutputType
   */
  select?: Prisma.TeamCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TeamCountOutputType without action
 */
export type TeamCountOutputTypeCountChildrenArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TeamWhereInput
}

/**
 * TeamCountOutputType without action
 */
export type TeamCountOutputTypeCountPeopleArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PersonWhereInput
}

/**
 * TeamCountOutputType without action
 */
export type TeamCountOutputTypeCountInitiativesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InitiativeWhereInput
}

/**
 * TeamCountOutputType without action
 */
export type TeamCountOutputTypeCountMeetingsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MeetingWhereInput
}

export type TeamSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    description?: boolean
    avatar?: boolean
    organizationId?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    parent?: boolean | Prisma.Team$parentArgs<ExtArgs>
    children?: boolean | Prisma.Team$childrenArgs<ExtArgs>
    people?: boolean | Prisma.Team$peopleArgs<ExtArgs>
    initiatives?: boolean | Prisma.Team$initiativesArgs<ExtArgs>
    meetings?: boolean | Prisma.Team$meetingsArgs<ExtArgs>
    _count?: boolean | Prisma.TeamCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['team']
>

export type TeamSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    description?: boolean
    avatar?: boolean
    organizationId?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    parent?: boolean | Prisma.Team$parentArgs<ExtArgs>
  },
  ExtArgs['result']['team']
>

export type TeamSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    description?: boolean
    avatar?: boolean
    organizationId?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    parent?: boolean | Prisma.Team$parentArgs<ExtArgs>
  },
  ExtArgs['result']['team']
>

export type TeamSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  avatar?: boolean
  organizationId?: boolean
  parentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TeamOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'name'
  | 'description'
  | 'avatar'
  | 'organizationId'
  | 'parentId'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['team']
>
export type TeamInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Team$parentArgs<ExtArgs>
  children?: boolean | Prisma.Team$childrenArgs<ExtArgs>
  people?: boolean | Prisma.Team$peopleArgs<ExtArgs>
  initiatives?: boolean | Prisma.Team$initiativesArgs<ExtArgs>
  meetings?: boolean | Prisma.Team$meetingsArgs<ExtArgs>
  _count?: boolean | Prisma.TeamCountOutputTypeDefaultArgs<ExtArgs>
}
export type TeamIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Team$parentArgs<ExtArgs>
}
export type TeamIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  parent?: boolean | Prisma.Team$parentArgs<ExtArgs>
}

export type $TeamPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Team'
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    parent: Prisma.$TeamPayload<ExtArgs> | null
    children: Prisma.$TeamPayload<ExtArgs>[]
    people: Prisma.$PersonPayload<ExtArgs>[]
    initiatives: Prisma.$InitiativePayload<ExtArgs>[]
    meetings: Prisma.$MeetingPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      name: string
      description: string | null
      avatar: string | null
      organizationId: string
      parentId: string | null
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['team']
  >
  composites: {}
}

export type TeamGetPayload<
  S extends boolean | null | undefined | TeamDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TeamPayload, S>

export type TeamCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: TeamCountAggregateInputType | true
}

export interface TeamDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Team']
    meta: { name: 'Team' }
  }
  /**
   * Find zero or one Team that matches the filter.
   * @param {TeamFindUniqueArgs} args - Arguments to find a Team
   * @example
   * // Get one Team
   * const team = await prisma.team.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeamFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one Team that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
   * @example
   * // Get one Team
   * const team = await prisma.team.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Team that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFindFirstArgs} args - Arguments to find a Team
   * @example
   * // Get one Team
   * const team = await prisma.team.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeamFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TeamFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Team that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
   * @example
   * // Get one Team
   * const team = await prisma.team.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more Teams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Teams
   * const teams = await prisma.team.findMany()
   *
   * // Get first 10 Teams
   * const teams = await prisma.team.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TeamFindManyArgs>(
    args?: Prisma.SelectSubset<T, TeamFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a Team.
   * @param {TeamCreateArgs} args - Arguments to create a Team.
   * @example
   * // Create one Team
   * const Team = await prisma.team.create({
   *   data: {
   *     // ... data to create a Team
   *   }
   * })
   *
   */
  create<T extends TeamCreateArgs>(
    args: Prisma.SelectSubset<T, TeamCreateArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many Teams.
   * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
   * @example
   * // Create many Teams
   * const team = await prisma.team.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TeamCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TeamCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Teams and returns the data saved in the database.
   * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
   * @example
   * // Create many Teams
   * const team = await prisma.team.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Teams and only return the `id`
   * const teamWithIdOnly = await prisma.team.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a Team.
   * @param {TeamDeleteArgs} args - Arguments to delete one Team.
   * @example
   * // Delete one Team
   * const Team = await prisma.team.delete({
   *   where: {
   *     // ... filter to delete one Team
   *   }
   * })
   *
   */
  delete<T extends TeamDeleteArgs>(
    args: Prisma.SelectSubset<T, TeamDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one Team.
   * @param {TeamUpdateArgs} args - Arguments to update one Team.
   * @example
   * // Update one Team
   * const team = await prisma.team.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TeamUpdateArgs>(
    args: Prisma.SelectSubset<T, TeamUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more Teams.
   * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
   * @example
   * // Delete a few Teams
   * const { count } = await prisma.team.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TeamDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Teams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Teams
   * const team = await prisma.team.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TeamUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Teams and returns the data updated in the database.
   * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
   * @example
   * // Update many Teams
   * const team = await prisma.team.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Teams and only return the `id`
   * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one Team.
   * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
   * @example
   * // Update or create a Team
   * const team = await prisma.team.upsert({
   *   create: {
   *     // ... data to create a Team
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Team we want to update
   *   }
   * })
   */
  upsert<T extends TeamUpsertArgs>(
    args: Prisma.SelectSubset<T, TeamUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of Teams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamCountArgs} args - Arguments to filter Teams to count.
   * @example
   * // Count the number of Teams
   * const count = await prisma.team.count({
   *   where: {
   *     // ... the filter for the Teams we want to count
   *   }
   * })
   **/
  count<T extends TeamCountArgs>(
    args?: Prisma.Subset<T, TeamCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeamCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Team.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TeamAggregateArgs>(
    args: Prisma.Subset<T, TeamAggregateArgs>
  ): Prisma.PrismaPromise<GetTeamAggregateType<T>>

  /**
   * Group by Team.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TeamGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeamGroupByArgs['orderBy'] }
      : { orderBy?: TeamGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TeamGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetTeamGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for Team.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeamClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrganizationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  parent<T extends Prisma.Team$parentArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Team$parentArgs<ExtArgs>>
  ): Prisma.Prisma__TeamClient<
    runtime.Types.Result.GetResult<
      Prisma.$TeamPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >
  children<T extends Prisma.Team$childrenArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Team$childrenArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$TeamPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  people<T extends Prisma.Team$peopleArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Team$peopleArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  initiatives<T extends Prisma.Team$initiativesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Team$initiativesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$InitiativePayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  meetings<T extends Prisma.Team$meetingsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Team$meetingsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$MeetingPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the Team model
 */
export interface TeamFieldRefs {
  readonly id: Prisma.FieldRef<'Team', 'String'>
  readonly name: Prisma.FieldRef<'Team', 'String'>
  readonly description: Prisma.FieldRef<'Team', 'String'>
  readonly avatar: Prisma.FieldRef<'Team', 'String'>
  readonly organizationId: Prisma.FieldRef<'Team', 'String'>
  readonly parentId: Prisma.FieldRef<'Team', 'String'>
  readonly createdAt: Prisma.FieldRef<'Team', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'Team', 'DateTime'>
}

// Custom InputTypes
/**
 * Team findUnique
 */
export type TeamFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * Filter, which Team to fetch.
   */
  where: Prisma.TeamWhereUniqueInput
}

/**
 * Team findUniqueOrThrow
 */
export type TeamFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * Filter, which Team to fetch.
   */
  where: Prisma.TeamWhereUniqueInput
}

/**
 * Team findFirst
 */
export type TeamFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * Filter, which Team to fetch.
   */
  where?: Prisma.TeamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Teams to fetch.
   */
  orderBy?:
    | Prisma.TeamOrderByWithRelationInput
    | Prisma.TeamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Teams.
   */
  cursor?: Prisma.TeamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Teams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Teams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Teams.
   */
  distinct?: Prisma.TeamScalarFieldEnum | Prisma.TeamScalarFieldEnum[]
}

/**
 * Team findFirstOrThrow
 */
export type TeamFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * Filter, which Team to fetch.
   */
  where?: Prisma.TeamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Teams to fetch.
   */
  orderBy?:
    | Prisma.TeamOrderByWithRelationInput
    | Prisma.TeamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Teams.
   */
  cursor?: Prisma.TeamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Teams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Teams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Teams.
   */
  distinct?: Prisma.TeamScalarFieldEnum | Prisma.TeamScalarFieldEnum[]
}

/**
 * Team findMany
 */
export type TeamFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * Filter, which Teams to fetch.
   */
  where?: Prisma.TeamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Teams to fetch.
   */
  orderBy?:
    | Prisma.TeamOrderByWithRelationInput
    | Prisma.TeamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Teams.
   */
  cursor?: Prisma.TeamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Teams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Teams.
   */
  skip?: number
  distinct?: Prisma.TeamScalarFieldEnum | Prisma.TeamScalarFieldEnum[]
}

/**
 * Team create
 */
export type TeamCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * The data needed to create a Team.
   */
  data: Prisma.XOR<Prisma.TeamCreateInput, Prisma.TeamUncheckedCreateInput>
}

/**
 * Team createMany
 */
export type TeamCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Teams.
   */
  data: Prisma.TeamCreateManyInput | Prisma.TeamCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Team createManyAndReturn
 */
export type TeamCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * The data used to create many Teams.
   */
  data: Prisma.TeamCreateManyInput | Prisma.TeamCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Team update
 */
export type TeamUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * The data needed to update a Team.
   */
  data: Prisma.XOR<Prisma.TeamUpdateInput, Prisma.TeamUncheckedUpdateInput>
  /**
   * Choose, which Team to update.
   */
  where: Prisma.TeamWhereUniqueInput
}

/**
 * Team updateMany
 */
export type TeamUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Teams.
   */
  data: Prisma.XOR<
    Prisma.TeamUpdateManyMutationInput,
    Prisma.TeamUncheckedUpdateManyInput
  >
  /**
   * Filter which Teams to update
   */
  where?: Prisma.TeamWhereInput
  /**
   * Limit how many Teams to update.
   */
  limit?: number
}

/**
 * Team updateManyAndReturn
 */
export type TeamUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * The data used to update Teams.
   */
  data: Prisma.XOR<
    Prisma.TeamUpdateManyMutationInput,
    Prisma.TeamUncheckedUpdateManyInput
  >
  /**
   * Filter which Teams to update
   */
  where?: Prisma.TeamWhereInput
  /**
   * Limit how many Teams to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Team upsert
 */
export type TeamUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * The filter to search for the Team to update in case it exists.
   */
  where: Prisma.TeamWhereUniqueInput
  /**
   * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
   */
  create: Prisma.XOR<Prisma.TeamCreateInput, Prisma.TeamUncheckedCreateInput>
  /**
   * In case the Team was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeamUpdateInput, Prisma.TeamUncheckedUpdateInput>
}

/**
 * Team delete
 */
export type TeamDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  /**
   * Filter which Team to delete.
   */
  where: Prisma.TeamWhereUniqueInput
}

/**
 * Team deleteMany
 */
export type TeamDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Teams to delete
   */
  where?: Prisma.TeamWhereInput
  /**
   * Limit how many Teams to delete.
   */
  limit?: number
}

/**
 * Team.parent
 */
export type Team$parentArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  where?: Prisma.TeamWhereInput
}

/**
 * Team.children
 */
export type Team$childrenArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
  where?: Prisma.TeamWhereInput
  orderBy?:
    | Prisma.TeamOrderByWithRelationInput
    | Prisma.TeamOrderByWithRelationInput[]
  cursor?: Prisma.TeamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TeamScalarFieldEnum | Prisma.TeamScalarFieldEnum[]
}

/**
 * Team.people
 */
export type Team$peopleArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Person
   */
  select?: Prisma.PersonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Person
   */
  omit?: Prisma.PersonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonInclude<ExtArgs> | null
  where?: Prisma.PersonWhereInput
  orderBy?:
    | Prisma.PersonOrderByWithRelationInput
    | Prisma.PersonOrderByWithRelationInput[]
  cursor?: Prisma.PersonWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PersonScalarFieldEnum | Prisma.PersonScalarFieldEnum[]
}

/**
 * Team.initiatives
 */
export type Team$initiativesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Initiative
   */
  select?: Prisma.InitiativeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Initiative
   */
  omit?: Prisma.InitiativeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeInclude<ExtArgs> | null
  where?: Prisma.InitiativeWhereInput
  orderBy?:
    | Prisma.InitiativeOrderByWithRelationInput
    | Prisma.InitiativeOrderByWithRelationInput[]
  cursor?: Prisma.InitiativeWhereUniqueInput
  take?: number
  skip?: number
  distinct?:
    | Prisma.InitiativeScalarFieldEnum
    | Prisma.InitiativeScalarFieldEnum[]
}

/**
 * Team.meetings
 */
export type Team$meetingsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Meeting
   */
  select?: Prisma.MeetingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Meeting
   */
  omit?: Prisma.MeetingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInclude<ExtArgs> | null
  where?: Prisma.MeetingWhereInput
  orderBy?:
    | Prisma.MeetingOrderByWithRelationInput
    | Prisma.MeetingOrderByWithRelationInput[]
  cursor?: Prisma.MeetingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MeetingScalarFieldEnum | Prisma.MeetingScalarFieldEnum[]
}

/**
 * Team without action
 */
export type TeamDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Team
   */
  select?: Prisma.TeamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Team
   */
  omit?: Prisma.TeamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamInclude<ExtArgs> | null
}
