/**
 * Auto-generated help content index
 *
 * This file is automatically generated from markdown files in the help/ directory.
 * Do not edit this file manually. Instead, edit the markdown files and run:
 *
 *   bun run help:generate
 *
 * Generated on: 2025-09-28T14:11:27.981Z
 */

export interface HelpContent {
  id: string
  title: string
  content: string
  category?: string
}

// Import all help content files
import { helpContent as peopleHierarchy } from './people-hierarchy'
import { helpContent as directReports } from './direct-reports'
import { helpContent as oneOnOnes } from './one-on-ones'
import { helpContent as meetingsAndInstances } from './meetings-and-instances'
import { helpContent as githubIntegration } from './github-integration'
import { helpContent as jiraIntegration } from './jira-integration'
import { helpContent as feedbackCampaignsAndResponses } from './feedback-campaigns-and-responses'
import { helpContent as synopsisGeneration } from './synopsis-generation'
import { helpContent as feedbackCampaigns } from './feedback-campaigns'
import { helpContent as taskStatus } from './task-status'
import { helpContent as initiatives } from './initiatives'
import { helpContent as taskPriorities } from './task-priorities'

// Combine all help content into a single object
export const helpContent: Record<string, HelpContent> = {
  'people-hierarchy': peopleHierarchy,
  'direct-reports': directReports,
  'one-on-ones': oneOnOnes,
  'meetings-and-instances': meetingsAndInstances,
  'github-integration': githubIntegration,
  'jira-integration': jiraIntegration,
  'feedback-campaigns-and-responses': feedbackCampaignsAndResponses,
  'synopsis-generation': synopsisGeneration,
  'feedback-campaigns': feedbackCampaigns,
  'task-status': taskStatus,
  initiatives: initiatives,
  'task-priorities': taskPriorities,
}

/**
 * Get help content by ID
 */
export function getHelpContent(id: string): HelpContent | undefined {
  return helpContent[id]
}

/**
 * Get all help content for a specific category
 */
export function getHelpContentByCategory(category: string): HelpContent[] {
  return Object.values(helpContent).filter(item => item.category === category)
}

/**
 * Get all available help content
 */
export function getAllHelpContent(): HelpContent[] {
  return Object.values(helpContent)
}

/**
 * Get all available categories
 */
export function getHelpCategories(): string[] {
  return Array.from(
    new Set([
      'People & Teams',
      'Meetings & Communication',
      'Integrations',
      'Feedback & Development',
      'Tasks & Projects',
    ])
  ).sort()
}

/**
 * Check if a help ID exists
 */
export function hasHelpContent(id: string): boolean {
  return id in helpContent
}

/**
 * Get all available help IDs
 */
export function getHelpIds(): string[] {
  return [
    'people-hierarchy',
    'direct-reports',
    'one-on-ones',
    'meetings-and-instances',
    'github-integration',
    'jira-integration',
    'feedback-campaigns-and-responses',
    'synopsis-generation',
    'feedback-campaigns',
    'task-status',
    'initiatives',
    'task-priorities',
  ]
}
