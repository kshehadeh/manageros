/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `MeetingInstance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model MeetingInstance
 *
 */
export type MeetingInstanceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$MeetingInstancePayload>

export type AggregateMeetingInstance = {
  _count: MeetingInstanceCountAggregateOutputType | null
  _min: MeetingInstanceMinAggregateOutputType | null
  _max: MeetingInstanceMaxAggregateOutputType | null
}

export type MeetingInstanceMinAggregateOutputType = {
  id: string | null
  meetingId: string | null
  scheduledAt: Date | null
  notes: string | null
  isPrivate: boolean | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MeetingInstanceMaxAggregateOutputType = {
  id: string | null
  meetingId: string | null
  scheduledAt: Date | null
  notes: string | null
  isPrivate: boolean | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MeetingInstanceCountAggregateOutputType = {
  id: number
  meetingId: number
  scheduledAt: number
  notes: number
  isPrivate: number
  organizationId: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type MeetingInstanceMinAggregateInputType = {
  id?: true
  meetingId?: true
  scheduledAt?: true
  notes?: true
  isPrivate?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type MeetingInstanceMaxAggregateInputType = {
  id?: true
  meetingId?: true
  scheduledAt?: true
  notes?: true
  isPrivate?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type MeetingInstanceCountAggregateInputType = {
  id?: true
  meetingId?: true
  scheduledAt?: true
  notes?: true
  isPrivate?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MeetingInstanceAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MeetingInstance to aggregate.
   */
  where?: Prisma.MeetingInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MeetingInstances to fetch.
   */
  orderBy?:
    | Prisma.MeetingInstanceOrderByWithRelationInput
    | Prisma.MeetingInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.MeetingInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MeetingInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MeetingInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned MeetingInstances
   **/
  _count?: true | MeetingInstanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: MeetingInstanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: MeetingInstanceMaxAggregateInputType
}

export type GetMeetingInstanceAggregateType<
  T extends MeetingInstanceAggregateArgs,
> = {
  [P in keyof T & keyof AggregateMeetingInstance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMeetingInstance[P]>
    : Prisma.GetScalarType<T[P], AggregateMeetingInstance[P]>
}

export type MeetingInstanceGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MeetingInstanceWhereInput
  orderBy?:
    | Prisma.MeetingInstanceOrderByWithAggregationInput
    | Prisma.MeetingInstanceOrderByWithAggregationInput[]
  by:
    | Prisma.MeetingInstanceScalarFieldEnum[]
    | Prisma.MeetingInstanceScalarFieldEnum
  having?: Prisma.MeetingInstanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MeetingInstanceCountAggregateInputType | true
  _min?: MeetingInstanceMinAggregateInputType
  _max?: MeetingInstanceMaxAggregateInputType
}

export type MeetingInstanceGroupByOutputType = {
  id: string
  meetingId: string
  scheduledAt: Date
  notes: string | null
  isPrivate: boolean
  organizationId: string
  createdAt: Date
  updatedAt: Date
  _count: MeetingInstanceCountAggregateOutputType | null
  _min: MeetingInstanceMinAggregateOutputType | null
  _max: MeetingInstanceMaxAggregateOutputType | null
}

type GetMeetingInstanceGroupByPayload<T extends MeetingInstanceGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<MeetingInstanceGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof MeetingInstanceGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MeetingInstanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MeetingInstanceGroupByOutputType[P]>
      }
    >
  >

export type MeetingInstanceWhereInput = {
  AND?: Prisma.MeetingInstanceWhereInput | Prisma.MeetingInstanceWhereInput[]
  OR?: Prisma.MeetingInstanceWhereInput[]
  NOT?: Prisma.MeetingInstanceWhereInput | Prisma.MeetingInstanceWhereInput[]
  id?: Prisma.StringFilter<'MeetingInstance'> | string
  meetingId?: Prisma.StringFilter<'MeetingInstance'> | string
  scheduledAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
  notes?: Prisma.StringNullableFilter<'MeetingInstance'> | string | null
  isPrivate?: Prisma.BoolFilter<'MeetingInstance'> | boolean
  organizationId?: Prisma.StringFilter<'MeetingInstance'> | string
  createdAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
  meeting?: Prisma.XOR<
    Prisma.MeetingScalarRelationFilter,
    Prisma.MeetingWhereInput
  >
  organization?: Prisma.XOR<
    Prisma.OrganizationScalarRelationFilter,
    Prisma.OrganizationWhereInput
  >
  participants?: Prisma.MeetingInstanceParticipantListRelationFilter
}

export type MeetingInstanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  meeting?: Prisma.MeetingOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
  participants?: Prisma.MeetingInstanceParticipantOrderByRelationAggregateInput
}

export type MeetingInstanceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.MeetingInstanceWhereInput | Prisma.MeetingInstanceWhereInput[]
    OR?: Prisma.MeetingInstanceWhereInput[]
    NOT?: Prisma.MeetingInstanceWhereInput | Prisma.MeetingInstanceWhereInput[]
    meetingId?: Prisma.StringFilter<'MeetingInstance'> | string
    scheduledAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
    notes?: Prisma.StringNullableFilter<'MeetingInstance'> | string | null
    isPrivate?: Prisma.BoolFilter<'MeetingInstance'> | boolean
    organizationId?: Prisma.StringFilter<'MeetingInstance'> | string
    createdAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
    meeting?: Prisma.XOR<
      Prisma.MeetingScalarRelationFilter,
      Prisma.MeetingWhereInput
    >
    organization?: Prisma.XOR<
      Prisma.OrganizationScalarRelationFilter,
      Prisma.OrganizationWhereInput
    >
    participants?: Prisma.MeetingInstanceParticipantListRelationFilter
  },
  'id'
>

export type MeetingInstanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MeetingInstanceCountOrderByAggregateInput
  _max?: Prisma.MeetingInstanceMaxOrderByAggregateInput
  _min?: Prisma.MeetingInstanceMinOrderByAggregateInput
}

export type MeetingInstanceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.MeetingInstanceScalarWhereWithAggregatesInput
    | Prisma.MeetingInstanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.MeetingInstanceScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.MeetingInstanceScalarWhereWithAggregatesInput
    | Prisma.MeetingInstanceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'MeetingInstance'> | string
  meetingId?: Prisma.StringWithAggregatesFilter<'MeetingInstance'> | string
  scheduledAt?:
    | Prisma.DateTimeWithAggregatesFilter<'MeetingInstance'>
    | Date
    | string
  notes?:
    | Prisma.StringNullableWithAggregatesFilter<'MeetingInstance'>
    | string
    | null
  isPrivate?: Prisma.BoolWithAggregatesFilter<'MeetingInstance'> | boolean
  organizationId?: Prisma.StringWithAggregatesFilter<'MeetingInstance'> | string
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'MeetingInstance'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'MeetingInstance'>
    | Date
    | string
}

export type MeetingInstanceCreateInput = {
  id?: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  meeting: Prisma.MeetingCreateNestedOneWithoutInstancesInput
  organization: Prisma.OrganizationCreateNestedOneWithoutMeetingInstancesInput
  participants?: Prisma.MeetingInstanceParticipantCreateNestedManyWithoutMeetingInstanceInput
}

export type MeetingInstanceUncheckedCreateInput = {
  id?: string
  meetingId: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  participants?: Prisma.MeetingInstanceParticipantUncheckedCreateNestedManyWithoutMeetingInstanceInput
}

export type MeetingInstanceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutInstancesNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutMeetingInstancesNestedInput
  participants?: Prisma.MeetingInstanceParticipantUpdateManyWithoutMeetingInstanceNestedInput
}

export type MeetingInstanceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participants?: Prisma.MeetingInstanceParticipantUncheckedUpdateManyWithoutMeetingInstanceNestedInput
}

export type MeetingInstanceCreateManyInput = {
  id?: string
  meetingId: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceListRelationFilter = {
  every?: Prisma.MeetingInstanceWhereInput
  some?: Prisma.MeetingInstanceWhereInput
  none?: Prisma.MeetingInstanceWhereInput
}

export type MeetingInstanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MeetingInstanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingInstanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingInstanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meetingId?: Prisma.SortOrder
  scheduledAt?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  isPrivate?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MeetingInstanceScalarRelationFilter = {
  is?: Prisma.MeetingInstanceWhereInput
  isNot?: Prisma.MeetingInstanceWhereInput
}

export type MeetingInstanceCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceCreateWithoutOrganizationInput,
        Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.MeetingInstanceCreateWithoutOrganizationInput[]
    | Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceCreateOrConnectWithoutOrganizationInput
    | Prisma.MeetingInstanceCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.MeetingInstanceCreateManyOrganizationInputEnvelope
  connect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
}

export type MeetingInstanceUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceCreateWithoutOrganizationInput,
        Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.MeetingInstanceCreateWithoutOrganizationInput[]
    | Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceCreateOrConnectWithoutOrganizationInput
    | Prisma.MeetingInstanceCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.MeetingInstanceCreateManyOrganizationInputEnvelope
  connect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
}

export type MeetingInstanceUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceCreateWithoutOrganizationInput,
        Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.MeetingInstanceCreateWithoutOrganizationInput[]
    | Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceCreateOrConnectWithoutOrganizationInput
    | Prisma.MeetingInstanceCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.MeetingInstanceUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.MeetingInstanceUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.MeetingInstanceCreateManyOrganizationInputEnvelope
  set?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  delete?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  connect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  update?:
    | Prisma.MeetingInstanceUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.MeetingInstanceUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.MeetingInstanceUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.MeetingInstanceUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.MeetingInstanceScalarWhereInput
    | Prisma.MeetingInstanceScalarWhereInput[]
}

export type MeetingInstanceUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceCreateWithoutOrganizationInput,
        Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.MeetingInstanceCreateWithoutOrganizationInput[]
    | Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceCreateOrConnectWithoutOrganizationInput
    | Prisma.MeetingInstanceCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.MeetingInstanceUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.MeetingInstanceUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.MeetingInstanceCreateManyOrganizationInputEnvelope
  set?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  delete?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  connect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  update?:
    | Prisma.MeetingInstanceUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.MeetingInstanceUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.MeetingInstanceUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.MeetingInstanceUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.MeetingInstanceScalarWhereInput
    | Prisma.MeetingInstanceScalarWhereInput[]
}

export type MeetingInstanceCreateNestedManyWithoutMeetingInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceCreateWithoutMeetingInput,
        Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput
      >
    | Prisma.MeetingInstanceCreateWithoutMeetingInput[]
    | Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceCreateOrConnectWithoutMeetingInput
    | Prisma.MeetingInstanceCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.MeetingInstanceCreateManyMeetingInputEnvelope
  connect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
}

export type MeetingInstanceUncheckedCreateNestedManyWithoutMeetingInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceCreateWithoutMeetingInput,
        Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput
      >
    | Prisma.MeetingInstanceCreateWithoutMeetingInput[]
    | Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceCreateOrConnectWithoutMeetingInput
    | Prisma.MeetingInstanceCreateOrConnectWithoutMeetingInput[]
  createMany?: Prisma.MeetingInstanceCreateManyMeetingInputEnvelope
  connect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
}

export type MeetingInstanceUpdateManyWithoutMeetingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceCreateWithoutMeetingInput,
        Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput
      >
    | Prisma.MeetingInstanceCreateWithoutMeetingInput[]
    | Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceCreateOrConnectWithoutMeetingInput
    | Prisma.MeetingInstanceCreateOrConnectWithoutMeetingInput[]
  upsert?:
    | Prisma.MeetingInstanceUpsertWithWhereUniqueWithoutMeetingInput
    | Prisma.MeetingInstanceUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.MeetingInstanceCreateManyMeetingInputEnvelope
  set?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  delete?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  connect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  update?:
    | Prisma.MeetingInstanceUpdateWithWhereUniqueWithoutMeetingInput
    | Prisma.MeetingInstanceUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?:
    | Prisma.MeetingInstanceUpdateManyWithWhereWithoutMeetingInput
    | Prisma.MeetingInstanceUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?:
    | Prisma.MeetingInstanceScalarWhereInput
    | Prisma.MeetingInstanceScalarWhereInput[]
}

export type MeetingInstanceUncheckedUpdateManyWithoutMeetingNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.MeetingInstanceCreateWithoutMeetingInput,
        Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput
      >
    | Prisma.MeetingInstanceCreateWithoutMeetingInput[]
    | Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput[]
  connectOrCreate?:
    | Prisma.MeetingInstanceCreateOrConnectWithoutMeetingInput
    | Prisma.MeetingInstanceCreateOrConnectWithoutMeetingInput[]
  upsert?:
    | Prisma.MeetingInstanceUpsertWithWhereUniqueWithoutMeetingInput
    | Prisma.MeetingInstanceUpsertWithWhereUniqueWithoutMeetingInput[]
  createMany?: Prisma.MeetingInstanceCreateManyMeetingInputEnvelope
  set?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  delete?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  connect?:
    | Prisma.MeetingInstanceWhereUniqueInput
    | Prisma.MeetingInstanceWhereUniqueInput[]
  update?:
    | Prisma.MeetingInstanceUpdateWithWhereUniqueWithoutMeetingInput
    | Prisma.MeetingInstanceUpdateWithWhereUniqueWithoutMeetingInput[]
  updateMany?:
    | Prisma.MeetingInstanceUpdateManyWithWhereWithoutMeetingInput
    | Prisma.MeetingInstanceUpdateManyWithWhereWithoutMeetingInput[]
  deleteMany?:
    | Prisma.MeetingInstanceScalarWhereInput
    | Prisma.MeetingInstanceScalarWhereInput[]
}

export type MeetingInstanceCreateNestedOneWithoutParticipantsInput = {
  create?: Prisma.XOR<
    Prisma.MeetingInstanceCreateWithoutParticipantsInput,
    Prisma.MeetingInstanceUncheckedCreateWithoutParticipantsInput
  >
  connectOrCreate?: Prisma.MeetingInstanceCreateOrConnectWithoutParticipantsInput
  connect?: Prisma.MeetingInstanceWhereUniqueInput
}

export type MeetingInstanceUpdateOneRequiredWithoutParticipantsNestedInput = {
  create?: Prisma.XOR<
    Prisma.MeetingInstanceCreateWithoutParticipantsInput,
    Prisma.MeetingInstanceUncheckedCreateWithoutParticipantsInput
  >
  connectOrCreate?: Prisma.MeetingInstanceCreateOrConnectWithoutParticipantsInput
  upsert?: Prisma.MeetingInstanceUpsertWithoutParticipantsInput
  connect?: Prisma.MeetingInstanceWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.MeetingInstanceUpdateToOneWithWhereWithoutParticipantsInput,
      Prisma.MeetingInstanceUpdateWithoutParticipantsInput
    >,
    Prisma.MeetingInstanceUncheckedUpdateWithoutParticipantsInput
  >
}

export type MeetingInstanceCreateWithoutOrganizationInput = {
  id?: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  meeting: Prisma.MeetingCreateNestedOneWithoutInstancesInput
  participants?: Prisma.MeetingInstanceParticipantCreateNestedManyWithoutMeetingInstanceInput
}

export type MeetingInstanceUncheckedCreateWithoutOrganizationInput = {
  id?: string
  meetingId: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  participants?: Prisma.MeetingInstanceParticipantUncheckedCreateNestedManyWithoutMeetingInstanceInput
}

export type MeetingInstanceCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.MeetingInstanceWhereUniqueInput
  create: Prisma.XOR<
    Prisma.MeetingInstanceCreateWithoutOrganizationInput,
    Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput
  >
}

export type MeetingInstanceCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.MeetingInstanceCreateManyOrganizationInput
    | Prisma.MeetingInstanceCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type MeetingInstanceUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.MeetingInstanceWhereUniqueInput
  update: Prisma.XOR<
    Prisma.MeetingInstanceUpdateWithoutOrganizationInput,
    Prisma.MeetingInstanceUncheckedUpdateWithoutOrganizationInput
  >
  create: Prisma.XOR<
    Prisma.MeetingInstanceCreateWithoutOrganizationInput,
    Prisma.MeetingInstanceUncheckedCreateWithoutOrganizationInput
  >
}

export type MeetingInstanceUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.MeetingInstanceWhereUniqueInput
  data: Prisma.XOR<
    Prisma.MeetingInstanceUpdateWithoutOrganizationInput,
    Prisma.MeetingInstanceUncheckedUpdateWithoutOrganizationInput
  >
}

export type MeetingInstanceUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.MeetingInstanceScalarWhereInput
  data: Prisma.XOR<
    Prisma.MeetingInstanceUpdateManyMutationInput,
    Prisma.MeetingInstanceUncheckedUpdateManyWithoutOrganizationInput
  >
}

export type MeetingInstanceScalarWhereInput = {
  AND?:
    | Prisma.MeetingInstanceScalarWhereInput
    | Prisma.MeetingInstanceScalarWhereInput[]
  OR?: Prisma.MeetingInstanceScalarWhereInput[]
  NOT?:
    | Prisma.MeetingInstanceScalarWhereInput
    | Prisma.MeetingInstanceScalarWhereInput[]
  id?: Prisma.StringFilter<'MeetingInstance'> | string
  meetingId?: Prisma.StringFilter<'MeetingInstance'> | string
  scheduledAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
  notes?: Prisma.StringNullableFilter<'MeetingInstance'> | string | null
  isPrivate?: Prisma.BoolFilter<'MeetingInstance'> | boolean
  organizationId?: Prisma.StringFilter<'MeetingInstance'> | string
  createdAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'MeetingInstance'> | Date | string
}

export type MeetingInstanceCreateWithoutMeetingInput = {
  id?: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutMeetingInstancesInput
  participants?: Prisma.MeetingInstanceParticipantCreateNestedManyWithoutMeetingInstanceInput
}

export type MeetingInstanceUncheckedCreateWithoutMeetingInput = {
  id?: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  participants?: Prisma.MeetingInstanceParticipantUncheckedCreateNestedManyWithoutMeetingInstanceInput
}

export type MeetingInstanceCreateOrConnectWithoutMeetingInput = {
  where: Prisma.MeetingInstanceWhereUniqueInput
  create: Prisma.XOR<
    Prisma.MeetingInstanceCreateWithoutMeetingInput,
    Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput
  >
}

export type MeetingInstanceCreateManyMeetingInputEnvelope = {
  data:
    | Prisma.MeetingInstanceCreateManyMeetingInput
    | Prisma.MeetingInstanceCreateManyMeetingInput[]
  skipDuplicates?: boolean
}

export type MeetingInstanceUpsertWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.MeetingInstanceWhereUniqueInput
  update: Prisma.XOR<
    Prisma.MeetingInstanceUpdateWithoutMeetingInput,
    Prisma.MeetingInstanceUncheckedUpdateWithoutMeetingInput
  >
  create: Prisma.XOR<
    Prisma.MeetingInstanceCreateWithoutMeetingInput,
    Prisma.MeetingInstanceUncheckedCreateWithoutMeetingInput
  >
}

export type MeetingInstanceUpdateWithWhereUniqueWithoutMeetingInput = {
  where: Prisma.MeetingInstanceWhereUniqueInput
  data: Prisma.XOR<
    Prisma.MeetingInstanceUpdateWithoutMeetingInput,
    Prisma.MeetingInstanceUncheckedUpdateWithoutMeetingInput
  >
}

export type MeetingInstanceUpdateManyWithWhereWithoutMeetingInput = {
  where: Prisma.MeetingInstanceScalarWhereInput
  data: Prisma.XOR<
    Prisma.MeetingInstanceUpdateManyMutationInput,
    Prisma.MeetingInstanceUncheckedUpdateManyWithoutMeetingInput
  >
}

export type MeetingInstanceCreateWithoutParticipantsInput = {
  id?: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  meeting: Prisma.MeetingCreateNestedOneWithoutInstancesInput
  organization: Prisma.OrganizationCreateNestedOneWithoutMeetingInstancesInput
}

export type MeetingInstanceUncheckedCreateWithoutParticipantsInput = {
  id?: string
  meetingId: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceCreateOrConnectWithoutParticipantsInput = {
  where: Prisma.MeetingInstanceWhereUniqueInput
  create: Prisma.XOR<
    Prisma.MeetingInstanceCreateWithoutParticipantsInput,
    Prisma.MeetingInstanceUncheckedCreateWithoutParticipantsInput
  >
}

export type MeetingInstanceUpsertWithoutParticipantsInput = {
  update: Prisma.XOR<
    Prisma.MeetingInstanceUpdateWithoutParticipantsInput,
    Prisma.MeetingInstanceUncheckedUpdateWithoutParticipantsInput
  >
  create: Prisma.XOR<
    Prisma.MeetingInstanceCreateWithoutParticipantsInput,
    Prisma.MeetingInstanceUncheckedCreateWithoutParticipantsInput
  >
  where?: Prisma.MeetingInstanceWhereInput
}

export type MeetingInstanceUpdateToOneWithWhereWithoutParticipantsInput = {
  where?: Prisma.MeetingInstanceWhereInput
  data: Prisma.XOR<
    Prisma.MeetingInstanceUpdateWithoutParticipantsInput,
    Prisma.MeetingInstanceUncheckedUpdateWithoutParticipantsInput
  >
}

export type MeetingInstanceUpdateWithoutParticipantsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutInstancesNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutMeetingInstancesNestedInput
}

export type MeetingInstanceUncheckedUpdateWithoutParticipantsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceCreateManyOrganizationInput = {
  id?: string
  meetingId: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  meeting?: Prisma.MeetingUpdateOneRequiredWithoutInstancesNestedInput
  participants?: Prisma.MeetingInstanceParticipantUpdateManyWithoutMeetingInstanceNestedInput
}

export type MeetingInstanceUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participants?: Prisma.MeetingInstanceParticipantUncheckedUpdateManyWithoutMeetingInstanceNestedInput
}

export type MeetingInstanceUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meetingId?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MeetingInstanceCreateManyMeetingInput = {
  id?: string
  scheduledAt: Date | string
  notes?: string | null
  isPrivate?: boolean
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MeetingInstanceUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutMeetingInstancesNestedInput
  participants?: Prisma.MeetingInstanceParticipantUpdateManyWithoutMeetingInstanceNestedInput
}

export type MeetingInstanceUncheckedUpdateWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  participants?: Prisma.MeetingInstanceParticipantUncheckedUpdateManyWithoutMeetingInstanceNestedInput
}

export type MeetingInstanceUncheckedUpdateManyWithoutMeetingInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  scheduledAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isPrivate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

/**
 * Count Type MeetingInstanceCountOutputType
 */

export type MeetingInstanceCountOutputType = {
  participants: number
}

export type MeetingInstanceCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  participants?: boolean | MeetingInstanceCountOutputTypeCountParticipantsArgs
}

/**
 * MeetingInstanceCountOutputType without action
 */
export type MeetingInstanceCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceCountOutputType
   */
  select?: Prisma.MeetingInstanceCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MeetingInstanceCountOutputType without action
 */
export type MeetingInstanceCountOutputTypeCountParticipantsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.MeetingInstanceParticipantWhereInput
}

export type MeetingInstanceSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    meetingId?: boolean
    scheduledAt?: boolean
    notes?: boolean
    isPrivate?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    participants?: boolean | Prisma.MeetingInstance$participantsArgs<ExtArgs>
    _count?: boolean | Prisma.MeetingInstanceCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['meetingInstance']
>

export type MeetingInstanceSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    meetingId?: boolean
    scheduledAt?: boolean
    notes?: boolean
    isPrivate?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['meetingInstance']
>

export type MeetingInstanceSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    meetingId?: boolean
    scheduledAt?: boolean
    notes?: boolean
    isPrivate?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['meetingInstance']
>

export type MeetingInstanceSelectScalar = {
  id?: boolean
  meetingId?: boolean
  scheduledAt?: boolean
  notes?: boolean
  isPrivate?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MeetingInstanceOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'meetingId'
  | 'scheduledAt'
  | 'notes'
  | 'isPrivate'
  | 'organizationId'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['meetingInstance']
>
export type MeetingInstanceInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  participants?: boolean | Prisma.MeetingInstance$participantsArgs<ExtArgs>
  _count?: boolean | Prisma.MeetingInstanceCountOutputTypeDefaultArgs<ExtArgs>
}
export type MeetingInstanceIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type MeetingInstanceIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  meeting?: boolean | Prisma.MeetingDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $MeetingInstancePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'MeetingInstance'
  objects: {
    meeting: Prisma.$MeetingPayload<ExtArgs>
    organization: Prisma.$OrganizationPayload<ExtArgs>
    participants: Prisma.$MeetingInstanceParticipantPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      meetingId: string
      scheduledAt: Date
      notes: string | null
      isPrivate: boolean
      organizationId: string
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['meetingInstance']
  >
  composites: {}
}

export type MeetingInstanceGetPayload<
  S extends boolean | null | undefined | MeetingInstanceDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$MeetingInstancePayload, S>

export type MeetingInstanceCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  MeetingInstanceFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: MeetingInstanceCountAggregateInputType | true
}

export interface MeetingInstanceDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['MeetingInstance']
    meta: { name: 'MeetingInstance' }
  }
  /**
   * Find zero or one MeetingInstance that matches the filter.
   * @param {MeetingInstanceFindUniqueArgs} args - Arguments to find a MeetingInstance
   * @example
   * // Get one MeetingInstance
   * const meetingInstance = await prisma.meetingInstance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MeetingInstanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one MeetingInstance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MeetingInstanceFindUniqueOrThrowArgs} args - Arguments to find a MeetingInstance
   * @example
   * // Get one MeetingInstance
   * const meetingInstance = await prisma.meetingInstance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MeetingInstanceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first MeetingInstance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceFindFirstArgs} args - Arguments to find a MeetingInstance
   * @example
   * // Get one MeetingInstance
   * const meetingInstance = await prisma.meetingInstance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MeetingInstanceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, MeetingInstanceFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first MeetingInstance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceFindFirstOrThrowArgs} args - Arguments to find a MeetingInstance
   * @example
   * // Get one MeetingInstance
   * const meetingInstance = await prisma.meetingInstance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MeetingInstanceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, MeetingInstanceFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more MeetingInstances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MeetingInstances
   * const meetingInstances = await prisma.meetingInstance.findMany()
   *
   * // Get first 10 MeetingInstances
   * const meetingInstances = await prisma.meetingInstance.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const meetingInstanceWithIdOnly = await prisma.meetingInstance.findMany({ select: { id: true } })
   *
   */
  findMany<T extends MeetingInstanceFindManyArgs>(
    args?: Prisma.SelectSubset<T, MeetingInstanceFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a MeetingInstance.
   * @param {MeetingInstanceCreateArgs} args - Arguments to create a MeetingInstance.
   * @example
   * // Create one MeetingInstance
   * const MeetingInstance = await prisma.meetingInstance.create({
   *   data: {
   *     // ... data to create a MeetingInstance
   *   }
   * })
   *
   */
  create<T extends MeetingInstanceCreateArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceCreateArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many MeetingInstances.
   * @param {MeetingInstanceCreateManyArgs} args - Arguments to create many MeetingInstances.
   * @example
   * // Create many MeetingInstances
   * const meetingInstance = await prisma.meetingInstance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends MeetingInstanceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, MeetingInstanceCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MeetingInstances and returns the data saved in the database.
   * @param {MeetingInstanceCreateManyAndReturnArgs} args - Arguments to create many MeetingInstances.
   * @example
   * // Create many MeetingInstances
   * const meetingInstance = await prisma.meetingInstance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many MeetingInstances and only return the `id`
   * const meetingInstanceWithIdOnly = await prisma.meetingInstance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends MeetingInstanceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      MeetingInstanceCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a MeetingInstance.
   * @param {MeetingInstanceDeleteArgs} args - Arguments to delete one MeetingInstance.
   * @example
   * // Delete one MeetingInstance
   * const MeetingInstance = await prisma.meetingInstance.delete({
   *   where: {
   *     // ... filter to delete one MeetingInstance
   *   }
   * })
   *
   */
  delete<T extends MeetingInstanceDeleteArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one MeetingInstance.
   * @param {MeetingInstanceUpdateArgs} args - Arguments to update one MeetingInstance.
   * @example
   * // Update one MeetingInstance
   * const meetingInstance = await prisma.meetingInstance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends MeetingInstanceUpdateArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more MeetingInstances.
   * @param {MeetingInstanceDeleteManyArgs} args - Arguments to filter MeetingInstances to delete.
   * @example
   * // Delete a few MeetingInstances
   * const { count } = await prisma.meetingInstance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends MeetingInstanceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, MeetingInstanceDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingInstances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MeetingInstances
   * const meetingInstance = await prisma.meetingInstance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends MeetingInstanceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MeetingInstances and returns the data updated in the database.
   * @param {MeetingInstanceUpdateManyAndReturnArgs} args - Arguments to update many MeetingInstances.
   * @example
   * // Update many MeetingInstances
   * const meetingInstance = await prisma.meetingInstance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more MeetingInstances and only return the `id`
   * const meetingInstanceWithIdOnly = await prisma.meetingInstance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends MeetingInstanceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      MeetingInstanceUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one MeetingInstance.
   * @param {MeetingInstanceUpsertArgs} args - Arguments to update or create a MeetingInstance.
   * @example
   * // Update or create a MeetingInstance
   * const meetingInstance = await prisma.meetingInstance.upsert({
   *   create: {
   *     // ... data to create a MeetingInstance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MeetingInstance we want to update
   *   }
   * })
   */
  upsert<T extends MeetingInstanceUpsertArgs>(
    args: Prisma.SelectSubset<T, MeetingInstanceUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$MeetingInstancePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of MeetingInstances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceCountArgs} args - Arguments to filter MeetingInstances to count.
   * @example
   * // Count the number of MeetingInstances
   * const count = await prisma.meetingInstance.count({
   *   where: {
   *     // ... the filter for the MeetingInstances we want to count
   *   }
   * })
   **/
  count<T extends MeetingInstanceCountArgs>(
    args?: Prisma.Subset<T, MeetingInstanceCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            MeetingInstanceCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MeetingInstance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends MeetingInstanceAggregateArgs>(
    args: Prisma.Subset<T, MeetingInstanceAggregateArgs>
  ): Prisma.PrismaPromise<GetMeetingInstanceAggregateType<T>>

  /**
   * Group by MeetingInstance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MeetingInstanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends MeetingInstanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MeetingInstanceGroupByArgs['orderBy'] }
      : { orderBy?: MeetingInstanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, MeetingInstanceGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetMeetingInstanceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetingInstance model
   */
  readonly fields: MeetingInstanceFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for MeetingInstance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MeetingInstanceClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  meeting<T extends Prisma.MeetingDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MeetingDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__MeetingClient<
    | runtime.Types.Result.GetResult<
        Prisma.$MeetingPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrganizationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  participants<T extends Prisma.MeetingInstance$participantsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.MeetingInstance$participantsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$MeetingInstanceParticipantPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the MeetingInstance model
 */
export interface MeetingInstanceFieldRefs {
  readonly id: Prisma.FieldRef<'MeetingInstance', 'String'>
  readonly meetingId: Prisma.FieldRef<'MeetingInstance', 'String'>
  readonly scheduledAt: Prisma.FieldRef<'MeetingInstance', 'DateTime'>
  readonly notes: Prisma.FieldRef<'MeetingInstance', 'String'>
  readonly isPrivate: Prisma.FieldRef<'MeetingInstance', 'Boolean'>
  readonly organizationId: Prisma.FieldRef<'MeetingInstance', 'String'>
  readonly createdAt: Prisma.FieldRef<'MeetingInstance', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'MeetingInstance', 'DateTime'>
}

// Custom InputTypes
/**
 * MeetingInstance findUnique
 */
export type MeetingInstanceFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstance to fetch.
   */
  where: Prisma.MeetingInstanceWhereUniqueInput
}

/**
 * MeetingInstance findUniqueOrThrow
 */
export type MeetingInstanceFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstance to fetch.
   */
  where: Prisma.MeetingInstanceWhereUniqueInput
}

/**
 * MeetingInstance findFirst
 */
export type MeetingInstanceFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstance to fetch.
   */
  where?: Prisma.MeetingInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MeetingInstances to fetch.
   */
  orderBy?:
    | Prisma.MeetingInstanceOrderByWithRelationInput
    | Prisma.MeetingInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MeetingInstances.
   */
  cursor?: Prisma.MeetingInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MeetingInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MeetingInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MeetingInstances.
   */
  distinct?:
    | Prisma.MeetingInstanceScalarFieldEnum
    | Prisma.MeetingInstanceScalarFieldEnum[]
}

/**
 * MeetingInstance findFirstOrThrow
 */
export type MeetingInstanceFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstance to fetch.
   */
  where?: Prisma.MeetingInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MeetingInstances to fetch.
   */
  orderBy?:
    | Prisma.MeetingInstanceOrderByWithRelationInput
    | Prisma.MeetingInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for MeetingInstances.
   */
  cursor?: Prisma.MeetingInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MeetingInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MeetingInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of MeetingInstances.
   */
  distinct?:
    | Prisma.MeetingInstanceScalarFieldEnum
    | Prisma.MeetingInstanceScalarFieldEnum[]
}

/**
 * MeetingInstance findMany
 */
export type MeetingInstanceFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * Filter, which MeetingInstances to fetch.
   */
  where?: Prisma.MeetingInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of MeetingInstances to fetch.
   */
  orderBy?:
    | Prisma.MeetingInstanceOrderByWithRelationInput
    | Prisma.MeetingInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing MeetingInstances.
   */
  cursor?: Prisma.MeetingInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` MeetingInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` MeetingInstances.
   */
  skip?: number
  distinct?:
    | Prisma.MeetingInstanceScalarFieldEnum
    | Prisma.MeetingInstanceScalarFieldEnum[]
}

/**
 * MeetingInstance create
 */
export type MeetingInstanceCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * The data needed to create a MeetingInstance.
   */
  data: Prisma.XOR<
    Prisma.MeetingInstanceCreateInput,
    Prisma.MeetingInstanceUncheckedCreateInput
  >
}

/**
 * MeetingInstance createMany
 */
export type MeetingInstanceCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many MeetingInstances.
   */
  data:
    | Prisma.MeetingInstanceCreateManyInput
    | Prisma.MeetingInstanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MeetingInstance createManyAndReturn
 */
export type MeetingInstanceCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * The data used to create many MeetingInstances.
   */
  data:
    | Prisma.MeetingInstanceCreateManyInput
    | Prisma.MeetingInstanceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingInstance update
 */
export type MeetingInstanceUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * The data needed to update a MeetingInstance.
   */
  data: Prisma.XOR<
    Prisma.MeetingInstanceUpdateInput,
    Prisma.MeetingInstanceUncheckedUpdateInput
  >
  /**
   * Choose, which MeetingInstance to update.
   */
  where: Prisma.MeetingInstanceWhereUniqueInput
}

/**
 * MeetingInstance updateMany
 */
export type MeetingInstanceUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update MeetingInstances.
   */
  data: Prisma.XOR<
    Prisma.MeetingInstanceUpdateManyMutationInput,
    Prisma.MeetingInstanceUncheckedUpdateManyInput
  >
  /**
   * Filter which MeetingInstances to update
   */
  where?: Prisma.MeetingInstanceWhereInput
  /**
   * Limit how many MeetingInstances to update.
   */
  limit?: number
}

/**
 * MeetingInstance updateManyAndReturn
 */
export type MeetingInstanceUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * The data used to update MeetingInstances.
   */
  data: Prisma.XOR<
    Prisma.MeetingInstanceUpdateManyMutationInput,
    Prisma.MeetingInstanceUncheckedUpdateManyInput
  >
  /**
   * Filter which MeetingInstances to update
   */
  where?: Prisma.MeetingInstanceWhereInput
  /**
   * Limit how many MeetingInstances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MeetingInstance upsert
 */
export type MeetingInstanceUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * The filter to search for the MeetingInstance to update in case it exists.
   */
  where: Prisma.MeetingInstanceWhereUniqueInput
  /**
   * In case the MeetingInstance found by the `where` argument doesn't exist, create a new MeetingInstance with this data.
   */
  create: Prisma.XOR<
    Prisma.MeetingInstanceCreateInput,
    Prisma.MeetingInstanceUncheckedCreateInput
  >
  /**
   * In case the MeetingInstance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.MeetingInstanceUpdateInput,
    Prisma.MeetingInstanceUncheckedUpdateInput
  >
}

/**
 * MeetingInstance delete
 */
export type MeetingInstanceDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
  /**
   * Filter which MeetingInstance to delete.
   */
  where: Prisma.MeetingInstanceWhereUniqueInput
}

/**
 * MeetingInstance deleteMany
 */
export type MeetingInstanceDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which MeetingInstances to delete
   */
  where?: Prisma.MeetingInstanceWhereInput
  /**
   * Limit how many MeetingInstances to delete.
   */
  limit?: number
}

/**
 * MeetingInstance.participants
 */
export type MeetingInstance$participantsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstanceParticipant
   */
  select?: Prisma.MeetingInstanceParticipantSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstanceParticipant
   */
  omit?: Prisma.MeetingInstanceParticipantOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceParticipantInclude<ExtArgs> | null
  where?: Prisma.MeetingInstanceParticipantWhereInput
  orderBy?:
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput
    | Prisma.MeetingInstanceParticipantOrderByWithRelationInput[]
  cursor?: Prisma.MeetingInstanceParticipantWhereUniqueInput
  take?: number
  skip?: number
  distinct?:
    | Prisma.MeetingInstanceParticipantScalarFieldEnum
    | Prisma.MeetingInstanceParticipantScalarFieldEnum[]
}

/**
 * MeetingInstance without action
 */
export type MeetingInstanceDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the MeetingInstance
   */
  select?: Prisma.MeetingInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MeetingInstance
   */
  omit?: Prisma.MeetingInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MeetingInstanceInclude<ExtArgs> | null
}
