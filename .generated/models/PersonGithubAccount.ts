/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `PersonGithubAccount` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model PersonGithubAccount
 *
 */
export type PersonGithubAccountModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PersonGithubAccountPayload>

export type AggregatePersonGithubAccount = {
  _count: PersonGithubAccountCountAggregateOutputType | null
  _min: PersonGithubAccountMinAggregateOutputType | null
  _max: PersonGithubAccountMaxAggregateOutputType | null
}

export type PersonGithubAccountMinAggregateOutputType = {
  id: string | null
  personId: string | null
  githubUsername: string | null
  githubDisplayName: string | null
  githubEmail: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PersonGithubAccountMaxAggregateOutputType = {
  id: string | null
  personId: string | null
  githubUsername: string | null
  githubDisplayName: string | null
  githubEmail: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PersonGithubAccountCountAggregateOutputType = {
  id: number
  personId: number
  githubUsername: number
  githubDisplayName: number
  githubEmail: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type PersonGithubAccountMinAggregateInputType = {
  id?: true
  personId?: true
  githubUsername?: true
  githubDisplayName?: true
  githubEmail?: true
  createdAt?: true
  updatedAt?: true
}

export type PersonGithubAccountMaxAggregateInputType = {
  id?: true
  personId?: true
  githubUsername?: true
  githubDisplayName?: true
  githubEmail?: true
  createdAt?: true
  updatedAt?: true
}

export type PersonGithubAccountCountAggregateInputType = {
  id?: true
  personId?: true
  githubUsername?: true
  githubDisplayName?: true
  githubEmail?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PersonGithubAccountAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PersonGithubAccount to aggregate.
   */
  where?: Prisma.PersonGithubAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonGithubAccounts to fetch.
   */
  orderBy?:
    | Prisma.PersonGithubAccountOrderByWithRelationInput
    | Prisma.PersonGithubAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PersonGithubAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonGithubAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonGithubAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned PersonGithubAccounts
   **/
  _count?: true | PersonGithubAccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PersonGithubAccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PersonGithubAccountMaxAggregateInputType
}

export type GetPersonGithubAccountAggregateType<
  T extends PersonGithubAccountAggregateArgs,
> = {
  [P in keyof T & keyof AggregatePersonGithubAccount]: P extends
    | '_count'
    | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePersonGithubAccount[P]>
    : Prisma.GetScalarType<T[P], AggregatePersonGithubAccount[P]>
}

export type PersonGithubAccountGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PersonGithubAccountWhereInput
  orderBy?:
    | Prisma.PersonGithubAccountOrderByWithAggregationInput
    | Prisma.PersonGithubAccountOrderByWithAggregationInput[]
  by:
    | Prisma.PersonGithubAccountScalarFieldEnum[]
    | Prisma.PersonGithubAccountScalarFieldEnum
  having?: Prisma.PersonGithubAccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PersonGithubAccountCountAggregateInputType | true
  _min?: PersonGithubAccountMinAggregateInputType
  _max?: PersonGithubAccountMaxAggregateInputType
}

export type PersonGithubAccountGroupByOutputType = {
  id: string
  personId: string
  githubUsername: string
  githubDisplayName: string | null
  githubEmail: string | null
  createdAt: Date
  updatedAt: Date
  _count: PersonGithubAccountCountAggregateOutputType | null
  _min: PersonGithubAccountMinAggregateOutputType | null
  _max: PersonGithubAccountMaxAggregateOutputType | null
}

type GetPersonGithubAccountGroupByPayload<
  T extends PersonGithubAccountGroupByArgs,
> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PersonGithubAccountGroupByOutputType, T['by']> & {
      [P in keyof T &
        keyof PersonGithubAccountGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], PersonGithubAccountGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], PersonGithubAccountGroupByOutputType[P]>
    }
  >
>

export type PersonGithubAccountWhereInput = {
  AND?:
    | Prisma.PersonGithubAccountWhereInput
    | Prisma.PersonGithubAccountWhereInput[]
  OR?: Prisma.PersonGithubAccountWhereInput[]
  NOT?:
    | Prisma.PersonGithubAccountWhereInput
    | Prisma.PersonGithubAccountWhereInput[]
  id?: Prisma.StringFilter<'PersonGithubAccount'> | string
  personId?: Prisma.StringFilter<'PersonGithubAccount'> | string
  githubUsername?: Prisma.StringFilter<'PersonGithubAccount'> | string
  githubDisplayName?:
    | Prisma.StringNullableFilter<'PersonGithubAccount'>
    | string
    | null
  githubEmail?:
    | Prisma.StringNullableFilter<'PersonGithubAccount'>
    | string
    | null
  createdAt?: Prisma.DateTimeFilter<'PersonGithubAccount'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'PersonGithubAccount'> | Date | string
  person?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
}

export type PersonGithubAccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  githubDisplayName?: Prisma.SortOrderInput | Prisma.SortOrder
  githubEmail?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  person?: Prisma.PersonOrderByWithRelationInput
}

export type PersonGithubAccountWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    personId?: string
    AND?:
      | Prisma.PersonGithubAccountWhereInput
      | Prisma.PersonGithubAccountWhereInput[]
    OR?: Prisma.PersonGithubAccountWhereInput[]
    NOT?:
      | Prisma.PersonGithubAccountWhereInput
      | Prisma.PersonGithubAccountWhereInput[]
    githubUsername?: Prisma.StringFilter<'PersonGithubAccount'> | string
    githubDisplayName?:
      | Prisma.StringNullableFilter<'PersonGithubAccount'>
      | string
      | null
    githubEmail?:
      | Prisma.StringNullableFilter<'PersonGithubAccount'>
      | string
      | null
    createdAt?: Prisma.DateTimeFilter<'PersonGithubAccount'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'PersonGithubAccount'> | Date | string
    person?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
  },
  'id' | 'personId'
>

export type PersonGithubAccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  githubDisplayName?: Prisma.SortOrderInput | Prisma.SortOrder
  githubEmail?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PersonGithubAccountCountOrderByAggregateInput
  _max?: Prisma.PersonGithubAccountMaxOrderByAggregateInput
  _min?: Prisma.PersonGithubAccountMinOrderByAggregateInput
}

export type PersonGithubAccountScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PersonGithubAccountScalarWhereWithAggregatesInput
    | Prisma.PersonGithubAccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.PersonGithubAccountScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.PersonGithubAccountScalarWhereWithAggregatesInput
    | Prisma.PersonGithubAccountScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'PersonGithubAccount'> | string
  personId?: Prisma.StringWithAggregatesFilter<'PersonGithubAccount'> | string
  githubUsername?:
    | Prisma.StringWithAggregatesFilter<'PersonGithubAccount'>
    | string
  githubDisplayName?:
    | Prisma.StringNullableWithAggregatesFilter<'PersonGithubAccount'>
    | string
    | null
  githubEmail?:
    | Prisma.StringNullableWithAggregatesFilter<'PersonGithubAccount'>
    | string
    | null
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'PersonGithubAccount'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'PersonGithubAccount'>
    | Date
    | string
}

export type PersonGithubAccountCreateInput = {
  id?: string
  githubUsername: string
  githubDisplayName?: string | null
  githubEmail?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  person: Prisma.PersonCreateNestedOneWithoutGithubAccountInput
}

export type PersonGithubAccountUncheckedCreateInput = {
  id?: string
  personId: string
  githubUsername: string
  githubDisplayName?: string | null
  githubEmail?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonGithubAccountUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  githubDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  githubEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  person?: Prisma.PersonUpdateOneRequiredWithoutGithubAccountNestedInput
}

export type PersonGithubAccountUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  githubDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  githubEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonGithubAccountCreateManyInput = {
  id?: string
  personId: string
  githubUsername: string
  githubDisplayName?: string | null
  githubEmail?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonGithubAccountUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  githubDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  githubEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonGithubAccountUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  githubDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  githubEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonGithubAccountNullableScalarRelationFilter = {
  is?: Prisma.PersonGithubAccountWhereInput | null
  isNot?: Prisma.PersonGithubAccountWhereInput | null
}

export type PersonGithubAccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  githubDisplayName?: Prisma.SortOrder
  githubEmail?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonGithubAccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  githubDisplayName?: Prisma.SortOrder
  githubEmail?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonGithubAccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  githubUsername?: Prisma.SortOrder
  githubDisplayName?: Prisma.SortOrder
  githubEmail?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonGithubAccountCreateNestedOneWithoutPersonInput = {
  create?: Prisma.XOR<
    Prisma.PersonGithubAccountCreateWithoutPersonInput,
    Prisma.PersonGithubAccountUncheckedCreateWithoutPersonInput
  >
  connectOrCreate?: Prisma.PersonGithubAccountCreateOrConnectWithoutPersonInput
  connect?: Prisma.PersonGithubAccountWhereUniqueInput
}

export type PersonGithubAccountUncheckedCreateNestedOneWithoutPersonInput = {
  create?: Prisma.XOR<
    Prisma.PersonGithubAccountCreateWithoutPersonInput,
    Prisma.PersonGithubAccountUncheckedCreateWithoutPersonInput
  >
  connectOrCreate?: Prisma.PersonGithubAccountCreateOrConnectWithoutPersonInput
  connect?: Prisma.PersonGithubAccountWhereUniqueInput
}

export type PersonGithubAccountUpdateOneWithoutPersonNestedInput = {
  create?: Prisma.XOR<
    Prisma.PersonGithubAccountCreateWithoutPersonInput,
    Prisma.PersonGithubAccountUncheckedCreateWithoutPersonInput
  >
  connectOrCreate?: Prisma.PersonGithubAccountCreateOrConnectWithoutPersonInput
  upsert?: Prisma.PersonGithubAccountUpsertWithoutPersonInput
  disconnect?: Prisma.PersonGithubAccountWhereInput | boolean
  delete?: Prisma.PersonGithubAccountWhereInput | boolean
  connect?: Prisma.PersonGithubAccountWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PersonGithubAccountUpdateToOneWithWhereWithoutPersonInput,
      Prisma.PersonGithubAccountUpdateWithoutPersonInput
    >,
    Prisma.PersonGithubAccountUncheckedUpdateWithoutPersonInput
  >
}

export type PersonGithubAccountUncheckedUpdateOneWithoutPersonNestedInput = {
  create?: Prisma.XOR<
    Prisma.PersonGithubAccountCreateWithoutPersonInput,
    Prisma.PersonGithubAccountUncheckedCreateWithoutPersonInput
  >
  connectOrCreate?: Prisma.PersonGithubAccountCreateOrConnectWithoutPersonInput
  upsert?: Prisma.PersonGithubAccountUpsertWithoutPersonInput
  disconnect?: Prisma.PersonGithubAccountWhereInput | boolean
  delete?: Prisma.PersonGithubAccountWhereInput | boolean
  connect?: Prisma.PersonGithubAccountWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PersonGithubAccountUpdateToOneWithWhereWithoutPersonInput,
      Prisma.PersonGithubAccountUpdateWithoutPersonInput
    >,
    Prisma.PersonGithubAccountUncheckedUpdateWithoutPersonInput
  >
}

export type PersonGithubAccountCreateWithoutPersonInput = {
  id?: string
  githubUsername: string
  githubDisplayName?: string | null
  githubEmail?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonGithubAccountUncheckedCreateWithoutPersonInput = {
  id?: string
  githubUsername: string
  githubDisplayName?: string | null
  githubEmail?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonGithubAccountCreateOrConnectWithoutPersonInput = {
  where: Prisma.PersonGithubAccountWhereUniqueInput
  create: Prisma.XOR<
    Prisma.PersonGithubAccountCreateWithoutPersonInput,
    Prisma.PersonGithubAccountUncheckedCreateWithoutPersonInput
  >
}

export type PersonGithubAccountUpsertWithoutPersonInput = {
  update: Prisma.XOR<
    Prisma.PersonGithubAccountUpdateWithoutPersonInput,
    Prisma.PersonGithubAccountUncheckedUpdateWithoutPersonInput
  >
  create: Prisma.XOR<
    Prisma.PersonGithubAccountCreateWithoutPersonInput,
    Prisma.PersonGithubAccountUncheckedCreateWithoutPersonInput
  >
  where?: Prisma.PersonGithubAccountWhereInput
}

export type PersonGithubAccountUpdateToOneWithWhereWithoutPersonInput = {
  where?: Prisma.PersonGithubAccountWhereInput
  data: Prisma.XOR<
    Prisma.PersonGithubAccountUpdateWithoutPersonInput,
    Prisma.PersonGithubAccountUncheckedUpdateWithoutPersonInput
  >
}

export type PersonGithubAccountUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  githubDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  githubEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonGithubAccountUncheckedUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  githubUsername?: Prisma.StringFieldUpdateOperationsInput | string
  githubDisplayName?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null
  githubEmail?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonGithubAccountSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    githubUsername?: boolean
    githubDisplayName?: boolean
    githubEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personGithubAccount']
>

export type PersonGithubAccountSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    githubUsername?: boolean
    githubDisplayName?: boolean
    githubEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personGithubAccount']
>

export type PersonGithubAccountSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    githubUsername?: boolean
    githubDisplayName?: boolean
    githubEmail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personGithubAccount']
>

export type PersonGithubAccountSelectScalar = {
  id?: boolean
  personId?: boolean
  githubUsername?: boolean
  githubDisplayName?: boolean
  githubEmail?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PersonGithubAccountOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'personId'
  | 'githubUsername'
  | 'githubDisplayName'
  | 'githubEmail'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['personGithubAccount']
>
export type PersonGithubAccountInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type PersonGithubAccountIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type PersonGithubAccountIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}

export type $PersonGithubAccountPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'PersonGithubAccount'
  objects: {
    person: Prisma.$PersonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      personId: string
      githubUsername: string
      githubDisplayName: string | null
      githubEmail: string | null
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['personGithubAccount']
  >
  composites: {}
}

export type PersonGithubAccountGetPayload<
  S extends boolean | null | undefined | PersonGithubAccountDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PersonGithubAccountPayload, S>

export type PersonGithubAccountCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  PersonGithubAccountFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: PersonGithubAccountCountAggregateInputType | true
}

export interface PersonGithubAccountDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['PersonGithubAccount']
    meta: { name: 'PersonGithubAccount' }
  }
  /**
   * Find zero or one PersonGithubAccount that matches the filter.
   * @param {PersonGithubAccountFindUniqueArgs} args - Arguments to find a PersonGithubAccount
   * @example
   * // Get one PersonGithubAccount
   * const personGithubAccount = await prisma.personGithubAccount.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PersonGithubAccountFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PersonGithubAccountFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__PersonGithubAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one PersonGithubAccount that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PersonGithubAccountFindUniqueOrThrowArgs} args - Arguments to find a PersonGithubAccount
   * @example
   * // Get one PersonGithubAccount
   * const personGithubAccount = await prisma.personGithubAccount.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PersonGithubAccountFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      PersonGithubAccountFindUniqueOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__PersonGithubAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first PersonGithubAccount that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonGithubAccountFindFirstArgs} args - Arguments to find a PersonGithubAccount
   * @example
   * // Get one PersonGithubAccount
   * const personGithubAccount = await prisma.personGithubAccount.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PersonGithubAccountFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PersonGithubAccountFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__PersonGithubAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first PersonGithubAccount that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonGithubAccountFindFirstOrThrowArgs} args - Arguments to find a PersonGithubAccount
   * @example
   * // Get one PersonGithubAccount
   * const personGithubAccount = await prisma.personGithubAccount.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PersonGithubAccountFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      PersonGithubAccountFindFirstOrThrowArgs<ExtArgs>
    >
  ): Prisma.Prisma__PersonGithubAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more PersonGithubAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonGithubAccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PersonGithubAccounts
   * const personGithubAccounts = await prisma.personGithubAccount.findMany()
   *
   * // Get first 10 PersonGithubAccounts
   * const personGithubAccounts = await prisma.personGithubAccount.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const personGithubAccountWithIdOnly = await prisma.personGithubAccount.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PersonGithubAccountFindManyArgs>(
    args?: Prisma.SelectSubset<T, PersonGithubAccountFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a PersonGithubAccount.
   * @param {PersonGithubAccountCreateArgs} args - Arguments to create a PersonGithubAccount.
   * @example
   * // Create one PersonGithubAccount
   * const PersonGithubAccount = await prisma.personGithubAccount.create({
   *   data: {
   *     // ... data to create a PersonGithubAccount
   *   }
   * })
   *
   */
  create<T extends PersonGithubAccountCreateArgs>(
    args: Prisma.SelectSubset<T, PersonGithubAccountCreateArgs<ExtArgs>>
  ): Prisma.Prisma__PersonGithubAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many PersonGithubAccounts.
   * @param {PersonGithubAccountCreateManyArgs} args - Arguments to create many PersonGithubAccounts.
   * @example
   * // Create many PersonGithubAccounts
   * const personGithubAccount = await prisma.personGithubAccount.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PersonGithubAccountCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PersonGithubAccountCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PersonGithubAccounts and returns the data saved in the database.
   * @param {PersonGithubAccountCreateManyAndReturnArgs} args - Arguments to create many PersonGithubAccounts.
   * @example
   * // Create many PersonGithubAccounts
   * const personGithubAccount = await prisma.personGithubAccount.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many PersonGithubAccounts and only return the `id`
   * const personGithubAccountWithIdOnly = await prisma.personGithubAccount.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PersonGithubAccountCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      PersonGithubAccountCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a PersonGithubAccount.
   * @param {PersonGithubAccountDeleteArgs} args - Arguments to delete one PersonGithubAccount.
   * @example
   * // Delete one PersonGithubAccount
   * const PersonGithubAccount = await prisma.personGithubAccount.delete({
   *   where: {
   *     // ... filter to delete one PersonGithubAccount
   *   }
   * })
   *
   */
  delete<T extends PersonGithubAccountDeleteArgs>(
    args: Prisma.SelectSubset<T, PersonGithubAccountDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__PersonGithubAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one PersonGithubAccount.
   * @param {PersonGithubAccountUpdateArgs} args - Arguments to update one PersonGithubAccount.
   * @example
   * // Update one PersonGithubAccount
   * const personGithubAccount = await prisma.personGithubAccount.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PersonGithubAccountUpdateArgs>(
    args: Prisma.SelectSubset<T, PersonGithubAccountUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__PersonGithubAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more PersonGithubAccounts.
   * @param {PersonGithubAccountDeleteManyArgs} args - Arguments to filter PersonGithubAccounts to delete.
   * @example
   * // Delete a few PersonGithubAccounts
   * const { count } = await prisma.personGithubAccount.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PersonGithubAccountDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PersonGithubAccountDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PersonGithubAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonGithubAccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PersonGithubAccounts
   * const personGithubAccount = await prisma.personGithubAccount.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PersonGithubAccountUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PersonGithubAccountUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PersonGithubAccounts and returns the data updated in the database.
   * @param {PersonGithubAccountUpdateManyAndReturnArgs} args - Arguments to update many PersonGithubAccounts.
   * @example
   * // Update many PersonGithubAccounts
   * const personGithubAccount = await prisma.personGithubAccount.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more PersonGithubAccounts and only return the `id`
   * const personGithubAccountWithIdOnly = await prisma.personGithubAccount.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PersonGithubAccountUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      PersonGithubAccountUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one PersonGithubAccount.
   * @param {PersonGithubAccountUpsertArgs} args - Arguments to update or create a PersonGithubAccount.
   * @example
   * // Update or create a PersonGithubAccount
   * const personGithubAccount = await prisma.personGithubAccount.upsert({
   *   create: {
   *     // ... data to create a PersonGithubAccount
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PersonGithubAccount we want to update
   *   }
   * })
   */
  upsert<T extends PersonGithubAccountUpsertArgs>(
    args: Prisma.SelectSubset<T, PersonGithubAccountUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__PersonGithubAccountClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonGithubAccountPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of PersonGithubAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonGithubAccountCountArgs} args - Arguments to filter PersonGithubAccounts to count.
   * @example
   * // Count the number of PersonGithubAccounts
   * const count = await prisma.personGithubAccount.count({
   *   where: {
   *     // ... the filter for the PersonGithubAccounts we want to count
   *   }
   * })
   **/
  count<T extends PersonGithubAccountCountArgs>(
    args?: Prisma.Subset<T, PersonGithubAccountCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            PersonGithubAccountCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PersonGithubAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonGithubAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PersonGithubAccountAggregateArgs>(
    args: Prisma.Subset<T, PersonGithubAccountAggregateArgs>
  ): Prisma.PrismaPromise<GetPersonGithubAccountAggregateType<T>>

  /**
   * Group by PersonGithubAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonGithubAccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PersonGithubAccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PersonGithubAccountGroupByArgs['orderBy'] }
      : { orderBy?: PersonGithubAccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      PersonGithubAccountGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetPersonGithubAccountGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonGithubAccount model
   */
  readonly fields: PersonGithubAccountFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for PersonGithubAccount.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PersonGithubAccountClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  person<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the PersonGithubAccount model
 */
export interface PersonGithubAccountFieldRefs {
  readonly id: Prisma.FieldRef<'PersonGithubAccount', 'String'>
  readonly personId: Prisma.FieldRef<'PersonGithubAccount', 'String'>
  readonly githubUsername: Prisma.FieldRef<'PersonGithubAccount', 'String'>
  readonly githubDisplayName: Prisma.FieldRef<'PersonGithubAccount', 'String'>
  readonly githubEmail: Prisma.FieldRef<'PersonGithubAccount', 'String'>
  readonly createdAt: Prisma.FieldRef<'PersonGithubAccount', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'PersonGithubAccount', 'DateTime'>
}

// Custom InputTypes
/**
 * PersonGithubAccount findUnique
 */
export type PersonGithubAccountFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonGithubAccount to fetch.
   */
  where: Prisma.PersonGithubAccountWhereUniqueInput
}

/**
 * PersonGithubAccount findUniqueOrThrow
 */
export type PersonGithubAccountFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonGithubAccount to fetch.
   */
  where: Prisma.PersonGithubAccountWhereUniqueInput
}

/**
 * PersonGithubAccount findFirst
 */
export type PersonGithubAccountFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonGithubAccount to fetch.
   */
  where?: Prisma.PersonGithubAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonGithubAccounts to fetch.
   */
  orderBy?:
    | Prisma.PersonGithubAccountOrderByWithRelationInput
    | Prisma.PersonGithubAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PersonGithubAccounts.
   */
  cursor?: Prisma.PersonGithubAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonGithubAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonGithubAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PersonGithubAccounts.
   */
  distinct?:
    | Prisma.PersonGithubAccountScalarFieldEnum
    | Prisma.PersonGithubAccountScalarFieldEnum[]
}

/**
 * PersonGithubAccount findFirstOrThrow
 */
export type PersonGithubAccountFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonGithubAccount to fetch.
   */
  where?: Prisma.PersonGithubAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonGithubAccounts to fetch.
   */
  orderBy?:
    | Prisma.PersonGithubAccountOrderByWithRelationInput
    | Prisma.PersonGithubAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PersonGithubAccounts.
   */
  cursor?: Prisma.PersonGithubAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonGithubAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonGithubAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PersonGithubAccounts.
   */
  distinct?:
    | Prisma.PersonGithubAccountScalarFieldEnum
    | Prisma.PersonGithubAccountScalarFieldEnum[]
}

/**
 * PersonGithubAccount findMany
 */
export type PersonGithubAccountFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * Filter, which PersonGithubAccounts to fetch.
   */
  where?: Prisma.PersonGithubAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonGithubAccounts to fetch.
   */
  orderBy?:
    | Prisma.PersonGithubAccountOrderByWithRelationInput
    | Prisma.PersonGithubAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing PersonGithubAccounts.
   */
  cursor?: Prisma.PersonGithubAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonGithubAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonGithubAccounts.
   */
  skip?: number
  distinct?:
    | Prisma.PersonGithubAccountScalarFieldEnum
    | Prisma.PersonGithubAccountScalarFieldEnum[]
}

/**
 * PersonGithubAccount create
 */
export type PersonGithubAccountCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * The data needed to create a PersonGithubAccount.
   */
  data: Prisma.XOR<
    Prisma.PersonGithubAccountCreateInput,
    Prisma.PersonGithubAccountUncheckedCreateInput
  >
}

/**
 * PersonGithubAccount createMany
 */
export type PersonGithubAccountCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many PersonGithubAccounts.
   */
  data:
    | Prisma.PersonGithubAccountCreateManyInput
    | Prisma.PersonGithubAccountCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PersonGithubAccount createManyAndReturn
 */
export type PersonGithubAccountCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * The data used to create many PersonGithubAccounts.
   */
  data:
    | Prisma.PersonGithubAccountCreateManyInput
    | Prisma.PersonGithubAccountCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PersonGithubAccount update
 */
export type PersonGithubAccountUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * The data needed to update a PersonGithubAccount.
   */
  data: Prisma.XOR<
    Prisma.PersonGithubAccountUpdateInput,
    Prisma.PersonGithubAccountUncheckedUpdateInput
  >
  /**
   * Choose, which PersonGithubAccount to update.
   */
  where: Prisma.PersonGithubAccountWhereUniqueInput
}

/**
 * PersonGithubAccount updateMany
 */
export type PersonGithubAccountUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update PersonGithubAccounts.
   */
  data: Prisma.XOR<
    Prisma.PersonGithubAccountUpdateManyMutationInput,
    Prisma.PersonGithubAccountUncheckedUpdateManyInput
  >
  /**
   * Filter which PersonGithubAccounts to update
   */
  where?: Prisma.PersonGithubAccountWhereInput
  /**
   * Limit how many PersonGithubAccounts to update.
   */
  limit?: number
}

/**
 * PersonGithubAccount updateManyAndReturn
 */
export type PersonGithubAccountUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * The data used to update PersonGithubAccounts.
   */
  data: Prisma.XOR<
    Prisma.PersonGithubAccountUpdateManyMutationInput,
    Prisma.PersonGithubAccountUncheckedUpdateManyInput
  >
  /**
   * Filter which PersonGithubAccounts to update
   */
  where?: Prisma.PersonGithubAccountWhereInput
  /**
   * Limit how many PersonGithubAccounts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PersonGithubAccount upsert
 */
export type PersonGithubAccountUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * The filter to search for the PersonGithubAccount to update in case it exists.
   */
  where: Prisma.PersonGithubAccountWhereUniqueInput
  /**
   * In case the PersonGithubAccount found by the `where` argument doesn't exist, create a new PersonGithubAccount with this data.
   */
  create: Prisma.XOR<
    Prisma.PersonGithubAccountCreateInput,
    Prisma.PersonGithubAccountUncheckedCreateInput
  >
  /**
   * In case the PersonGithubAccount was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.PersonGithubAccountUpdateInput,
    Prisma.PersonGithubAccountUncheckedUpdateInput
  >
}

/**
 * PersonGithubAccount delete
 */
export type PersonGithubAccountDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
  /**
   * Filter which PersonGithubAccount to delete.
   */
  where: Prisma.PersonGithubAccountWhereUniqueInput
}

/**
 * PersonGithubAccount deleteMany
 */
export type PersonGithubAccountDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PersonGithubAccounts to delete
   */
  where?: Prisma.PersonGithubAccountWhereInput
  /**
   * Limit how many PersonGithubAccounts to delete.
   */
  limit?: number
}

/**
 * PersonGithubAccount without action
 */
export type PersonGithubAccountDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonGithubAccount
   */
  select?: Prisma.PersonGithubAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonGithubAccount
   */
  omit?: Prisma.PersonGithubAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonGithubAccountInclude<ExtArgs> | null
}
