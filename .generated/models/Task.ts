/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Task` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model Task
 *
 */
export type TaskModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TaskPayload>

export type AggregateTask = {
  _count: TaskCountAggregateOutputType | null
  _avg: TaskAvgAggregateOutputType | null
  _sum: TaskSumAggregateOutputType | null
  _min: TaskMinAggregateOutputType | null
  _max: TaskMaxAggregateOutputType | null
}

export type TaskAvgAggregateOutputType = {
  priority: number | null
  estimate: number | null
}

export type TaskSumAggregateOutputType = {
  priority: number | null
  estimate: number | null
}

export type TaskMinAggregateOutputType = {
  id: string | null
  objectiveId: string | null
  initiativeId: string | null
  title: string | null
  description: string | null
  assigneeId: string | null
  createdById: string | null
  status: string | null
  priority: number | null
  estimate: number | null
  dueDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  completedAt: Date | null
}

export type TaskMaxAggregateOutputType = {
  id: string | null
  objectiveId: string | null
  initiativeId: string | null
  title: string | null
  description: string | null
  assigneeId: string | null
  createdById: string | null
  status: string | null
  priority: number | null
  estimate: number | null
  dueDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  completedAt: Date | null
}

export type TaskCountAggregateOutputType = {
  id: number
  objectiveId: number
  initiativeId: number
  title: number
  description: number
  assigneeId: number
  createdById: number
  status: number
  priority: number
  estimate: number
  dueDate: number
  createdAt: number
  updatedAt: number
  completedAt: number
  _all: number
}

export type TaskAvgAggregateInputType = {
  priority?: true
  estimate?: true
}

export type TaskSumAggregateInputType = {
  priority?: true
  estimate?: true
}

export type TaskMinAggregateInputType = {
  id?: true
  objectiveId?: true
  initiativeId?: true
  title?: true
  description?: true
  assigneeId?: true
  createdById?: true
  status?: true
  priority?: true
  estimate?: true
  dueDate?: true
  createdAt?: true
  updatedAt?: true
  completedAt?: true
}

export type TaskMaxAggregateInputType = {
  id?: true
  objectiveId?: true
  initiativeId?: true
  title?: true
  description?: true
  assigneeId?: true
  createdById?: true
  status?: true
  priority?: true
  estimate?: true
  dueDate?: true
  createdAt?: true
  updatedAt?: true
  completedAt?: true
}

export type TaskCountAggregateInputType = {
  id?: true
  objectiveId?: true
  initiativeId?: true
  title?: true
  description?: true
  assigneeId?: true
  createdById?: true
  status?: true
  priority?: true
  estimate?: true
  dueDate?: true
  createdAt?: true
  updatedAt?: true
  completedAt?: true
  _all?: true
}

export type TaskAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Task to aggregate.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tasks to fetch.
   */
  orderBy?:
    | Prisma.TaskOrderByWithRelationInput
    | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Tasks
   **/
  _count?: true | TaskCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TaskAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TaskSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TaskMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TaskMaxAggregateInputType
}

export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
  [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTask[P]>
    : Prisma.GetScalarType<T[P], AggregateTask[P]>
}

export type TaskGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TaskWhereInput
  orderBy?:
    | Prisma.TaskOrderByWithAggregationInput
    | Prisma.TaskOrderByWithAggregationInput[]
  by: Prisma.TaskScalarFieldEnum[] | Prisma.TaskScalarFieldEnum
  having?: Prisma.TaskScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TaskCountAggregateInputType | true
  _avg?: TaskAvgAggregateInputType
  _sum?: TaskSumAggregateInputType
  _min?: TaskMinAggregateInputType
  _max?: TaskMaxAggregateInputType
}

export type TaskGroupByOutputType = {
  id: string
  objectiveId: string | null
  initiativeId: string | null
  title: string
  description: string | null
  assigneeId: string | null
  createdById: string
  status: string
  priority: number
  estimate: number | null
  dueDate: Date | null
  createdAt: Date
  updatedAt: Date
  completedAt: Date | null
  _count: TaskCountAggregateOutputType | null
  _avg: TaskAvgAggregateOutputType | null
  _sum: TaskSumAggregateOutputType | null
  _min: TaskMinAggregateOutputType | null
  _max: TaskMaxAggregateOutputType | null
}

type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TaskGroupByOutputType, T['by']> & {
      [P in keyof T & keyof TaskGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TaskGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TaskGroupByOutputType[P]>
    }
  >
>

export type TaskWhereInput = {
  AND?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  OR?: Prisma.TaskWhereInput[]
  NOT?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  id?: Prisma.StringFilter<'Task'> | string
  objectiveId?: Prisma.StringNullableFilter<'Task'> | string | null
  initiativeId?: Prisma.StringNullableFilter<'Task'> | string | null
  title?: Prisma.StringFilter<'Task'> | string
  description?: Prisma.StringNullableFilter<'Task'> | string | null
  assigneeId?: Prisma.StringNullableFilter<'Task'> | string | null
  createdById?: Prisma.StringFilter<'Task'> | string
  status?: Prisma.StringFilter<'Task'> | string
  priority?: Prisma.IntFilter<'Task'> | number
  estimate?: Prisma.IntNullableFilter<'Task'> | number | null
  dueDate?: Prisma.DateTimeNullableFilter<'Task'> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<'Task'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'Task'> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<'Task'> | Date | string | null
  objective?: Prisma.XOR<
    Prisma.ObjectiveNullableScalarRelationFilter,
    Prisma.ObjectiveWhereInput
  > | null
  initiative?: Prisma.XOR<
    Prisma.InitiativeNullableScalarRelationFilter,
    Prisma.InitiativeWhereInput
  > | null
  assignee?: Prisma.XOR<
    Prisma.PersonNullableScalarRelationFilter,
    Prisma.PersonWhereInput
  > | null
  createdBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type TaskOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  objectiveId?: Prisma.SortOrderInput | Prisma.SortOrder
  initiativeId?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  assigneeId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdById?: Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  estimate?: Prisma.SortOrderInput | Prisma.SortOrder
  dueDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  objective?: Prisma.ObjectiveOrderByWithRelationInput
  initiative?: Prisma.InitiativeOrderByWithRelationInput
  assignee?: Prisma.PersonOrderByWithRelationInput
  createdBy?: Prisma.UserOrderByWithRelationInput
}

export type TaskWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
    OR?: Prisma.TaskWhereInput[]
    NOT?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
    objectiveId?: Prisma.StringNullableFilter<'Task'> | string | null
    initiativeId?: Prisma.StringNullableFilter<'Task'> | string | null
    title?: Prisma.StringFilter<'Task'> | string
    description?: Prisma.StringNullableFilter<'Task'> | string | null
    assigneeId?: Prisma.StringNullableFilter<'Task'> | string | null
    createdById?: Prisma.StringFilter<'Task'> | string
    status?: Prisma.StringFilter<'Task'> | string
    priority?: Prisma.IntFilter<'Task'> | number
    estimate?: Prisma.IntNullableFilter<'Task'> | number | null
    dueDate?: Prisma.DateTimeNullableFilter<'Task'> | Date | string | null
    createdAt?: Prisma.DateTimeFilter<'Task'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'Task'> | Date | string
    completedAt?: Prisma.DateTimeNullableFilter<'Task'> | Date | string | null
    objective?: Prisma.XOR<
      Prisma.ObjectiveNullableScalarRelationFilter,
      Prisma.ObjectiveWhereInput
    > | null
    initiative?: Prisma.XOR<
      Prisma.InitiativeNullableScalarRelationFilter,
      Prisma.InitiativeWhereInput
    > | null
    assignee?: Prisma.XOR<
      Prisma.PersonNullableScalarRelationFilter,
      Prisma.PersonWhereInput
    > | null
    createdBy?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >
  },
  'id'
>

export type TaskOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  objectiveId?: Prisma.SortOrderInput | Prisma.SortOrder
  initiativeId?: Prisma.SortOrderInput | Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  assigneeId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdById?: Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  estimate?: Prisma.SortOrderInput | Prisma.SortOrder
  dueDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TaskCountOrderByAggregateInput
  _avg?: Prisma.TaskAvgOrderByAggregateInput
  _max?: Prisma.TaskMaxOrderByAggregateInput
  _min?: Prisma.TaskMinOrderByAggregateInput
  _sum?: Prisma.TaskSumOrderByAggregateInput
}

export type TaskScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TaskScalarWhereWithAggregatesInput
    | Prisma.TaskScalarWhereWithAggregatesInput[]
  OR?: Prisma.TaskScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.TaskScalarWhereWithAggregatesInput
    | Prisma.TaskScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'Task'> | string
  objectiveId?:
    | Prisma.StringNullableWithAggregatesFilter<'Task'>
    | string
    | null
  initiativeId?:
    | Prisma.StringNullableWithAggregatesFilter<'Task'>
    | string
    | null
  title?: Prisma.StringWithAggregatesFilter<'Task'> | string
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'Task'>
    | string
    | null
  assigneeId?: Prisma.StringNullableWithAggregatesFilter<'Task'> | string | null
  createdById?: Prisma.StringWithAggregatesFilter<'Task'> | string
  status?: Prisma.StringWithAggregatesFilter<'Task'> | string
  priority?: Prisma.IntWithAggregatesFilter<'Task'> | number
  estimate?: Prisma.IntNullableWithAggregatesFilter<'Task'> | number | null
  dueDate?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'Task'>
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Task'> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Task'> | Date | string
  completedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'Task'>
    | Date
    | string
    | null
}

export type TaskCreateInput = {
  id?: string
  title: string
  description?: string | null
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
  objective?: Prisma.ObjectiveCreateNestedOneWithoutTasksInput
  initiative?: Prisma.InitiativeCreateNestedOneWithoutTasksInput
  assignee?: Prisma.PersonCreateNestedOneWithoutTasksInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedTasksInput
}

export type TaskUncheckedCreateInput = {
  id?: string
  objectiveId?: string | null
  initiativeId?: string | null
  title: string
  description?: string | null
  assigneeId?: string | null
  createdById: string
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  objective?: Prisma.ObjectiveUpdateOneWithoutTasksNestedInput
  initiative?: Prisma.InitiativeUpdateOneWithoutTasksNestedInput
  assignee?: Prisma.PersonUpdateOneWithoutTasksNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedTasksNestedInput
}

export type TaskUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  objectiveId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  initiativeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskCreateManyInput = {
  id?: string
  objectiveId?: string | null
  initiativeId?: string | null
  title: string
  description?: string | null
  assigneeId?: string | null
  createdById: string
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  objectiveId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  initiativeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskListRelationFilter = {
  every?: Prisma.TaskWhereInput
  some?: Prisma.TaskWhereInput
  none?: Prisma.TaskWhereInput
}

export type TaskOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TaskCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  objectiveId?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  estimate?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type TaskAvgOrderByAggregateInput = {
  priority?: Prisma.SortOrder
  estimate?: Prisma.SortOrder
}

export type TaskMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  objectiveId?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  estimate?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type TaskMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  objectiveId?: Prisma.SortOrder
  initiativeId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  estimate?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type TaskSumOrderByAggregateInput = {
  priority?: Prisma.SortOrder
  estimate?: Prisma.SortOrder
}

export type TaskCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutCreatedByInput,
        Prisma.TaskUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TaskCreateWithoutCreatedByInput[]
    | Prisma.TaskUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutCreatedByInput
    | Prisma.TaskCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.TaskCreateManyCreatedByInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutCreatedByInput,
        Prisma.TaskUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TaskCreateWithoutCreatedByInput[]
    | Prisma.TaskUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutCreatedByInput
    | Prisma.TaskCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.TaskCreateManyCreatedByInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutCreatedByInput,
        Prisma.TaskUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TaskCreateWithoutCreatedByInput[]
    | Prisma.TaskUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutCreatedByInput
    | Prisma.TaskCreateOrConnectWithoutCreatedByInput[]
  upsert?:
    | Prisma.TaskUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.TaskUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.TaskCreateManyCreatedByInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?:
    | Prisma.TaskUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.TaskUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?:
    | Prisma.TaskUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.TaskUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutCreatedByInput,
        Prisma.TaskUncheckedCreateWithoutCreatedByInput
      >
    | Prisma.TaskCreateWithoutCreatedByInput[]
    | Prisma.TaskUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutCreatedByInput
    | Prisma.TaskCreateOrConnectWithoutCreatedByInput[]
  upsert?:
    | Prisma.TaskUpsertWithWhereUniqueWithoutCreatedByInput
    | Prisma.TaskUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.TaskCreateManyCreatedByInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?:
    | Prisma.TaskUpdateWithWhereUniqueWithoutCreatedByInput
    | Prisma.TaskUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?:
    | Prisma.TaskUpdateManyWithWhereWithoutCreatedByInput
    | Prisma.TaskUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskCreateNestedManyWithoutAssigneeInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutAssigneeInput,
        Prisma.TaskUncheckedCreateWithoutAssigneeInput
      >
    | Prisma.TaskCreateWithoutAssigneeInput[]
    | Prisma.TaskUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutAssigneeInput
    | Prisma.TaskCreateOrConnectWithoutAssigneeInput[]
  createMany?: Prisma.TaskCreateManyAssigneeInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutAssigneeInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutAssigneeInput,
        Prisma.TaskUncheckedCreateWithoutAssigneeInput
      >
    | Prisma.TaskCreateWithoutAssigneeInput[]
    | Prisma.TaskUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutAssigneeInput
    | Prisma.TaskCreateOrConnectWithoutAssigneeInput[]
  createMany?: Prisma.TaskCreateManyAssigneeInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutAssigneeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutAssigneeInput,
        Prisma.TaskUncheckedCreateWithoutAssigneeInput
      >
    | Prisma.TaskCreateWithoutAssigneeInput[]
    | Prisma.TaskUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutAssigneeInput
    | Prisma.TaskCreateOrConnectWithoutAssigneeInput[]
  upsert?:
    | Prisma.TaskUpsertWithWhereUniqueWithoutAssigneeInput
    | Prisma.TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
  createMany?: Prisma.TaskCreateManyAssigneeInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?:
    | Prisma.TaskUpdateWithWhereUniqueWithoutAssigneeInput
    | Prisma.TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
  updateMany?:
    | Prisma.TaskUpdateManyWithWhereWithoutAssigneeInput
    | Prisma.TaskUpdateManyWithWhereWithoutAssigneeInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutAssigneeInput,
        Prisma.TaskUncheckedCreateWithoutAssigneeInput
      >
    | Prisma.TaskCreateWithoutAssigneeInput[]
    | Prisma.TaskUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutAssigneeInput
    | Prisma.TaskCreateOrConnectWithoutAssigneeInput[]
  upsert?:
    | Prisma.TaskUpsertWithWhereUniqueWithoutAssigneeInput
    | Prisma.TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
  createMany?: Prisma.TaskCreateManyAssigneeInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?:
    | Prisma.TaskUpdateWithWhereUniqueWithoutAssigneeInput
    | Prisma.TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
  updateMany?:
    | Prisma.TaskUpdateManyWithWhereWithoutAssigneeInput
    | Prisma.TaskUpdateManyWithWhereWithoutAssigneeInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskCreateNestedManyWithoutInitiativeInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutInitiativeInput,
        Prisma.TaskUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.TaskCreateWithoutInitiativeInput[]
    | Prisma.TaskUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutInitiativeInput
    | Prisma.TaskCreateOrConnectWithoutInitiativeInput[]
  createMany?: Prisma.TaskCreateManyInitiativeInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutInitiativeInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutInitiativeInput,
        Prisma.TaskUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.TaskCreateWithoutInitiativeInput[]
    | Prisma.TaskUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutInitiativeInput
    | Prisma.TaskCreateOrConnectWithoutInitiativeInput[]
  createMany?: Prisma.TaskCreateManyInitiativeInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutInitiativeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutInitiativeInput,
        Prisma.TaskUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.TaskCreateWithoutInitiativeInput[]
    | Prisma.TaskUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutInitiativeInput
    | Prisma.TaskCreateOrConnectWithoutInitiativeInput[]
  upsert?:
    | Prisma.TaskUpsertWithWhereUniqueWithoutInitiativeInput
    | Prisma.TaskUpsertWithWhereUniqueWithoutInitiativeInput[]
  createMany?: Prisma.TaskCreateManyInitiativeInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?:
    | Prisma.TaskUpdateWithWhereUniqueWithoutInitiativeInput
    | Prisma.TaskUpdateWithWhereUniqueWithoutInitiativeInput[]
  updateMany?:
    | Prisma.TaskUpdateManyWithWhereWithoutInitiativeInput
    | Prisma.TaskUpdateManyWithWhereWithoutInitiativeInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutInitiativeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutInitiativeInput,
        Prisma.TaskUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.TaskCreateWithoutInitiativeInput[]
    | Prisma.TaskUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutInitiativeInput
    | Prisma.TaskCreateOrConnectWithoutInitiativeInput[]
  upsert?:
    | Prisma.TaskUpsertWithWhereUniqueWithoutInitiativeInput
    | Prisma.TaskUpsertWithWhereUniqueWithoutInitiativeInput[]
  createMany?: Prisma.TaskCreateManyInitiativeInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?:
    | Prisma.TaskUpdateWithWhereUniqueWithoutInitiativeInput
    | Prisma.TaskUpdateWithWhereUniqueWithoutInitiativeInput[]
  updateMany?:
    | Prisma.TaskUpdateManyWithWhereWithoutInitiativeInput
    | Prisma.TaskUpdateManyWithWhereWithoutInitiativeInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskCreateNestedManyWithoutObjectiveInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutObjectiveInput,
        Prisma.TaskUncheckedCreateWithoutObjectiveInput
      >
    | Prisma.TaskCreateWithoutObjectiveInput[]
    | Prisma.TaskUncheckedCreateWithoutObjectiveInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutObjectiveInput
    | Prisma.TaskCreateOrConnectWithoutObjectiveInput[]
  createMany?: Prisma.TaskCreateManyObjectiveInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutObjectiveInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutObjectiveInput,
        Prisma.TaskUncheckedCreateWithoutObjectiveInput
      >
    | Prisma.TaskCreateWithoutObjectiveInput[]
    | Prisma.TaskUncheckedCreateWithoutObjectiveInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutObjectiveInput
    | Prisma.TaskCreateOrConnectWithoutObjectiveInput[]
  createMany?: Prisma.TaskCreateManyObjectiveInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutObjectiveNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutObjectiveInput,
        Prisma.TaskUncheckedCreateWithoutObjectiveInput
      >
    | Prisma.TaskCreateWithoutObjectiveInput[]
    | Prisma.TaskUncheckedCreateWithoutObjectiveInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutObjectiveInput
    | Prisma.TaskCreateOrConnectWithoutObjectiveInput[]
  upsert?:
    | Prisma.TaskUpsertWithWhereUniqueWithoutObjectiveInput
    | Prisma.TaskUpsertWithWhereUniqueWithoutObjectiveInput[]
  createMany?: Prisma.TaskCreateManyObjectiveInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?:
    | Prisma.TaskUpdateWithWhereUniqueWithoutObjectiveInput
    | Prisma.TaskUpdateWithWhereUniqueWithoutObjectiveInput[]
  updateMany?:
    | Prisma.TaskUpdateManyWithWhereWithoutObjectiveInput
    | Prisma.TaskUpdateManyWithWhereWithoutObjectiveInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutObjectiveNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TaskCreateWithoutObjectiveInput,
        Prisma.TaskUncheckedCreateWithoutObjectiveInput
      >
    | Prisma.TaskCreateWithoutObjectiveInput[]
    | Prisma.TaskUncheckedCreateWithoutObjectiveInput[]
  connectOrCreate?:
    | Prisma.TaskCreateOrConnectWithoutObjectiveInput
    | Prisma.TaskCreateOrConnectWithoutObjectiveInput[]
  upsert?:
    | Prisma.TaskUpsertWithWhereUniqueWithoutObjectiveInput
    | Prisma.TaskUpsertWithWhereUniqueWithoutObjectiveInput[]
  createMany?: Prisma.TaskCreateManyObjectiveInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?:
    | Prisma.TaskUpdateWithWhereUniqueWithoutObjectiveInput
    | Prisma.TaskUpdateWithWhereUniqueWithoutObjectiveInput[]
  updateMany?:
    | Prisma.TaskUpdateManyWithWhereWithoutObjectiveInput
    | Prisma.TaskUpdateManyWithWhereWithoutObjectiveInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type TaskCreateWithoutCreatedByInput = {
  id?: string
  title: string
  description?: string | null
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
  objective?: Prisma.ObjectiveCreateNestedOneWithoutTasksInput
  initiative?: Prisma.InitiativeCreateNestedOneWithoutTasksInput
  assignee?: Prisma.PersonCreateNestedOneWithoutTasksInput
}

export type TaskUncheckedCreateWithoutCreatedByInput = {
  id?: string
  objectiveId?: string | null
  initiativeId?: string | null
  title: string
  description?: string | null
  assigneeId?: string | null
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TaskCreateWithoutCreatedByInput,
    Prisma.TaskUncheckedCreateWithoutCreatedByInput
  >
}

export type TaskCreateManyCreatedByInputEnvelope = {
  data:
    | Prisma.TaskCreateManyCreatedByInput
    | Prisma.TaskCreateManyCreatedByInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<
    Prisma.TaskUpdateWithoutCreatedByInput,
    Prisma.TaskUncheckedUpdateWithoutCreatedByInput
  >
  create: Prisma.XOR<
    Prisma.TaskCreateWithoutCreatedByInput,
    Prisma.TaskUncheckedCreateWithoutCreatedByInput
  >
}

export type TaskUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<
    Prisma.TaskUpdateWithoutCreatedByInput,
    Prisma.TaskUncheckedUpdateWithoutCreatedByInput
  >
}

export type TaskUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<
    Prisma.TaskUpdateManyMutationInput,
    Prisma.TaskUncheckedUpdateManyWithoutCreatedByInput
  >
}

export type TaskScalarWhereInput = {
  AND?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
  OR?: Prisma.TaskScalarWhereInput[]
  NOT?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
  id?: Prisma.StringFilter<'Task'> | string
  objectiveId?: Prisma.StringNullableFilter<'Task'> | string | null
  initiativeId?: Prisma.StringNullableFilter<'Task'> | string | null
  title?: Prisma.StringFilter<'Task'> | string
  description?: Prisma.StringNullableFilter<'Task'> | string | null
  assigneeId?: Prisma.StringNullableFilter<'Task'> | string | null
  createdById?: Prisma.StringFilter<'Task'> | string
  status?: Prisma.StringFilter<'Task'> | string
  priority?: Prisma.IntFilter<'Task'> | number
  estimate?: Prisma.IntNullableFilter<'Task'> | number | null
  dueDate?: Prisma.DateTimeNullableFilter<'Task'> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<'Task'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'Task'> | Date | string
  completedAt?: Prisma.DateTimeNullableFilter<'Task'> | Date | string | null
}

export type TaskCreateWithoutAssigneeInput = {
  id?: string
  title: string
  description?: string | null
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
  objective?: Prisma.ObjectiveCreateNestedOneWithoutTasksInput
  initiative?: Prisma.InitiativeCreateNestedOneWithoutTasksInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedTasksInput
}

export type TaskUncheckedCreateWithoutAssigneeInput = {
  id?: string
  objectiveId?: string | null
  initiativeId?: string | null
  title: string
  description?: string | null
  createdById: string
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskCreateOrConnectWithoutAssigneeInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TaskCreateWithoutAssigneeInput,
    Prisma.TaskUncheckedCreateWithoutAssigneeInput
  >
}

export type TaskCreateManyAssigneeInputEnvelope = {
  data:
    | Prisma.TaskCreateManyAssigneeInput
    | Prisma.TaskCreateManyAssigneeInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithWhereUniqueWithoutAssigneeInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<
    Prisma.TaskUpdateWithoutAssigneeInput,
    Prisma.TaskUncheckedUpdateWithoutAssigneeInput
  >
  create: Prisma.XOR<
    Prisma.TaskCreateWithoutAssigneeInput,
    Prisma.TaskUncheckedCreateWithoutAssigneeInput
  >
}

export type TaskUpdateWithWhereUniqueWithoutAssigneeInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<
    Prisma.TaskUpdateWithoutAssigneeInput,
    Prisma.TaskUncheckedUpdateWithoutAssigneeInput
  >
}

export type TaskUpdateManyWithWhereWithoutAssigneeInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<
    Prisma.TaskUpdateManyMutationInput,
    Prisma.TaskUncheckedUpdateManyWithoutAssigneeInput
  >
}

export type TaskCreateWithoutInitiativeInput = {
  id?: string
  title: string
  description?: string | null
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
  objective?: Prisma.ObjectiveCreateNestedOneWithoutTasksInput
  assignee?: Prisma.PersonCreateNestedOneWithoutTasksInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedTasksInput
}

export type TaskUncheckedCreateWithoutInitiativeInput = {
  id?: string
  objectiveId?: string | null
  title: string
  description?: string | null
  assigneeId?: string | null
  createdById: string
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskCreateOrConnectWithoutInitiativeInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TaskCreateWithoutInitiativeInput,
    Prisma.TaskUncheckedCreateWithoutInitiativeInput
  >
}

export type TaskCreateManyInitiativeInputEnvelope = {
  data:
    | Prisma.TaskCreateManyInitiativeInput
    | Prisma.TaskCreateManyInitiativeInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithWhereUniqueWithoutInitiativeInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<
    Prisma.TaskUpdateWithoutInitiativeInput,
    Prisma.TaskUncheckedUpdateWithoutInitiativeInput
  >
  create: Prisma.XOR<
    Prisma.TaskCreateWithoutInitiativeInput,
    Prisma.TaskUncheckedCreateWithoutInitiativeInput
  >
}

export type TaskUpdateWithWhereUniqueWithoutInitiativeInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<
    Prisma.TaskUpdateWithoutInitiativeInput,
    Prisma.TaskUncheckedUpdateWithoutInitiativeInput
  >
}

export type TaskUpdateManyWithWhereWithoutInitiativeInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<
    Prisma.TaskUpdateManyMutationInput,
    Prisma.TaskUncheckedUpdateManyWithoutInitiativeInput
  >
}

export type TaskCreateWithoutObjectiveInput = {
  id?: string
  title: string
  description?: string | null
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
  initiative?: Prisma.InitiativeCreateNestedOneWithoutTasksInput
  assignee?: Prisma.PersonCreateNestedOneWithoutTasksInput
  createdBy: Prisma.UserCreateNestedOneWithoutCreatedTasksInput
}

export type TaskUncheckedCreateWithoutObjectiveInput = {
  id?: string
  initiativeId?: string | null
  title: string
  description?: string | null
  assigneeId?: string | null
  createdById: string
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskCreateOrConnectWithoutObjectiveInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TaskCreateWithoutObjectiveInput,
    Prisma.TaskUncheckedCreateWithoutObjectiveInput
  >
}

export type TaskCreateManyObjectiveInputEnvelope = {
  data:
    | Prisma.TaskCreateManyObjectiveInput
    | Prisma.TaskCreateManyObjectiveInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithWhereUniqueWithoutObjectiveInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<
    Prisma.TaskUpdateWithoutObjectiveInput,
    Prisma.TaskUncheckedUpdateWithoutObjectiveInput
  >
  create: Prisma.XOR<
    Prisma.TaskCreateWithoutObjectiveInput,
    Prisma.TaskUncheckedCreateWithoutObjectiveInput
  >
}

export type TaskUpdateWithWhereUniqueWithoutObjectiveInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<
    Prisma.TaskUpdateWithoutObjectiveInput,
    Prisma.TaskUncheckedUpdateWithoutObjectiveInput
  >
}

export type TaskUpdateManyWithWhereWithoutObjectiveInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<
    Prisma.TaskUpdateManyMutationInput,
    Prisma.TaskUncheckedUpdateManyWithoutObjectiveInput
  >
}

export type TaskCreateManyCreatedByInput = {
  id?: string
  objectiveId?: string | null
  initiativeId?: string | null
  title: string
  description?: string | null
  assigneeId?: string | null
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  objective?: Prisma.ObjectiveUpdateOneWithoutTasksNestedInput
  initiative?: Prisma.InitiativeUpdateOneWithoutTasksNestedInput
  assignee?: Prisma.PersonUpdateOneWithoutTasksNestedInput
}

export type TaskUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  objectiveId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  initiativeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  objectiveId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  initiativeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskCreateManyAssigneeInput = {
  id?: string
  objectiveId?: string | null
  initiativeId?: string | null
  title: string
  description?: string | null
  createdById: string
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskUpdateWithoutAssigneeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  objective?: Prisma.ObjectiveUpdateOneWithoutTasksNestedInput
  initiative?: Prisma.InitiativeUpdateOneWithoutTasksNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedTasksNestedInput
}

export type TaskUncheckedUpdateWithoutAssigneeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  objectiveId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  initiativeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskUncheckedUpdateManyWithoutAssigneeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  objectiveId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  initiativeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskCreateManyInitiativeInput = {
  id?: string
  objectiveId?: string | null
  title: string
  description?: string | null
  assigneeId?: string | null
  createdById: string
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskUpdateWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  objective?: Prisma.ObjectiveUpdateOneWithoutTasksNestedInput
  assignee?: Prisma.PersonUpdateOneWithoutTasksNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedTasksNestedInput
}

export type TaskUncheckedUpdateWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  objectiveId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskUncheckedUpdateManyWithoutInitiativeInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  objectiveId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskCreateManyObjectiveInput = {
  id?: string
  initiativeId?: string | null
  title: string
  description?: string | null
  assigneeId?: string | null
  createdById: string
  status?: string
  priority?: number
  estimate?: number | null
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  completedAt?: Date | string | null
}

export type TaskUpdateWithoutObjectiveInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  initiative?: Prisma.InitiativeUpdateOneWithoutTasksNestedInput
  assignee?: Prisma.PersonUpdateOneWithoutTasksNestedInput
  createdBy?: Prisma.UserUpdateOneRequiredWithoutCreatedTasksNestedInput
}

export type TaskUncheckedUpdateWithoutObjectiveInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  initiativeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskUncheckedUpdateManyWithoutObjectiveInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  initiativeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  assigneeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  estimate?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dueDate?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type TaskSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    objectiveId?: boolean
    initiativeId?: boolean
    title?: boolean
    description?: boolean
    assigneeId?: boolean
    createdById?: boolean
    status?: boolean
    priority?: boolean
    estimate?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    objective?: boolean | Prisma.Task$objectiveArgs<ExtArgs>
    initiative?: boolean | Prisma.Task$initiativeArgs<ExtArgs>
    assignee?: boolean | Prisma.Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['task']
>

export type TaskSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    objectiveId?: boolean
    initiativeId?: boolean
    title?: boolean
    description?: boolean
    assigneeId?: boolean
    createdById?: boolean
    status?: boolean
    priority?: boolean
    estimate?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    objective?: boolean | Prisma.Task$objectiveArgs<ExtArgs>
    initiative?: boolean | Prisma.Task$initiativeArgs<ExtArgs>
    assignee?: boolean | Prisma.Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['task']
>

export type TaskSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    objectiveId?: boolean
    initiativeId?: boolean
    title?: boolean
    description?: boolean
    assigneeId?: boolean
    createdById?: boolean
    status?: boolean
    priority?: boolean
    estimate?: boolean
    dueDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    objective?: boolean | Prisma.Task$objectiveArgs<ExtArgs>
    initiative?: boolean | Prisma.Task$initiativeArgs<ExtArgs>
    assignee?: boolean | Prisma.Task$assigneeArgs<ExtArgs>
    createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['task']
>

export type TaskSelectScalar = {
  id?: boolean
  objectiveId?: boolean
  initiativeId?: boolean
  title?: boolean
  description?: boolean
  assigneeId?: boolean
  createdById?: boolean
  status?: boolean
  priority?: boolean
  estimate?: boolean
  dueDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  completedAt?: boolean
}

export type TaskOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'objectiveId'
  | 'initiativeId'
  | 'title'
  | 'description'
  | 'assigneeId'
  | 'createdById'
  | 'status'
  | 'priority'
  | 'estimate'
  | 'dueDate'
  | 'createdAt'
  | 'updatedAt'
  | 'completedAt',
  ExtArgs['result']['task']
>
export type TaskInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  objective?: boolean | Prisma.Task$objectiveArgs<ExtArgs>
  initiative?: boolean | Prisma.Task$initiativeArgs<ExtArgs>
  assignee?: boolean | Prisma.Task$assigneeArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TaskIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  objective?: boolean | Prisma.Task$objectiveArgs<ExtArgs>
  initiative?: boolean | Prisma.Task$initiativeArgs<ExtArgs>
  assignee?: boolean | Prisma.Task$assigneeArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TaskIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  objective?: boolean | Prisma.Task$objectiveArgs<ExtArgs>
  initiative?: boolean | Prisma.Task$initiativeArgs<ExtArgs>
  assignee?: boolean | Prisma.Task$assigneeArgs<ExtArgs>
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TaskPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Task'
  objects: {
    objective: Prisma.$ObjectivePayload<ExtArgs> | null
    initiative: Prisma.$InitiativePayload<ExtArgs> | null
    assignee: Prisma.$PersonPayload<ExtArgs> | null
    createdBy: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      objectiveId: string | null
      initiativeId: string | null
      title: string
      description: string | null
      assigneeId: string | null
      createdById: string
      status: string
      priority: number
      estimate: number | null
      dueDate: Date | null
      createdAt: Date
      updatedAt: Date
      completedAt: Date | null
    },
    ExtArgs['result']['task']
  >
  composites: {}
}

export type TaskGetPayload<
  S extends boolean | null | undefined | TaskDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TaskPayload, S>

export type TaskCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: TaskCountAggregateInputType | true
}

export interface TaskDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Task']
    meta: { name: 'Task' }
  }
  /**
   * Find zero or one Task that matches the filter.
   * @param {TaskFindUniqueArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TaskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__TaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one Task that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Task that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindFirstArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TaskFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TaskFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__TaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Task that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more Tasks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tasks
   * const tasks = await prisma.task.findMany()
   *
   * // Get first 10 Tasks
   * const tasks = await prisma.task.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TaskFindManyArgs>(
    args?: Prisma.SelectSubset<T, TaskFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a Task.
   * @param {TaskCreateArgs} args - Arguments to create a Task.
   * @example
   * // Create one Task
   * const Task = await prisma.task.create({
   *   data: {
   *     // ... data to create a Task
   *   }
   * })
   *
   */
  create<T extends TaskCreateArgs>(
    args: Prisma.SelectSubset<T, TaskCreateArgs<ExtArgs>>
  ): Prisma.Prisma__TaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many Tasks.
   * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
   * @example
   * // Create many Tasks
   * const task = await prisma.task.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TaskCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TaskCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Tasks and returns the data saved in the database.
   * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
   * @example
   * // Create many Tasks
   * const task = await prisma.task.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Tasks and only return the `id`
   * const taskWithIdOnly = await prisma.task.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a Task.
   * @param {TaskDeleteArgs} args - Arguments to delete one Task.
   * @example
   * // Delete one Task
   * const Task = await prisma.task.delete({
   *   where: {
   *     // ... filter to delete one Task
   *   }
   * })
   *
   */
  delete<T extends TaskDeleteArgs>(
    args: Prisma.SelectSubset<T, TaskDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__TaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one Task.
   * @param {TaskUpdateArgs} args - Arguments to update one Task.
   * @example
   * // Update one Task
   * const task = await prisma.task.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TaskUpdateArgs>(
    args: Prisma.SelectSubset<T, TaskUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__TaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more Tasks.
   * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
   * @example
   * // Delete a few Tasks
   * const { count } = await prisma.task.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TaskDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tasks
   * const task = await prisma.task.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TaskUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tasks and returns the data updated in the database.
   * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
   * @example
   * // Update many Tasks
   * const task = await prisma.task.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Tasks and only return the `id`
   * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one Task.
   * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
   * @example
   * // Update or create a Task
   * const task = await prisma.task.upsert({
   *   create: {
   *     // ... data to create a Task
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Task we want to update
   *   }
   * })
   */
  upsert<T extends TaskUpsertArgs>(
    args: Prisma.SelectSubset<T, TaskUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__TaskClient<
    runtime.Types.Result.GetResult<
      Prisma.$TaskPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
   * @example
   * // Count the number of Tasks
   * const count = await prisma.task.count({
   *   where: {
   *     // ... the filter for the Tasks we want to count
   *   }
   * })
   **/
  count<T extends TaskCountArgs>(
    args?: Prisma.Subset<T, TaskCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TaskCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Task.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TaskAggregateArgs>(
    args: Prisma.Subset<T, TaskAggregateArgs>
  ): Prisma.PrismaPromise<GetTaskAggregateType<T>>

  /**
   * Group by Task.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TaskGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TaskGroupByArgs['orderBy'] }
      : { orderBy?: TaskGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TaskGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetTaskGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for Task.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TaskClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  objective<T extends Prisma.Task$objectiveArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Task$objectiveArgs<ExtArgs>>
  ): Prisma.Prisma__ObjectiveClient<
    runtime.Types.Result.GetResult<
      Prisma.$ObjectivePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >
  initiative<T extends Prisma.Task$initiativeArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Task$initiativeArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >
  assignee<T extends Prisma.Task$assigneeArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Task$assigneeArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the Task model
 */
export interface TaskFieldRefs {
  readonly id: Prisma.FieldRef<'Task', 'String'>
  readonly objectiveId: Prisma.FieldRef<'Task', 'String'>
  readonly initiativeId: Prisma.FieldRef<'Task', 'String'>
  readonly title: Prisma.FieldRef<'Task', 'String'>
  readonly description: Prisma.FieldRef<'Task', 'String'>
  readonly assigneeId: Prisma.FieldRef<'Task', 'String'>
  readonly createdById: Prisma.FieldRef<'Task', 'String'>
  readonly status: Prisma.FieldRef<'Task', 'String'>
  readonly priority: Prisma.FieldRef<'Task', 'Int'>
  readonly estimate: Prisma.FieldRef<'Task', 'Int'>
  readonly dueDate: Prisma.FieldRef<'Task', 'DateTime'>
  readonly createdAt: Prisma.FieldRef<'Task', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'Task', 'DateTime'>
  readonly completedAt: Prisma.FieldRef<'Task', 'DateTime'>
}

// Custom InputTypes
/**
 * Task findUnique
 */
export type TaskFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task findUniqueOrThrow
 */
export type TaskFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task findFirst
 */
export type TaskFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tasks to fetch.
   */
  orderBy?:
    | Prisma.TaskOrderByWithRelationInput
    | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Tasks.
   */
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task findFirstOrThrow
 */
export type TaskFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tasks to fetch.
   */
  orderBy?:
    | Prisma.TaskOrderByWithRelationInput
    | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Tasks.
   */
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task findMany
 */
export type TaskFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Tasks to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tasks to fetch.
   */
  orderBy?:
    | Prisma.TaskOrderByWithRelationInput
    | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tasks.
   */
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task create
 */
export type TaskCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The data needed to create a Task.
   */
  data: Prisma.XOR<Prisma.TaskCreateInput, Prisma.TaskUncheckedCreateInput>
}

/**
 * Task createMany
 */
export type TaskCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Tasks.
   */
  data: Prisma.TaskCreateManyInput | Prisma.TaskCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Task createManyAndReturn
 */
export type TaskCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * The data used to create many Tasks.
   */
  data: Prisma.TaskCreateManyInput | Prisma.TaskCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Task update
 */
export type TaskUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The data needed to update a Task.
   */
  data: Prisma.XOR<Prisma.TaskUpdateInput, Prisma.TaskUncheckedUpdateInput>
  /**
   * Choose, which Task to update.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task updateMany
 */
export type TaskUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Tasks.
   */
  data: Prisma.XOR<
    Prisma.TaskUpdateManyMutationInput,
    Prisma.TaskUncheckedUpdateManyInput
  >
  /**
   * Filter which Tasks to update
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to update.
   */
  limit?: number
}

/**
 * Task updateManyAndReturn
 */
export type TaskUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * The data used to update Tasks.
   */
  data: Prisma.XOR<
    Prisma.TaskUpdateManyMutationInput,
    Prisma.TaskUncheckedUpdateManyInput
  >
  /**
   * Filter which Tasks to update
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Task upsert
 */
export type TaskUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The filter to search for the Task to update in case it exists.
   */
  where: Prisma.TaskWhereUniqueInput
  /**
   * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
   */
  create: Prisma.XOR<Prisma.TaskCreateInput, Prisma.TaskUncheckedCreateInput>
  /**
   * In case the Task was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TaskUpdateInput, Prisma.TaskUncheckedUpdateInput>
}

/**
 * Task delete
 */
export type TaskDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter which Task to delete.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task deleteMany
 */
export type TaskDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Tasks to delete
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to delete.
   */
  limit?: number
}

/**
 * Task.objective
 */
export type Task$objectiveArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Objective
   */
  select?: Prisma.ObjectiveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Objective
   */
  omit?: Prisma.ObjectiveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ObjectiveInclude<ExtArgs> | null
  where?: Prisma.ObjectiveWhereInput
}

/**
 * Task.initiative
 */
export type Task$initiativeArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Initiative
   */
  select?: Prisma.InitiativeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Initiative
   */
  omit?: Prisma.InitiativeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeInclude<ExtArgs> | null
  where?: Prisma.InitiativeWhereInput
}

/**
 * Task.assignee
 */
export type Task$assigneeArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Person
   */
  select?: Prisma.PersonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Person
   */
  omit?: Prisma.PersonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonInclude<ExtArgs> | null
  where?: Prisma.PersonWhereInput
}

/**
 * Task without action
 */
export type TaskDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
}
