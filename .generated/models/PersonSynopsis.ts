/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `PersonSynopsis` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model PersonSynopsis
 *
 */
export type PersonSynopsisModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PersonSynopsisPayload>

export type AggregatePersonSynopsis = {
  _count: PersonSynopsisCountAggregateOutputType | null
  _min: PersonSynopsisMinAggregateOutputType | null
  _max: PersonSynopsisMaxAggregateOutputType | null
}

export type PersonSynopsisMinAggregateOutputType = {
  id: string | null
  personId: string | null
  fromDate: Date | null
  toDate: Date | null
  includeFeedback: boolean | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PersonSynopsisMaxAggregateOutputType = {
  id: string | null
  personId: string | null
  fromDate: Date | null
  toDate: Date | null
  includeFeedback: boolean | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PersonSynopsisCountAggregateOutputType = {
  id: number
  personId: number
  fromDate: number
  toDate: number
  includeFeedback: number
  content: number
  sources: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type PersonSynopsisMinAggregateInputType = {
  id?: true
  personId?: true
  fromDate?: true
  toDate?: true
  includeFeedback?: true
  content?: true
  createdAt?: true
  updatedAt?: true
}

export type PersonSynopsisMaxAggregateInputType = {
  id?: true
  personId?: true
  fromDate?: true
  toDate?: true
  includeFeedback?: true
  content?: true
  createdAt?: true
  updatedAt?: true
}

export type PersonSynopsisCountAggregateInputType = {
  id?: true
  personId?: true
  fromDate?: true
  toDate?: true
  includeFeedback?: true
  content?: true
  sources?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PersonSynopsisAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PersonSynopsis to aggregate.
   */
  where?: Prisma.PersonSynopsisWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonSynopses to fetch.
   */
  orderBy?:
    | Prisma.PersonSynopsisOrderByWithRelationInput
    | Prisma.PersonSynopsisOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PersonSynopsisWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonSynopses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonSynopses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned PersonSynopses
   **/
  _count?: true | PersonSynopsisCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PersonSynopsisMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PersonSynopsisMaxAggregateInputType
}

export type GetPersonSynopsisAggregateType<
  T extends PersonSynopsisAggregateArgs,
> = {
  [P in keyof T & keyof AggregatePersonSynopsis]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePersonSynopsis[P]>
    : Prisma.GetScalarType<T[P], AggregatePersonSynopsis[P]>
}

export type PersonSynopsisGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PersonSynopsisWhereInput
  orderBy?:
    | Prisma.PersonSynopsisOrderByWithAggregationInput
    | Prisma.PersonSynopsisOrderByWithAggregationInput[]
  by:
    | Prisma.PersonSynopsisScalarFieldEnum[]
    | Prisma.PersonSynopsisScalarFieldEnum
  having?: Prisma.PersonSynopsisScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PersonSynopsisCountAggregateInputType | true
  _min?: PersonSynopsisMinAggregateInputType
  _max?: PersonSynopsisMaxAggregateInputType
}

export type PersonSynopsisGroupByOutputType = {
  id: string
  personId: string
  fromDate: Date
  toDate: Date
  includeFeedback: boolean
  content: string
  sources: string[]
  createdAt: Date
  updatedAt: Date
  _count: PersonSynopsisCountAggregateOutputType | null
  _min: PersonSynopsisMinAggregateOutputType | null
  _max: PersonSynopsisMaxAggregateOutputType | null
}

type GetPersonSynopsisGroupByPayload<T extends PersonSynopsisGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<PersonSynopsisGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof PersonSynopsisGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PersonSynopsisGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PersonSynopsisGroupByOutputType[P]>
      }
    >
  >

export type PersonSynopsisWhereInput = {
  AND?: Prisma.PersonSynopsisWhereInput | Prisma.PersonSynopsisWhereInput[]
  OR?: Prisma.PersonSynopsisWhereInput[]
  NOT?: Prisma.PersonSynopsisWhereInput | Prisma.PersonSynopsisWhereInput[]
  id?: Prisma.StringFilter<'PersonSynopsis'> | string
  personId?: Prisma.StringFilter<'PersonSynopsis'> | string
  fromDate?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
  toDate?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
  includeFeedback?: Prisma.BoolFilter<'PersonSynopsis'> | boolean
  content?: Prisma.StringFilter<'PersonSynopsis'> | string
  sources?: Prisma.StringNullableListFilter<'PersonSynopsis'>
  createdAt?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
  person?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
}

export type PersonSynopsisOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  fromDate?: Prisma.SortOrder
  toDate?: Prisma.SortOrder
  includeFeedback?: Prisma.SortOrder
  content?: Prisma.SortOrder
  sources?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  person?: Prisma.PersonOrderByWithRelationInput
}

export type PersonSynopsisWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.PersonSynopsisWhereInput | Prisma.PersonSynopsisWhereInput[]
    OR?: Prisma.PersonSynopsisWhereInput[]
    NOT?: Prisma.PersonSynopsisWhereInput | Prisma.PersonSynopsisWhereInput[]
    personId?: Prisma.StringFilter<'PersonSynopsis'> | string
    fromDate?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
    toDate?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
    includeFeedback?: Prisma.BoolFilter<'PersonSynopsis'> | boolean
    content?: Prisma.StringFilter<'PersonSynopsis'> | string
    sources?: Prisma.StringNullableListFilter<'PersonSynopsis'>
    createdAt?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
    person?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
  },
  'id'
>

export type PersonSynopsisOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  fromDate?: Prisma.SortOrder
  toDate?: Prisma.SortOrder
  includeFeedback?: Prisma.SortOrder
  content?: Prisma.SortOrder
  sources?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PersonSynopsisCountOrderByAggregateInput
  _max?: Prisma.PersonSynopsisMaxOrderByAggregateInput
  _min?: Prisma.PersonSynopsisMinOrderByAggregateInput
}

export type PersonSynopsisScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PersonSynopsisScalarWhereWithAggregatesInput
    | Prisma.PersonSynopsisScalarWhereWithAggregatesInput[]
  OR?: Prisma.PersonSynopsisScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.PersonSynopsisScalarWhereWithAggregatesInput
    | Prisma.PersonSynopsisScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'PersonSynopsis'> | string
  personId?: Prisma.StringWithAggregatesFilter<'PersonSynopsis'> | string
  fromDate?:
    | Prisma.DateTimeWithAggregatesFilter<'PersonSynopsis'>
    | Date
    | string
  toDate?: Prisma.DateTimeWithAggregatesFilter<'PersonSynopsis'> | Date | string
  includeFeedback?: Prisma.BoolWithAggregatesFilter<'PersonSynopsis'> | boolean
  content?: Prisma.StringWithAggregatesFilter<'PersonSynopsis'> | string
  sources?: Prisma.StringNullableListFilter<'PersonSynopsis'>
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'PersonSynopsis'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'PersonSynopsis'>
    | Date
    | string
}

export type PersonSynopsisCreateInput = {
  id?: string
  fromDate: Date | string
  toDate: Date | string
  includeFeedback?: boolean
  content: string
  sources?: Prisma.PersonSynopsisCreatesourcesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  person: Prisma.PersonCreateNestedOneWithoutSynopsesInput
}

export type PersonSynopsisUncheckedCreateInput = {
  id?: string
  personId: string
  fromDate: Date | string
  toDate: Date | string
  includeFeedback?: boolean
  content: string
  sources?: Prisma.PersonSynopsisCreatesourcesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonSynopsisUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  toDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  includeFeedback?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sources?: Prisma.PersonSynopsisUpdatesourcesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  person?: Prisma.PersonUpdateOneRequiredWithoutSynopsesNestedInput
}

export type PersonSynopsisUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  fromDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  toDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  includeFeedback?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sources?: Prisma.PersonSynopsisUpdatesourcesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonSynopsisCreateManyInput = {
  id?: string
  personId: string
  fromDate: Date | string
  toDate: Date | string
  includeFeedback?: boolean
  content: string
  sources?: Prisma.PersonSynopsisCreatesourcesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonSynopsisUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  toDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  includeFeedback?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sources?: Prisma.PersonSynopsisUpdatesourcesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonSynopsisUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  fromDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  toDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  includeFeedback?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sources?: Prisma.PersonSynopsisUpdatesourcesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonSynopsisListRelationFilter = {
  every?: Prisma.PersonSynopsisWhereInput
  some?: Prisma.PersonSynopsisWhereInput
  none?: Prisma.PersonSynopsisWhereInput
}

export type PersonSynopsisOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PersonSynopsisCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  fromDate?: Prisma.SortOrder
  toDate?: Prisma.SortOrder
  includeFeedback?: Prisma.SortOrder
  content?: Prisma.SortOrder
  sources?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonSynopsisMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  fromDate?: Prisma.SortOrder
  toDate?: Prisma.SortOrder
  includeFeedback?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonSynopsisMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  fromDate?: Prisma.SortOrder
  toDate?: Prisma.SortOrder
  includeFeedback?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PersonSynopsisCreateNestedManyWithoutPersonInput = {
  create?:
    | Prisma.XOR<
        Prisma.PersonSynopsisCreateWithoutPersonInput,
        Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput
      >
    | Prisma.PersonSynopsisCreateWithoutPersonInput[]
    | Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.PersonSynopsisCreateOrConnectWithoutPersonInput
    | Prisma.PersonSynopsisCreateOrConnectWithoutPersonInput[]
  createMany?: Prisma.PersonSynopsisCreateManyPersonInputEnvelope
  connect?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
}

export type PersonSynopsisUncheckedCreateNestedManyWithoutPersonInput = {
  create?:
    | Prisma.XOR<
        Prisma.PersonSynopsisCreateWithoutPersonInput,
        Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput
      >
    | Prisma.PersonSynopsisCreateWithoutPersonInput[]
    | Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.PersonSynopsisCreateOrConnectWithoutPersonInput
    | Prisma.PersonSynopsisCreateOrConnectWithoutPersonInput[]
  createMany?: Prisma.PersonSynopsisCreateManyPersonInputEnvelope
  connect?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
}

export type PersonSynopsisUpdateManyWithoutPersonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PersonSynopsisCreateWithoutPersonInput,
        Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput
      >
    | Prisma.PersonSynopsisCreateWithoutPersonInput[]
    | Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.PersonSynopsisCreateOrConnectWithoutPersonInput
    | Prisma.PersonSynopsisCreateOrConnectWithoutPersonInput[]
  upsert?:
    | Prisma.PersonSynopsisUpsertWithWhereUniqueWithoutPersonInput
    | Prisma.PersonSynopsisUpsertWithWhereUniqueWithoutPersonInput[]
  createMany?: Prisma.PersonSynopsisCreateManyPersonInputEnvelope
  set?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
  disconnect?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
  delete?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
  connect?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
  update?:
    | Prisma.PersonSynopsisUpdateWithWhereUniqueWithoutPersonInput
    | Prisma.PersonSynopsisUpdateWithWhereUniqueWithoutPersonInput[]
  updateMany?:
    | Prisma.PersonSynopsisUpdateManyWithWhereWithoutPersonInput
    | Prisma.PersonSynopsisUpdateManyWithWhereWithoutPersonInput[]
  deleteMany?:
    | Prisma.PersonSynopsisScalarWhereInput
    | Prisma.PersonSynopsisScalarWhereInput[]
}

export type PersonSynopsisUncheckedUpdateManyWithoutPersonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PersonSynopsisCreateWithoutPersonInput,
        Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput
      >
    | Prisma.PersonSynopsisCreateWithoutPersonInput[]
    | Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.PersonSynopsisCreateOrConnectWithoutPersonInput
    | Prisma.PersonSynopsisCreateOrConnectWithoutPersonInput[]
  upsert?:
    | Prisma.PersonSynopsisUpsertWithWhereUniqueWithoutPersonInput
    | Prisma.PersonSynopsisUpsertWithWhereUniqueWithoutPersonInput[]
  createMany?: Prisma.PersonSynopsisCreateManyPersonInputEnvelope
  set?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
  disconnect?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
  delete?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
  connect?:
    | Prisma.PersonSynopsisWhereUniqueInput
    | Prisma.PersonSynopsisWhereUniqueInput[]
  update?:
    | Prisma.PersonSynopsisUpdateWithWhereUniqueWithoutPersonInput
    | Prisma.PersonSynopsisUpdateWithWhereUniqueWithoutPersonInput[]
  updateMany?:
    | Prisma.PersonSynopsisUpdateManyWithWhereWithoutPersonInput
    | Prisma.PersonSynopsisUpdateManyWithWhereWithoutPersonInput[]
  deleteMany?:
    | Prisma.PersonSynopsisScalarWhereInput
    | Prisma.PersonSynopsisScalarWhereInput[]
}

export type PersonSynopsisCreatesourcesInput = {
  set: string[]
}

export type PersonSynopsisUpdatesourcesInput = {
  set?: string[]
  push?: string | string[]
}

export type PersonSynopsisCreateWithoutPersonInput = {
  id?: string
  fromDate: Date | string
  toDate: Date | string
  includeFeedback?: boolean
  content: string
  sources?: Prisma.PersonSynopsisCreatesourcesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonSynopsisUncheckedCreateWithoutPersonInput = {
  id?: string
  fromDate: Date | string
  toDate: Date | string
  includeFeedback?: boolean
  content: string
  sources?: Prisma.PersonSynopsisCreatesourcesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonSynopsisCreateOrConnectWithoutPersonInput = {
  where: Prisma.PersonSynopsisWhereUniqueInput
  create: Prisma.XOR<
    Prisma.PersonSynopsisCreateWithoutPersonInput,
    Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput
  >
}

export type PersonSynopsisCreateManyPersonInputEnvelope = {
  data:
    | Prisma.PersonSynopsisCreateManyPersonInput
    | Prisma.PersonSynopsisCreateManyPersonInput[]
  skipDuplicates?: boolean
}

export type PersonSynopsisUpsertWithWhereUniqueWithoutPersonInput = {
  where: Prisma.PersonSynopsisWhereUniqueInput
  update: Prisma.XOR<
    Prisma.PersonSynopsisUpdateWithoutPersonInput,
    Prisma.PersonSynopsisUncheckedUpdateWithoutPersonInput
  >
  create: Prisma.XOR<
    Prisma.PersonSynopsisCreateWithoutPersonInput,
    Prisma.PersonSynopsisUncheckedCreateWithoutPersonInput
  >
}

export type PersonSynopsisUpdateWithWhereUniqueWithoutPersonInput = {
  where: Prisma.PersonSynopsisWhereUniqueInput
  data: Prisma.XOR<
    Prisma.PersonSynopsisUpdateWithoutPersonInput,
    Prisma.PersonSynopsisUncheckedUpdateWithoutPersonInput
  >
}

export type PersonSynopsisUpdateManyWithWhereWithoutPersonInput = {
  where: Prisma.PersonSynopsisScalarWhereInput
  data: Prisma.XOR<
    Prisma.PersonSynopsisUpdateManyMutationInput,
    Prisma.PersonSynopsisUncheckedUpdateManyWithoutPersonInput
  >
}

export type PersonSynopsisScalarWhereInput = {
  AND?:
    | Prisma.PersonSynopsisScalarWhereInput
    | Prisma.PersonSynopsisScalarWhereInput[]
  OR?: Prisma.PersonSynopsisScalarWhereInput[]
  NOT?:
    | Prisma.PersonSynopsisScalarWhereInput
    | Prisma.PersonSynopsisScalarWhereInput[]
  id?: Prisma.StringFilter<'PersonSynopsis'> | string
  personId?: Prisma.StringFilter<'PersonSynopsis'> | string
  fromDate?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
  toDate?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
  includeFeedback?: Prisma.BoolFilter<'PersonSynopsis'> | boolean
  content?: Prisma.StringFilter<'PersonSynopsis'> | string
  sources?: Prisma.StringNullableListFilter<'PersonSynopsis'>
  createdAt?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'PersonSynopsis'> | Date | string
}

export type PersonSynopsisCreateManyPersonInput = {
  id?: string
  fromDate: Date | string
  toDate: Date | string
  includeFeedback?: boolean
  content: string
  sources?: Prisma.PersonSynopsisCreatesourcesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PersonSynopsisUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  toDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  includeFeedback?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sources?: Prisma.PersonSynopsisUpdatesourcesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonSynopsisUncheckedUpdateWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  toDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  includeFeedback?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sources?: Prisma.PersonSynopsisUpdatesourcesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonSynopsisUncheckedUpdateManyWithoutPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  fromDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  toDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  includeFeedback?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  sources?: Prisma.PersonSynopsisUpdatesourcesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PersonSynopsisSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    fromDate?: boolean
    toDate?: boolean
    includeFeedback?: boolean
    content?: boolean
    sources?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personSynopsis']
>

export type PersonSynopsisSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    fromDate?: boolean
    toDate?: boolean
    includeFeedback?: boolean
    content?: boolean
    sources?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personSynopsis']
>

export type PersonSynopsisSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    personId?: boolean
    fromDate?: boolean
    toDate?: boolean
    includeFeedback?: boolean
    content?: boolean
    sources?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['personSynopsis']
>

export type PersonSynopsisSelectScalar = {
  id?: boolean
  personId?: boolean
  fromDate?: boolean
  toDate?: boolean
  includeFeedback?: boolean
  content?: boolean
  sources?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PersonSynopsisOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'personId'
  | 'fromDate'
  | 'toDate'
  | 'includeFeedback'
  | 'content'
  | 'sources'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['personSynopsis']
>
export type PersonSynopsisInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type PersonSynopsisIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type PersonSynopsisIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}

export type $PersonSynopsisPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'PersonSynopsis'
  objects: {
    person: Prisma.$PersonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      personId: string
      fromDate: Date
      toDate: Date
      includeFeedback: boolean
      content: string
      sources: string[]
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['personSynopsis']
  >
  composites: {}
}

export type PersonSynopsisGetPayload<
  S extends boolean | null | undefined | PersonSynopsisDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PersonSynopsisPayload, S>

export type PersonSynopsisCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  PersonSynopsisFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: PersonSynopsisCountAggregateInputType | true
}

export interface PersonSynopsisDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['PersonSynopsis']
    meta: { name: 'PersonSynopsis' }
  }
  /**
   * Find zero or one PersonSynopsis that matches the filter.
   * @param {PersonSynopsisFindUniqueArgs} args - Arguments to find a PersonSynopsis
   * @example
   * // Get one PersonSynopsis
   * const personSynopsis = await prisma.personSynopsis.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PersonSynopsisFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PersonSynopsisFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__PersonSynopsisClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one PersonSynopsis that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PersonSynopsisFindUniqueOrThrowArgs} args - Arguments to find a PersonSynopsis
   * @example
   * // Get one PersonSynopsis
   * const personSynopsis = await prisma.personSynopsis.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PersonSynopsisFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, PersonSynopsisFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__PersonSynopsisClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first PersonSynopsis that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonSynopsisFindFirstArgs} args - Arguments to find a PersonSynopsis
   * @example
   * // Get one PersonSynopsis
   * const personSynopsis = await prisma.personSynopsis.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PersonSynopsisFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PersonSynopsisFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__PersonSynopsisClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first PersonSynopsis that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonSynopsisFindFirstOrThrowArgs} args - Arguments to find a PersonSynopsis
   * @example
   * // Get one PersonSynopsis
   * const personSynopsis = await prisma.personSynopsis.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PersonSynopsisFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, PersonSynopsisFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__PersonSynopsisClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more PersonSynopses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonSynopsisFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PersonSynopses
   * const personSynopses = await prisma.personSynopsis.findMany()
   *
   * // Get first 10 PersonSynopses
   * const personSynopses = await prisma.personSynopsis.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const personSynopsisWithIdOnly = await prisma.personSynopsis.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PersonSynopsisFindManyArgs>(
    args?: Prisma.SelectSubset<T, PersonSynopsisFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a PersonSynopsis.
   * @param {PersonSynopsisCreateArgs} args - Arguments to create a PersonSynopsis.
   * @example
   * // Create one PersonSynopsis
   * const PersonSynopsis = await prisma.personSynopsis.create({
   *   data: {
   *     // ... data to create a PersonSynopsis
   *   }
   * })
   *
   */
  create<T extends PersonSynopsisCreateArgs>(
    args: Prisma.SelectSubset<T, PersonSynopsisCreateArgs<ExtArgs>>
  ): Prisma.Prisma__PersonSynopsisClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many PersonSynopses.
   * @param {PersonSynopsisCreateManyArgs} args - Arguments to create many PersonSynopses.
   * @example
   * // Create many PersonSynopses
   * const personSynopsis = await prisma.personSynopsis.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PersonSynopsisCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PersonSynopsisCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PersonSynopses and returns the data saved in the database.
   * @param {PersonSynopsisCreateManyAndReturnArgs} args - Arguments to create many PersonSynopses.
   * @example
   * // Create many PersonSynopses
   * const personSynopsis = await prisma.personSynopsis.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many PersonSynopses and only return the `id`
   * const personSynopsisWithIdOnly = await prisma.personSynopsis.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PersonSynopsisCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      PersonSynopsisCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a PersonSynopsis.
   * @param {PersonSynopsisDeleteArgs} args - Arguments to delete one PersonSynopsis.
   * @example
   * // Delete one PersonSynopsis
   * const PersonSynopsis = await prisma.personSynopsis.delete({
   *   where: {
   *     // ... filter to delete one PersonSynopsis
   *   }
   * })
   *
   */
  delete<T extends PersonSynopsisDeleteArgs>(
    args: Prisma.SelectSubset<T, PersonSynopsisDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__PersonSynopsisClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one PersonSynopsis.
   * @param {PersonSynopsisUpdateArgs} args - Arguments to update one PersonSynopsis.
   * @example
   * // Update one PersonSynopsis
   * const personSynopsis = await prisma.personSynopsis.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PersonSynopsisUpdateArgs>(
    args: Prisma.SelectSubset<T, PersonSynopsisUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__PersonSynopsisClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more PersonSynopses.
   * @param {PersonSynopsisDeleteManyArgs} args - Arguments to filter PersonSynopses to delete.
   * @example
   * // Delete a few PersonSynopses
   * const { count } = await prisma.personSynopsis.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PersonSynopsisDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PersonSynopsisDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PersonSynopses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonSynopsisUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PersonSynopses
   * const personSynopsis = await prisma.personSynopsis.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PersonSynopsisUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PersonSynopsisUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PersonSynopses and returns the data updated in the database.
   * @param {PersonSynopsisUpdateManyAndReturnArgs} args - Arguments to update many PersonSynopses.
   * @example
   * // Update many PersonSynopses
   * const personSynopsis = await prisma.personSynopsis.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more PersonSynopses and only return the `id`
   * const personSynopsisWithIdOnly = await prisma.personSynopsis.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PersonSynopsisUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, PersonSynopsisUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one PersonSynopsis.
   * @param {PersonSynopsisUpsertArgs} args - Arguments to update or create a PersonSynopsis.
   * @example
   * // Update or create a PersonSynopsis
   * const personSynopsis = await prisma.personSynopsis.upsert({
   *   create: {
   *     // ... data to create a PersonSynopsis
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PersonSynopsis we want to update
   *   }
   * })
   */
  upsert<T extends PersonSynopsisUpsertArgs>(
    args: Prisma.SelectSubset<T, PersonSynopsisUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__PersonSynopsisClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonSynopsisPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of PersonSynopses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonSynopsisCountArgs} args - Arguments to filter PersonSynopses to count.
   * @example
   * // Count the number of PersonSynopses
   * const count = await prisma.personSynopsis.count({
   *   where: {
   *     // ... the filter for the PersonSynopses we want to count
   *   }
   * })
   **/
  count<T extends PersonSynopsisCountArgs>(
    args?: Prisma.Subset<T, PersonSynopsisCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            PersonSynopsisCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PersonSynopsis.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonSynopsisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PersonSynopsisAggregateArgs>(
    args: Prisma.Subset<T, PersonSynopsisAggregateArgs>
  ): Prisma.PrismaPromise<GetPersonSynopsisAggregateType<T>>

  /**
   * Group by PersonSynopsis.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PersonSynopsisGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PersonSynopsisGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PersonSynopsisGroupByArgs['orderBy'] }
      : { orderBy?: PersonSynopsisGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, PersonSynopsisGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetPersonSynopsisGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonSynopsis model
   */
  readonly fields: PersonSynopsisFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for PersonSynopsis.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PersonSynopsisClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  person<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the PersonSynopsis model
 */
export interface PersonSynopsisFieldRefs {
  readonly id: Prisma.FieldRef<'PersonSynopsis', 'String'>
  readonly personId: Prisma.FieldRef<'PersonSynopsis', 'String'>
  readonly fromDate: Prisma.FieldRef<'PersonSynopsis', 'DateTime'>
  readonly toDate: Prisma.FieldRef<'PersonSynopsis', 'DateTime'>
  readonly includeFeedback: Prisma.FieldRef<'PersonSynopsis', 'Boolean'>
  readonly content: Prisma.FieldRef<'PersonSynopsis', 'String'>
  readonly sources: Prisma.FieldRef<'PersonSynopsis', 'String[]'>
  readonly createdAt: Prisma.FieldRef<'PersonSynopsis', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'PersonSynopsis', 'DateTime'>
}

// Custom InputTypes
/**
 * PersonSynopsis findUnique
 */
export type PersonSynopsisFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * Filter, which PersonSynopsis to fetch.
   */
  where: Prisma.PersonSynopsisWhereUniqueInput
}

/**
 * PersonSynopsis findUniqueOrThrow
 */
export type PersonSynopsisFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * Filter, which PersonSynopsis to fetch.
   */
  where: Prisma.PersonSynopsisWhereUniqueInput
}

/**
 * PersonSynopsis findFirst
 */
export type PersonSynopsisFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * Filter, which PersonSynopsis to fetch.
   */
  where?: Prisma.PersonSynopsisWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonSynopses to fetch.
   */
  orderBy?:
    | Prisma.PersonSynopsisOrderByWithRelationInput
    | Prisma.PersonSynopsisOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PersonSynopses.
   */
  cursor?: Prisma.PersonSynopsisWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonSynopses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonSynopses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PersonSynopses.
   */
  distinct?:
    | Prisma.PersonSynopsisScalarFieldEnum
    | Prisma.PersonSynopsisScalarFieldEnum[]
}

/**
 * PersonSynopsis findFirstOrThrow
 */
export type PersonSynopsisFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * Filter, which PersonSynopsis to fetch.
   */
  where?: Prisma.PersonSynopsisWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonSynopses to fetch.
   */
  orderBy?:
    | Prisma.PersonSynopsisOrderByWithRelationInput
    | Prisma.PersonSynopsisOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for PersonSynopses.
   */
  cursor?: Prisma.PersonSynopsisWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonSynopses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonSynopses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of PersonSynopses.
   */
  distinct?:
    | Prisma.PersonSynopsisScalarFieldEnum
    | Prisma.PersonSynopsisScalarFieldEnum[]
}

/**
 * PersonSynopsis findMany
 */
export type PersonSynopsisFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * Filter, which PersonSynopses to fetch.
   */
  where?: Prisma.PersonSynopsisWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of PersonSynopses to fetch.
   */
  orderBy?:
    | Prisma.PersonSynopsisOrderByWithRelationInput
    | Prisma.PersonSynopsisOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing PersonSynopses.
   */
  cursor?: Prisma.PersonSynopsisWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` PersonSynopses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` PersonSynopses.
   */
  skip?: number
  distinct?:
    | Prisma.PersonSynopsisScalarFieldEnum
    | Prisma.PersonSynopsisScalarFieldEnum[]
}

/**
 * PersonSynopsis create
 */
export type PersonSynopsisCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * The data needed to create a PersonSynopsis.
   */
  data: Prisma.XOR<
    Prisma.PersonSynopsisCreateInput,
    Prisma.PersonSynopsisUncheckedCreateInput
  >
}

/**
 * PersonSynopsis createMany
 */
export type PersonSynopsisCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many PersonSynopses.
   */
  data:
    | Prisma.PersonSynopsisCreateManyInput
    | Prisma.PersonSynopsisCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PersonSynopsis createManyAndReturn
 */
export type PersonSynopsisCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * The data used to create many PersonSynopses.
   */
  data:
    | Prisma.PersonSynopsisCreateManyInput
    | Prisma.PersonSynopsisCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PersonSynopsis update
 */
export type PersonSynopsisUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * The data needed to update a PersonSynopsis.
   */
  data: Prisma.XOR<
    Prisma.PersonSynopsisUpdateInput,
    Prisma.PersonSynopsisUncheckedUpdateInput
  >
  /**
   * Choose, which PersonSynopsis to update.
   */
  where: Prisma.PersonSynopsisWhereUniqueInput
}

/**
 * PersonSynopsis updateMany
 */
export type PersonSynopsisUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update PersonSynopses.
   */
  data: Prisma.XOR<
    Prisma.PersonSynopsisUpdateManyMutationInput,
    Prisma.PersonSynopsisUncheckedUpdateManyInput
  >
  /**
   * Filter which PersonSynopses to update
   */
  where?: Prisma.PersonSynopsisWhereInput
  /**
   * Limit how many PersonSynopses to update.
   */
  limit?: number
}

/**
 * PersonSynopsis updateManyAndReturn
 */
export type PersonSynopsisUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * The data used to update PersonSynopses.
   */
  data: Prisma.XOR<
    Prisma.PersonSynopsisUpdateManyMutationInput,
    Prisma.PersonSynopsisUncheckedUpdateManyInput
  >
  /**
   * Filter which PersonSynopses to update
   */
  where?: Prisma.PersonSynopsisWhereInput
  /**
   * Limit how many PersonSynopses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PersonSynopsis upsert
 */
export type PersonSynopsisUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * The filter to search for the PersonSynopsis to update in case it exists.
   */
  where: Prisma.PersonSynopsisWhereUniqueInput
  /**
   * In case the PersonSynopsis found by the `where` argument doesn't exist, create a new PersonSynopsis with this data.
   */
  create: Prisma.XOR<
    Prisma.PersonSynopsisCreateInput,
    Prisma.PersonSynopsisUncheckedCreateInput
  >
  /**
   * In case the PersonSynopsis was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.PersonSynopsisUpdateInput,
    Prisma.PersonSynopsisUncheckedUpdateInput
  >
}

/**
 * PersonSynopsis delete
 */
export type PersonSynopsisDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
  /**
   * Filter which PersonSynopsis to delete.
   */
  where: Prisma.PersonSynopsisWhereUniqueInput
}

/**
 * PersonSynopsis deleteMany
 */
export type PersonSynopsisDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which PersonSynopses to delete
   */
  where?: Prisma.PersonSynopsisWhereInput
  /**
   * Limit how many PersonSynopses to delete.
   */
  limit?: number
}

/**
 * PersonSynopsis without action
 */
export type PersonSynopsisDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PersonSynopsis
   */
  select?: Prisma.PersonSynopsisSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PersonSynopsis
   */
  omit?: Prisma.PersonSynopsisOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonSynopsisInclude<ExtArgs> | null
}
