/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `InitiativeOwner` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model InitiativeOwner
 *
 */
export type InitiativeOwnerModel =
  runtime.Types.Result.DefaultSelection<Prisma.$InitiativeOwnerPayload>

export type AggregateInitiativeOwner = {
  _count: InitiativeOwnerCountAggregateOutputType | null
  _min: InitiativeOwnerMinAggregateOutputType | null
  _max: InitiativeOwnerMaxAggregateOutputType | null
}

export type InitiativeOwnerMinAggregateOutputType = {
  initiativeId: string | null
  personId: string | null
  role: string | null
}

export type InitiativeOwnerMaxAggregateOutputType = {
  initiativeId: string | null
  personId: string | null
  role: string | null
}

export type InitiativeOwnerCountAggregateOutputType = {
  initiativeId: number
  personId: number
  role: number
  _all: number
}

export type InitiativeOwnerMinAggregateInputType = {
  initiativeId?: true
  personId?: true
  role?: true
}

export type InitiativeOwnerMaxAggregateInputType = {
  initiativeId?: true
  personId?: true
  role?: true
}

export type InitiativeOwnerCountAggregateInputType = {
  initiativeId?: true
  personId?: true
  role?: true
  _all?: true
}

export type InitiativeOwnerAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InitiativeOwner to aggregate.
   */
  where?: Prisma.InitiativeOwnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InitiativeOwners to fetch.
   */
  orderBy?:
    | Prisma.InitiativeOwnerOrderByWithRelationInput
    | Prisma.InitiativeOwnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.InitiativeOwnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InitiativeOwners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InitiativeOwners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned InitiativeOwners
   **/
  _count?: true | InitiativeOwnerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: InitiativeOwnerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: InitiativeOwnerMaxAggregateInputType
}

export type GetInitiativeOwnerAggregateType<
  T extends InitiativeOwnerAggregateArgs,
> = {
  [P in keyof T & keyof AggregateInitiativeOwner]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInitiativeOwner[P]>
    : Prisma.GetScalarType<T[P], AggregateInitiativeOwner[P]>
}

export type InitiativeOwnerGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.InitiativeOwnerWhereInput
  orderBy?:
    | Prisma.InitiativeOwnerOrderByWithAggregationInput
    | Prisma.InitiativeOwnerOrderByWithAggregationInput[]
  by:
    | Prisma.InitiativeOwnerScalarFieldEnum[]
    | Prisma.InitiativeOwnerScalarFieldEnum
  having?: Prisma.InitiativeOwnerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InitiativeOwnerCountAggregateInputType | true
  _min?: InitiativeOwnerMinAggregateInputType
  _max?: InitiativeOwnerMaxAggregateInputType
}

export type InitiativeOwnerGroupByOutputType = {
  initiativeId: string
  personId: string
  role: string
  _count: InitiativeOwnerCountAggregateOutputType | null
  _min: InitiativeOwnerMinAggregateOutputType | null
  _max: InitiativeOwnerMaxAggregateOutputType | null
}

type GetInitiativeOwnerGroupByPayload<T extends InitiativeOwnerGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<InitiativeOwnerGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof InitiativeOwnerGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InitiativeOwnerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InitiativeOwnerGroupByOutputType[P]>
      }
    >
  >

export type InitiativeOwnerWhereInput = {
  AND?: Prisma.InitiativeOwnerWhereInput | Prisma.InitiativeOwnerWhereInput[]
  OR?: Prisma.InitiativeOwnerWhereInput[]
  NOT?: Prisma.InitiativeOwnerWhereInput | Prisma.InitiativeOwnerWhereInput[]
  initiativeId?: Prisma.StringFilter<'InitiativeOwner'> | string
  personId?: Prisma.StringFilter<'InitiativeOwner'> | string
  role?: Prisma.StringFilter<'InitiativeOwner'> | string
  initiative?: Prisma.XOR<
    Prisma.InitiativeScalarRelationFilter,
    Prisma.InitiativeWhereInput
  >
  person?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
}

export type InitiativeOwnerOrderByWithRelationInput = {
  initiativeId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  initiative?: Prisma.InitiativeOrderByWithRelationInput
  person?: Prisma.PersonOrderByWithRelationInput
}

export type InitiativeOwnerWhereUniqueInput = Prisma.AtLeast<
  {
    initiativeId_personId?: Prisma.InitiativeOwnerInitiativeIdPersonIdCompoundUniqueInput
    AND?: Prisma.InitiativeOwnerWhereInput | Prisma.InitiativeOwnerWhereInput[]
    OR?: Prisma.InitiativeOwnerWhereInput[]
    NOT?: Prisma.InitiativeOwnerWhereInput | Prisma.InitiativeOwnerWhereInput[]
    initiativeId?: Prisma.StringFilter<'InitiativeOwner'> | string
    personId?: Prisma.StringFilter<'InitiativeOwner'> | string
    role?: Prisma.StringFilter<'InitiativeOwner'> | string
    initiative?: Prisma.XOR<
      Prisma.InitiativeScalarRelationFilter,
      Prisma.InitiativeWhereInput
    >
    person?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
  },
  'initiativeId_personId'
>

export type InitiativeOwnerOrderByWithAggregationInput = {
  initiativeId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  _count?: Prisma.InitiativeOwnerCountOrderByAggregateInput
  _max?: Prisma.InitiativeOwnerMaxOrderByAggregateInput
  _min?: Prisma.InitiativeOwnerMinOrderByAggregateInput
}

export type InitiativeOwnerScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.InitiativeOwnerScalarWhereWithAggregatesInput
    | Prisma.InitiativeOwnerScalarWhereWithAggregatesInput[]
  OR?: Prisma.InitiativeOwnerScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.InitiativeOwnerScalarWhereWithAggregatesInput
    | Prisma.InitiativeOwnerScalarWhereWithAggregatesInput[]
  initiativeId?: Prisma.StringWithAggregatesFilter<'InitiativeOwner'> | string
  personId?: Prisma.StringWithAggregatesFilter<'InitiativeOwner'> | string
  role?: Prisma.StringWithAggregatesFilter<'InitiativeOwner'> | string
}

export type InitiativeOwnerCreateInput = {
  role?: string
  initiative: Prisma.InitiativeCreateNestedOneWithoutOwnersInput
  person: Prisma.PersonCreateNestedOneWithoutInitiativeOwnersInput
}

export type InitiativeOwnerUncheckedCreateInput = {
  initiativeId: string
  personId: string
  role?: string
}

export type InitiativeOwnerUpdateInput = {
  role?: Prisma.StringFieldUpdateOperationsInput | string
  initiative?: Prisma.InitiativeUpdateOneRequiredWithoutOwnersNestedInput
  person?: Prisma.PersonUpdateOneRequiredWithoutInitiativeOwnersNestedInput
}

export type InitiativeOwnerUncheckedUpdateInput = {
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InitiativeOwnerCreateManyInput = {
  initiativeId: string
  personId: string
  role?: string
}

export type InitiativeOwnerUpdateManyMutationInput = {
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InitiativeOwnerUncheckedUpdateManyInput = {
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InitiativeOwnerListRelationFilter = {
  every?: Prisma.InitiativeOwnerWhereInput
  some?: Prisma.InitiativeOwnerWhereInput
  none?: Prisma.InitiativeOwnerWhereInput
}

export type InitiativeOwnerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InitiativeOwnerInitiativeIdPersonIdCompoundUniqueInput = {
  initiativeId: string
  personId: string
}

export type InitiativeOwnerCountOrderByAggregateInput = {
  initiativeId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type InitiativeOwnerMaxOrderByAggregateInput = {
  initiativeId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type InitiativeOwnerMinOrderByAggregateInput = {
  initiativeId?: Prisma.SortOrder
  personId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type InitiativeOwnerCreateNestedManyWithoutPersonInput = {
  create?:
    | Prisma.XOR<
        Prisma.InitiativeOwnerCreateWithoutPersonInput,
        Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput
      >
    | Prisma.InitiativeOwnerCreateWithoutPersonInput[]
    | Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.InitiativeOwnerCreateOrConnectWithoutPersonInput
    | Prisma.InitiativeOwnerCreateOrConnectWithoutPersonInput[]
  createMany?: Prisma.InitiativeOwnerCreateManyPersonInputEnvelope
  connect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
}

export type InitiativeOwnerUncheckedCreateNestedManyWithoutPersonInput = {
  create?:
    | Prisma.XOR<
        Prisma.InitiativeOwnerCreateWithoutPersonInput,
        Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput
      >
    | Prisma.InitiativeOwnerCreateWithoutPersonInput[]
    | Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.InitiativeOwnerCreateOrConnectWithoutPersonInput
    | Prisma.InitiativeOwnerCreateOrConnectWithoutPersonInput[]
  createMany?: Prisma.InitiativeOwnerCreateManyPersonInputEnvelope
  connect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
}

export type InitiativeOwnerUpdateManyWithoutPersonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InitiativeOwnerCreateWithoutPersonInput,
        Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput
      >
    | Prisma.InitiativeOwnerCreateWithoutPersonInput[]
    | Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.InitiativeOwnerCreateOrConnectWithoutPersonInput
    | Prisma.InitiativeOwnerCreateOrConnectWithoutPersonInput[]
  upsert?:
    | Prisma.InitiativeOwnerUpsertWithWhereUniqueWithoutPersonInput
    | Prisma.InitiativeOwnerUpsertWithWhereUniqueWithoutPersonInput[]
  createMany?: Prisma.InitiativeOwnerCreateManyPersonInputEnvelope
  set?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  disconnect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  delete?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  connect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  update?:
    | Prisma.InitiativeOwnerUpdateWithWhereUniqueWithoutPersonInput
    | Prisma.InitiativeOwnerUpdateWithWhereUniqueWithoutPersonInput[]
  updateMany?:
    | Prisma.InitiativeOwnerUpdateManyWithWhereWithoutPersonInput
    | Prisma.InitiativeOwnerUpdateManyWithWhereWithoutPersonInput[]
  deleteMany?:
    | Prisma.InitiativeOwnerScalarWhereInput
    | Prisma.InitiativeOwnerScalarWhereInput[]
}

export type InitiativeOwnerUncheckedUpdateManyWithoutPersonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InitiativeOwnerCreateWithoutPersonInput,
        Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput
      >
    | Prisma.InitiativeOwnerCreateWithoutPersonInput[]
    | Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput[]
  connectOrCreate?:
    | Prisma.InitiativeOwnerCreateOrConnectWithoutPersonInput
    | Prisma.InitiativeOwnerCreateOrConnectWithoutPersonInput[]
  upsert?:
    | Prisma.InitiativeOwnerUpsertWithWhereUniqueWithoutPersonInput
    | Prisma.InitiativeOwnerUpsertWithWhereUniqueWithoutPersonInput[]
  createMany?: Prisma.InitiativeOwnerCreateManyPersonInputEnvelope
  set?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  disconnect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  delete?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  connect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  update?:
    | Prisma.InitiativeOwnerUpdateWithWhereUniqueWithoutPersonInput
    | Prisma.InitiativeOwnerUpdateWithWhereUniqueWithoutPersonInput[]
  updateMany?:
    | Prisma.InitiativeOwnerUpdateManyWithWhereWithoutPersonInput
    | Prisma.InitiativeOwnerUpdateManyWithWhereWithoutPersonInput[]
  deleteMany?:
    | Prisma.InitiativeOwnerScalarWhereInput
    | Prisma.InitiativeOwnerScalarWhereInput[]
}

export type InitiativeOwnerCreateNestedManyWithoutInitiativeInput = {
  create?:
    | Prisma.XOR<
        Prisma.InitiativeOwnerCreateWithoutInitiativeInput,
        Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.InitiativeOwnerCreateWithoutInitiativeInput[]
    | Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.InitiativeOwnerCreateOrConnectWithoutInitiativeInput
    | Prisma.InitiativeOwnerCreateOrConnectWithoutInitiativeInput[]
  createMany?: Prisma.InitiativeOwnerCreateManyInitiativeInputEnvelope
  connect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
}

export type InitiativeOwnerUncheckedCreateNestedManyWithoutInitiativeInput = {
  create?:
    | Prisma.XOR<
        Prisma.InitiativeOwnerCreateWithoutInitiativeInput,
        Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.InitiativeOwnerCreateWithoutInitiativeInput[]
    | Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.InitiativeOwnerCreateOrConnectWithoutInitiativeInput
    | Prisma.InitiativeOwnerCreateOrConnectWithoutInitiativeInput[]
  createMany?: Prisma.InitiativeOwnerCreateManyInitiativeInputEnvelope
  connect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
}

export type InitiativeOwnerUpdateManyWithoutInitiativeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InitiativeOwnerCreateWithoutInitiativeInput,
        Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.InitiativeOwnerCreateWithoutInitiativeInput[]
    | Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.InitiativeOwnerCreateOrConnectWithoutInitiativeInput
    | Prisma.InitiativeOwnerCreateOrConnectWithoutInitiativeInput[]
  upsert?:
    | Prisma.InitiativeOwnerUpsertWithWhereUniqueWithoutInitiativeInput
    | Prisma.InitiativeOwnerUpsertWithWhereUniqueWithoutInitiativeInput[]
  createMany?: Prisma.InitiativeOwnerCreateManyInitiativeInputEnvelope
  set?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  disconnect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  delete?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  connect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  update?:
    | Prisma.InitiativeOwnerUpdateWithWhereUniqueWithoutInitiativeInput
    | Prisma.InitiativeOwnerUpdateWithWhereUniqueWithoutInitiativeInput[]
  updateMany?:
    | Prisma.InitiativeOwnerUpdateManyWithWhereWithoutInitiativeInput
    | Prisma.InitiativeOwnerUpdateManyWithWhereWithoutInitiativeInput[]
  deleteMany?:
    | Prisma.InitiativeOwnerScalarWhereInput
    | Prisma.InitiativeOwnerScalarWhereInput[]
}

export type InitiativeOwnerUncheckedUpdateManyWithoutInitiativeNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.InitiativeOwnerCreateWithoutInitiativeInput,
        Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput
      >
    | Prisma.InitiativeOwnerCreateWithoutInitiativeInput[]
    | Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput[]
  connectOrCreate?:
    | Prisma.InitiativeOwnerCreateOrConnectWithoutInitiativeInput
    | Prisma.InitiativeOwnerCreateOrConnectWithoutInitiativeInput[]
  upsert?:
    | Prisma.InitiativeOwnerUpsertWithWhereUniqueWithoutInitiativeInput
    | Prisma.InitiativeOwnerUpsertWithWhereUniqueWithoutInitiativeInput[]
  createMany?: Prisma.InitiativeOwnerCreateManyInitiativeInputEnvelope
  set?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  disconnect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  delete?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  connect?:
    | Prisma.InitiativeOwnerWhereUniqueInput
    | Prisma.InitiativeOwnerWhereUniqueInput[]
  update?:
    | Prisma.InitiativeOwnerUpdateWithWhereUniqueWithoutInitiativeInput
    | Prisma.InitiativeOwnerUpdateWithWhereUniqueWithoutInitiativeInput[]
  updateMany?:
    | Prisma.InitiativeOwnerUpdateManyWithWhereWithoutInitiativeInput
    | Prisma.InitiativeOwnerUpdateManyWithWhereWithoutInitiativeInput[]
  deleteMany?:
    | Prisma.InitiativeOwnerScalarWhereInput
    | Prisma.InitiativeOwnerScalarWhereInput[]
}

export type InitiativeOwnerCreateWithoutPersonInput = {
  role?: string
  initiative: Prisma.InitiativeCreateNestedOneWithoutOwnersInput
}

export type InitiativeOwnerUncheckedCreateWithoutPersonInput = {
  initiativeId: string
  role?: string
}

export type InitiativeOwnerCreateOrConnectWithoutPersonInput = {
  where: Prisma.InitiativeOwnerWhereUniqueInput
  create: Prisma.XOR<
    Prisma.InitiativeOwnerCreateWithoutPersonInput,
    Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput
  >
}

export type InitiativeOwnerCreateManyPersonInputEnvelope = {
  data:
    | Prisma.InitiativeOwnerCreateManyPersonInput
    | Prisma.InitiativeOwnerCreateManyPersonInput[]
  skipDuplicates?: boolean
}

export type InitiativeOwnerUpsertWithWhereUniqueWithoutPersonInput = {
  where: Prisma.InitiativeOwnerWhereUniqueInput
  update: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateWithoutPersonInput,
    Prisma.InitiativeOwnerUncheckedUpdateWithoutPersonInput
  >
  create: Prisma.XOR<
    Prisma.InitiativeOwnerCreateWithoutPersonInput,
    Prisma.InitiativeOwnerUncheckedCreateWithoutPersonInput
  >
}

export type InitiativeOwnerUpdateWithWhereUniqueWithoutPersonInput = {
  where: Prisma.InitiativeOwnerWhereUniqueInput
  data: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateWithoutPersonInput,
    Prisma.InitiativeOwnerUncheckedUpdateWithoutPersonInput
  >
}

export type InitiativeOwnerUpdateManyWithWhereWithoutPersonInput = {
  where: Prisma.InitiativeOwnerScalarWhereInput
  data: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateManyMutationInput,
    Prisma.InitiativeOwnerUncheckedUpdateManyWithoutPersonInput
  >
}

export type InitiativeOwnerScalarWhereInput = {
  AND?:
    | Prisma.InitiativeOwnerScalarWhereInput
    | Prisma.InitiativeOwnerScalarWhereInput[]
  OR?: Prisma.InitiativeOwnerScalarWhereInput[]
  NOT?:
    | Prisma.InitiativeOwnerScalarWhereInput
    | Prisma.InitiativeOwnerScalarWhereInput[]
  initiativeId?: Prisma.StringFilter<'InitiativeOwner'> | string
  personId?: Prisma.StringFilter<'InitiativeOwner'> | string
  role?: Prisma.StringFilter<'InitiativeOwner'> | string
}

export type InitiativeOwnerCreateWithoutInitiativeInput = {
  role?: string
  person: Prisma.PersonCreateNestedOneWithoutInitiativeOwnersInput
}

export type InitiativeOwnerUncheckedCreateWithoutInitiativeInput = {
  personId: string
  role?: string
}

export type InitiativeOwnerCreateOrConnectWithoutInitiativeInput = {
  where: Prisma.InitiativeOwnerWhereUniqueInput
  create: Prisma.XOR<
    Prisma.InitiativeOwnerCreateWithoutInitiativeInput,
    Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput
  >
}

export type InitiativeOwnerCreateManyInitiativeInputEnvelope = {
  data:
    | Prisma.InitiativeOwnerCreateManyInitiativeInput
    | Prisma.InitiativeOwnerCreateManyInitiativeInput[]
  skipDuplicates?: boolean
}

export type InitiativeOwnerUpsertWithWhereUniqueWithoutInitiativeInput = {
  where: Prisma.InitiativeOwnerWhereUniqueInput
  update: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateWithoutInitiativeInput,
    Prisma.InitiativeOwnerUncheckedUpdateWithoutInitiativeInput
  >
  create: Prisma.XOR<
    Prisma.InitiativeOwnerCreateWithoutInitiativeInput,
    Prisma.InitiativeOwnerUncheckedCreateWithoutInitiativeInput
  >
}

export type InitiativeOwnerUpdateWithWhereUniqueWithoutInitiativeInput = {
  where: Prisma.InitiativeOwnerWhereUniqueInput
  data: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateWithoutInitiativeInput,
    Prisma.InitiativeOwnerUncheckedUpdateWithoutInitiativeInput
  >
}

export type InitiativeOwnerUpdateManyWithWhereWithoutInitiativeInput = {
  where: Prisma.InitiativeOwnerScalarWhereInput
  data: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateManyMutationInput,
    Prisma.InitiativeOwnerUncheckedUpdateManyWithoutInitiativeInput
  >
}

export type InitiativeOwnerCreateManyPersonInput = {
  initiativeId: string
  role?: string
}

export type InitiativeOwnerUpdateWithoutPersonInput = {
  role?: Prisma.StringFieldUpdateOperationsInput | string
  initiative?: Prisma.InitiativeUpdateOneRequiredWithoutOwnersNestedInput
}

export type InitiativeOwnerUncheckedUpdateWithoutPersonInput = {
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InitiativeOwnerUncheckedUpdateManyWithoutPersonInput = {
  initiativeId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InitiativeOwnerCreateManyInitiativeInput = {
  personId: string
  role?: string
}

export type InitiativeOwnerUpdateWithoutInitiativeInput = {
  role?: Prisma.StringFieldUpdateOperationsInput | string
  person?: Prisma.PersonUpdateOneRequiredWithoutInitiativeOwnersNestedInput
}

export type InitiativeOwnerUncheckedUpdateWithoutInitiativeInput = {
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InitiativeOwnerUncheckedUpdateManyWithoutInitiativeInput = {
  personId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InitiativeOwnerSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    initiativeId?: boolean
    personId?: boolean
    role?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['initiativeOwner']
>

export type InitiativeOwnerSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    initiativeId?: boolean
    personId?: boolean
    role?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['initiativeOwner']
>

export type InitiativeOwnerSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    initiativeId?: boolean
    personId?: boolean
    role?: boolean
    initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
    person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['initiativeOwner']
>

export type InitiativeOwnerSelectScalar = {
  initiativeId?: boolean
  personId?: boolean
  role?: boolean
}

export type InitiativeOwnerOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'initiativeId' | 'personId' | 'role',
  ExtArgs['result']['initiativeOwner']
>
export type InitiativeOwnerInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type InitiativeOwnerIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}
export type InitiativeOwnerIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  initiative?: boolean | Prisma.InitiativeDefaultArgs<ExtArgs>
  person?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
}

export type $InitiativeOwnerPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'InitiativeOwner'
  objects: {
    initiative: Prisma.$InitiativePayload<ExtArgs>
    person: Prisma.$PersonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      initiativeId: string
      personId: string
      role: string
    },
    ExtArgs['result']['initiativeOwner']
  >
  composites: {}
}

export type InitiativeOwnerGetPayload<
  S extends boolean | null | undefined | InitiativeOwnerDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$InitiativeOwnerPayload, S>

export type InitiativeOwnerCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  InitiativeOwnerFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: InitiativeOwnerCountAggregateInputType | true
}

export interface InitiativeOwnerDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['InitiativeOwner']
    meta: { name: 'InitiativeOwner' }
  }
  /**
   * Find zero or one InitiativeOwner that matches the filter.
   * @param {InitiativeOwnerFindUniqueArgs} args - Arguments to find a InitiativeOwner
   * @example
   * // Get one InitiativeOwner
   * const initiativeOwner = await prisma.initiativeOwner.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InitiativeOwnerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, InitiativeOwnerFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeOwnerClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one InitiativeOwner that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InitiativeOwnerFindUniqueOrThrowArgs} args - Arguments to find a InitiativeOwner
   * @example
   * // Get one InitiativeOwner
   * const initiativeOwner = await prisma.initiativeOwner.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InitiativeOwnerFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, InitiativeOwnerFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeOwnerClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first InitiativeOwner that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InitiativeOwnerFindFirstArgs} args - Arguments to find a InitiativeOwner
   * @example
   * // Get one InitiativeOwner
   * const initiativeOwner = await prisma.initiativeOwner.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InitiativeOwnerFindFirstArgs>(
    args?: Prisma.SelectSubset<T, InitiativeOwnerFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeOwnerClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first InitiativeOwner that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InitiativeOwnerFindFirstOrThrowArgs} args - Arguments to find a InitiativeOwner
   * @example
   * // Get one InitiativeOwner
   * const initiativeOwner = await prisma.initiativeOwner.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InitiativeOwnerFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, InitiativeOwnerFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeOwnerClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more InitiativeOwners that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InitiativeOwnerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InitiativeOwners
   * const initiativeOwners = await prisma.initiativeOwner.findMany()
   *
   * // Get first 10 InitiativeOwners
   * const initiativeOwners = await prisma.initiativeOwner.findMany({ take: 10 })
   *
   * // Only select the `initiativeId`
   * const initiativeOwnerWithInitiativeIdOnly = await prisma.initiativeOwner.findMany({ select: { initiativeId: true } })
   *
   */
  findMany<T extends InitiativeOwnerFindManyArgs>(
    args?: Prisma.SelectSubset<T, InitiativeOwnerFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a InitiativeOwner.
   * @param {InitiativeOwnerCreateArgs} args - Arguments to create a InitiativeOwner.
   * @example
   * // Create one InitiativeOwner
   * const InitiativeOwner = await prisma.initiativeOwner.create({
   *   data: {
   *     // ... data to create a InitiativeOwner
   *   }
   * })
   *
   */
  create<T extends InitiativeOwnerCreateArgs>(
    args: Prisma.SelectSubset<T, InitiativeOwnerCreateArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeOwnerClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many InitiativeOwners.
   * @param {InitiativeOwnerCreateManyArgs} args - Arguments to create many InitiativeOwners.
   * @example
   * // Create many InitiativeOwners
   * const initiativeOwner = await prisma.initiativeOwner.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends InitiativeOwnerCreateManyArgs>(
    args?: Prisma.SelectSubset<T, InitiativeOwnerCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InitiativeOwners and returns the data saved in the database.
   * @param {InitiativeOwnerCreateManyAndReturnArgs} args - Arguments to create many InitiativeOwners.
   * @example
   * // Create many InitiativeOwners
   * const initiativeOwner = await prisma.initiativeOwner.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many InitiativeOwners and only return the `initiativeId`
   * const initiativeOwnerWithInitiativeIdOnly = await prisma.initiativeOwner.createManyAndReturn({
   *   select: { initiativeId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends InitiativeOwnerCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      InitiativeOwnerCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a InitiativeOwner.
   * @param {InitiativeOwnerDeleteArgs} args - Arguments to delete one InitiativeOwner.
   * @example
   * // Delete one InitiativeOwner
   * const InitiativeOwner = await prisma.initiativeOwner.delete({
   *   where: {
   *     // ... filter to delete one InitiativeOwner
   *   }
   * })
   *
   */
  delete<T extends InitiativeOwnerDeleteArgs>(
    args: Prisma.SelectSubset<T, InitiativeOwnerDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeOwnerClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one InitiativeOwner.
   * @param {InitiativeOwnerUpdateArgs} args - Arguments to update one InitiativeOwner.
   * @example
   * // Update one InitiativeOwner
   * const initiativeOwner = await prisma.initiativeOwner.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends InitiativeOwnerUpdateArgs>(
    args: Prisma.SelectSubset<T, InitiativeOwnerUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeOwnerClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more InitiativeOwners.
   * @param {InitiativeOwnerDeleteManyArgs} args - Arguments to filter InitiativeOwners to delete.
   * @example
   * // Delete a few InitiativeOwners
   * const { count } = await prisma.initiativeOwner.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends InitiativeOwnerDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, InitiativeOwnerDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InitiativeOwners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InitiativeOwnerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InitiativeOwners
   * const initiativeOwner = await prisma.initiativeOwner.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends InitiativeOwnerUpdateManyArgs>(
    args: Prisma.SelectSubset<T, InitiativeOwnerUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InitiativeOwners and returns the data updated in the database.
   * @param {InitiativeOwnerUpdateManyAndReturnArgs} args - Arguments to update many InitiativeOwners.
   * @example
   * // Update many InitiativeOwners
   * const initiativeOwner = await prisma.initiativeOwner.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more InitiativeOwners and only return the `initiativeId`
   * const initiativeOwnerWithInitiativeIdOnly = await prisma.initiativeOwner.updateManyAndReturn({
   *   select: { initiativeId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends InitiativeOwnerUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      InitiativeOwnerUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one InitiativeOwner.
   * @param {InitiativeOwnerUpsertArgs} args - Arguments to update or create a InitiativeOwner.
   * @example
   * // Update or create a InitiativeOwner
   * const initiativeOwner = await prisma.initiativeOwner.upsert({
   *   create: {
   *     // ... data to create a InitiativeOwner
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InitiativeOwner we want to update
   *   }
   * })
   */
  upsert<T extends InitiativeOwnerUpsertArgs>(
    args: Prisma.SelectSubset<T, InitiativeOwnerUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeOwnerClient<
    runtime.Types.Result.GetResult<
      Prisma.$InitiativeOwnerPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of InitiativeOwners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InitiativeOwnerCountArgs} args - Arguments to filter InitiativeOwners to count.
   * @example
   * // Count the number of InitiativeOwners
   * const count = await prisma.initiativeOwner.count({
   *   where: {
   *     // ... the filter for the InitiativeOwners we want to count
   *   }
   * })
   **/
  count<T extends InitiativeOwnerCountArgs>(
    args?: Prisma.Subset<T, InitiativeOwnerCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            InitiativeOwnerCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InitiativeOwner.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InitiativeOwnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends InitiativeOwnerAggregateArgs>(
    args: Prisma.Subset<T, InitiativeOwnerAggregateArgs>
  ): Prisma.PrismaPromise<GetInitiativeOwnerAggregateType<T>>

  /**
   * Group by InitiativeOwner.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InitiativeOwnerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends InitiativeOwnerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InitiativeOwnerGroupByArgs['orderBy'] }
      : { orderBy?: InitiativeOwnerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, InitiativeOwnerGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetInitiativeOwnerGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InitiativeOwner model
   */
  readonly fields: InitiativeOwnerFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for InitiativeOwner.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InitiativeOwnerClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  initiative<T extends Prisma.InitiativeDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.InitiativeDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__InitiativeClient<
    | runtime.Types.Result.GetResult<
        Prisma.$InitiativePayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  person<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the InitiativeOwner model
 */
export interface InitiativeOwnerFieldRefs {
  readonly initiativeId: Prisma.FieldRef<'InitiativeOwner', 'String'>
  readonly personId: Prisma.FieldRef<'InitiativeOwner', 'String'>
  readonly role: Prisma.FieldRef<'InitiativeOwner', 'String'>
}

// Custom InputTypes
/**
 * InitiativeOwner findUnique
 */
export type InitiativeOwnerFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * Filter, which InitiativeOwner to fetch.
   */
  where: Prisma.InitiativeOwnerWhereUniqueInput
}

/**
 * InitiativeOwner findUniqueOrThrow
 */
export type InitiativeOwnerFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * Filter, which InitiativeOwner to fetch.
   */
  where: Prisma.InitiativeOwnerWhereUniqueInput
}

/**
 * InitiativeOwner findFirst
 */
export type InitiativeOwnerFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * Filter, which InitiativeOwner to fetch.
   */
  where?: Prisma.InitiativeOwnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InitiativeOwners to fetch.
   */
  orderBy?:
    | Prisma.InitiativeOwnerOrderByWithRelationInput
    | Prisma.InitiativeOwnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InitiativeOwners.
   */
  cursor?: Prisma.InitiativeOwnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InitiativeOwners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InitiativeOwners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InitiativeOwners.
   */
  distinct?:
    | Prisma.InitiativeOwnerScalarFieldEnum
    | Prisma.InitiativeOwnerScalarFieldEnum[]
}

/**
 * InitiativeOwner findFirstOrThrow
 */
export type InitiativeOwnerFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * Filter, which InitiativeOwner to fetch.
   */
  where?: Prisma.InitiativeOwnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InitiativeOwners to fetch.
   */
  orderBy?:
    | Prisma.InitiativeOwnerOrderByWithRelationInput
    | Prisma.InitiativeOwnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for InitiativeOwners.
   */
  cursor?: Prisma.InitiativeOwnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InitiativeOwners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InitiativeOwners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of InitiativeOwners.
   */
  distinct?:
    | Prisma.InitiativeOwnerScalarFieldEnum
    | Prisma.InitiativeOwnerScalarFieldEnum[]
}

/**
 * InitiativeOwner findMany
 */
export type InitiativeOwnerFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * Filter, which InitiativeOwners to fetch.
   */
  where?: Prisma.InitiativeOwnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of InitiativeOwners to fetch.
   */
  orderBy?:
    | Prisma.InitiativeOwnerOrderByWithRelationInput
    | Prisma.InitiativeOwnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing InitiativeOwners.
   */
  cursor?: Prisma.InitiativeOwnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` InitiativeOwners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` InitiativeOwners.
   */
  skip?: number
  distinct?:
    | Prisma.InitiativeOwnerScalarFieldEnum
    | Prisma.InitiativeOwnerScalarFieldEnum[]
}

/**
 * InitiativeOwner create
 */
export type InitiativeOwnerCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * The data needed to create a InitiativeOwner.
   */
  data: Prisma.XOR<
    Prisma.InitiativeOwnerCreateInput,
    Prisma.InitiativeOwnerUncheckedCreateInput
  >
}

/**
 * InitiativeOwner createMany
 */
export type InitiativeOwnerCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many InitiativeOwners.
   */
  data:
    | Prisma.InitiativeOwnerCreateManyInput
    | Prisma.InitiativeOwnerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * InitiativeOwner createManyAndReturn
 */
export type InitiativeOwnerCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * The data used to create many InitiativeOwners.
   */
  data:
    | Prisma.InitiativeOwnerCreateManyInput
    | Prisma.InitiativeOwnerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InitiativeOwner update
 */
export type InitiativeOwnerUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * The data needed to update a InitiativeOwner.
   */
  data: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateInput,
    Prisma.InitiativeOwnerUncheckedUpdateInput
  >
  /**
   * Choose, which InitiativeOwner to update.
   */
  where: Prisma.InitiativeOwnerWhereUniqueInput
}

/**
 * InitiativeOwner updateMany
 */
export type InitiativeOwnerUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update InitiativeOwners.
   */
  data: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateManyMutationInput,
    Prisma.InitiativeOwnerUncheckedUpdateManyInput
  >
  /**
   * Filter which InitiativeOwners to update
   */
  where?: Prisma.InitiativeOwnerWhereInput
  /**
   * Limit how many InitiativeOwners to update.
   */
  limit?: number
}

/**
 * InitiativeOwner updateManyAndReturn
 */
export type InitiativeOwnerUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * The data used to update InitiativeOwners.
   */
  data: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateManyMutationInput,
    Prisma.InitiativeOwnerUncheckedUpdateManyInput
  >
  /**
   * Filter which InitiativeOwners to update
   */
  where?: Prisma.InitiativeOwnerWhereInput
  /**
   * Limit how many InitiativeOwners to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InitiativeOwner upsert
 */
export type InitiativeOwnerUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * The filter to search for the InitiativeOwner to update in case it exists.
   */
  where: Prisma.InitiativeOwnerWhereUniqueInput
  /**
   * In case the InitiativeOwner found by the `where` argument doesn't exist, create a new InitiativeOwner with this data.
   */
  create: Prisma.XOR<
    Prisma.InitiativeOwnerCreateInput,
    Prisma.InitiativeOwnerUncheckedCreateInput
  >
  /**
   * In case the InitiativeOwner was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.InitiativeOwnerUpdateInput,
    Prisma.InitiativeOwnerUncheckedUpdateInput
  >
}

/**
 * InitiativeOwner delete
 */
export type InitiativeOwnerDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
  /**
   * Filter which InitiativeOwner to delete.
   */
  where: Prisma.InitiativeOwnerWhereUniqueInput
}

/**
 * InitiativeOwner deleteMany
 */
export type InitiativeOwnerDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which InitiativeOwners to delete
   */
  where?: Prisma.InitiativeOwnerWhereInput
  /**
   * Limit how many InitiativeOwners to delete.
   */
  limit?: number
}

/**
 * InitiativeOwner without action
 */
export type InitiativeOwnerDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the InitiativeOwner
   */
  select?: Prisma.InitiativeOwnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InitiativeOwner
   */
  omit?: Prisma.InitiativeOwnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InitiativeOwnerInclude<ExtArgs> | null
}
