/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `JobLevel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model JobLevel
 *
 */
export type JobLevelModel =
  runtime.Types.Result.DefaultSelection<Prisma.$JobLevelPayload>

export type AggregateJobLevel = {
  _count: JobLevelCountAggregateOutputType | null
  _avg: JobLevelAvgAggregateOutputType | null
  _sum: JobLevelSumAggregateOutputType | null
  _min: JobLevelMinAggregateOutputType | null
  _max: JobLevelMaxAggregateOutputType | null
}

export type JobLevelAvgAggregateOutputType = {
  order: number | null
}

export type JobLevelSumAggregateOutputType = {
  order: number | null
}

export type JobLevelMinAggregateOutputType = {
  id: string | null
  name: string | null
  order: number | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type JobLevelMaxAggregateOutputType = {
  id: string | null
  name: string | null
  order: number | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type JobLevelCountAggregateOutputType = {
  id: number
  name: number
  order: number
  organizationId: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type JobLevelAvgAggregateInputType = {
  order?: true
}

export type JobLevelSumAggregateInputType = {
  order?: true
}

export type JobLevelMinAggregateInputType = {
  id?: true
  name?: true
  order?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type JobLevelMaxAggregateInputType = {
  id?: true
  name?: true
  order?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type JobLevelCountAggregateInputType = {
  id?: true
  name?: true
  order?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type JobLevelAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which JobLevel to aggregate.
   */
  where?: Prisma.JobLevelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of JobLevels to fetch.
   */
  orderBy?:
    | Prisma.JobLevelOrderByWithRelationInput
    | Prisma.JobLevelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.JobLevelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` JobLevels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` JobLevels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned JobLevels
   **/
  _count?: true | JobLevelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: JobLevelAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: JobLevelSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: JobLevelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: JobLevelMaxAggregateInputType
}

export type GetJobLevelAggregateType<T extends JobLevelAggregateArgs> = {
  [P in keyof T & keyof AggregateJobLevel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateJobLevel[P]>
    : Prisma.GetScalarType<T[P], AggregateJobLevel[P]>
}

export type JobLevelGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.JobLevelWhereInput
  orderBy?:
    | Prisma.JobLevelOrderByWithAggregationInput
    | Prisma.JobLevelOrderByWithAggregationInput[]
  by: Prisma.JobLevelScalarFieldEnum[] | Prisma.JobLevelScalarFieldEnum
  having?: Prisma.JobLevelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: JobLevelCountAggregateInputType | true
  _avg?: JobLevelAvgAggregateInputType
  _sum?: JobLevelSumAggregateInputType
  _min?: JobLevelMinAggregateInputType
  _max?: JobLevelMaxAggregateInputType
}

export type JobLevelGroupByOutputType = {
  id: string
  name: string
  order: number
  organizationId: string
  createdAt: Date
  updatedAt: Date
  _count: JobLevelCountAggregateOutputType | null
  _avg: JobLevelAvgAggregateOutputType | null
  _sum: JobLevelSumAggregateOutputType | null
  _min: JobLevelMinAggregateOutputType | null
  _max: JobLevelMaxAggregateOutputType | null
}

type GetJobLevelGroupByPayload<T extends JobLevelGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<JobLevelGroupByOutputType, T['by']> & {
        [P in keyof T & keyof JobLevelGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], JobLevelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], JobLevelGroupByOutputType[P]>
      }
    >
  >

export type JobLevelWhereInput = {
  AND?: Prisma.JobLevelWhereInput | Prisma.JobLevelWhereInput[]
  OR?: Prisma.JobLevelWhereInput[]
  NOT?: Prisma.JobLevelWhereInput | Prisma.JobLevelWhereInput[]
  id?: Prisma.StringFilter<'JobLevel'> | string
  name?: Prisma.StringFilter<'JobLevel'> | string
  order?: Prisma.IntFilter<'JobLevel'> | number
  organizationId?: Prisma.StringFilter<'JobLevel'> | string
  createdAt?: Prisma.DateTimeFilter<'JobLevel'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'JobLevel'> | Date | string
  organization?: Prisma.XOR<
    Prisma.OrganizationScalarRelationFilter,
    Prisma.OrganizationWhereInput
  >
  jobRoles?: Prisma.JobRoleListRelationFilter
}

export type JobLevelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  jobRoles?: Prisma.JobRoleOrderByRelationAggregateInput
}

export type JobLevelWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    name_organizationId?: Prisma.JobLevelNameOrganizationIdCompoundUniqueInput
    AND?: Prisma.JobLevelWhereInput | Prisma.JobLevelWhereInput[]
    OR?: Prisma.JobLevelWhereInput[]
    NOT?: Prisma.JobLevelWhereInput | Prisma.JobLevelWhereInput[]
    name?: Prisma.StringFilter<'JobLevel'> | string
    order?: Prisma.IntFilter<'JobLevel'> | number
    organizationId?: Prisma.StringFilter<'JobLevel'> | string
    createdAt?: Prisma.DateTimeFilter<'JobLevel'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'JobLevel'> | Date | string
    organization?: Prisma.XOR<
      Prisma.OrganizationScalarRelationFilter,
      Prisma.OrganizationWhereInput
    >
    jobRoles?: Prisma.JobRoleListRelationFilter
  },
  'id' | 'name_organizationId'
>

export type JobLevelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.JobLevelCountOrderByAggregateInput
  _avg?: Prisma.JobLevelAvgOrderByAggregateInput
  _max?: Prisma.JobLevelMaxOrderByAggregateInput
  _min?: Prisma.JobLevelMinOrderByAggregateInput
  _sum?: Prisma.JobLevelSumOrderByAggregateInput
}

export type JobLevelScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.JobLevelScalarWhereWithAggregatesInput
    | Prisma.JobLevelScalarWhereWithAggregatesInput[]
  OR?: Prisma.JobLevelScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.JobLevelScalarWhereWithAggregatesInput
    | Prisma.JobLevelScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'JobLevel'> | string
  name?: Prisma.StringWithAggregatesFilter<'JobLevel'> | string
  order?: Prisma.IntWithAggregatesFilter<'JobLevel'> | number
  organizationId?: Prisma.StringWithAggregatesFilter<'JobLevel'> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'JobLevel'> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'JobLevel'> | Date | string
}

export type JobLevelCreateInput = {
  id?: string
  name: string
  order?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutLevelsInput
  jobRoles?: Prisma.JobRoleCreateNestedManyWithoutLevelInput
}

export type JobLevelUncheckedCreateInput = {
  id?: string
  name: string
  order?: number
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  jobRoles?: Prisma.JobRoleUncheckedCreateNestedManyWithoutLevelInput
}

export type JobLevelUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutLevelsNestedInput
  jobRoles?: Prisma.JobRoleUpdateManyWithoutLevelNestedInput
}

export type JobLevelUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jobRoles?: Prisma.JobRoleUncheckedUpdateManyWithoutLevelNestedInput
}

export type JobLevelCreateManyInput = {
  id?: string
  name: string
  order?: number
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type JobLevelUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobLevelUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobLevelListRelationFilter = {
  every?: Prisma.JobLevelWhereInput
  some?: Prisma.JobLevelWhereInput
  none?: Prisma.JobLevelWhereInput
}

export type JobLevelOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type JobLevelScalarRelationFilter = {
  is?: Prisma.JobLevelWhereInput
  isNot?: Prisma.JobLevelWhereInput
}

export type JobLevelNameOrganizationIdCompoundUniqueInput = {
  name: string
  organizationId: string
}

export type JobLevelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type JobLevelAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type JobLevelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type JobLevelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  order?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type JobLevelSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type JobLevelCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.JobLevelCreateWithoutOrganizationInput,
        Prisma.JobLevelUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.JobLevelCreateWithoutOrganizationInput[]
    | Prisma.JobLevelUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.JobLevelCreateOrConnectWithoutOrganizationInput
    | Prisma.JobLevelCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.JobLevelCreateManyOrganizationInputEnvelope
  connect?: Prisma.JobLevelWhereUniqueInput | Prisma.JobLevelWhereUniqueInput[]
}

export type JobLevelUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.JobLevelCreateWithoutOrganizationInput,
        Prisma.JobLevelUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.JobLevelCreateWithoutOrganizationInput[]
    | Prisma.JobLevelUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.JobLevelCreateOrConnectWithoutOrganizationInput
    | Prisma.JobLevelCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.JobLevelCreateManyOrganizationInputEnvelope
  connect?: Prisma.JobLevelWhereUniqueInput | Prisma.JobLevelWhereUniqueInput[]
}

export type JobLevelUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.JobLevelCreateWithoutOrganizationInput,
        Prisma.JobLevelUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.JobLevelCreateWithoutOrganizationInput[]
    | Prisma.JobLevelUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.JobLevelCreateOrConnectWithoutOrganizationInput
    | Prisma.JobLevelCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.JobLevelUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.JobLevelUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.JobLevelCreateManyOrganizationInputEnvelope
  set?: Prisma.JobLevelWhereUniqueInput | Prisma.JobLevelWhereUniqueInput[]
  disconnect?:
    | Prisma.JobLevelWhereUniqueInput
    | Prisma.JobLevelWhereUniqueInput[]
  delete?: Prisma.JobLevelWhereUniqueInput | Prisma.JobLevelWhereUniqueInput[]
  connect?: Prisma.JobLevelWhereUniqueInput | Prisma.JobLevelWhereUniqueInput[]
  update?:
    | Prisma.JobLevelUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.JobLevelUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.JobLevelUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.JobLevelUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.JobLevelScalarWhereInput
    | Prisma.JobLevelScalarWhereInput[]
}

export type JobLevelUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.JobLevelCreateWithoutOrganizationInput,
        Prisma.JobLevelUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.JobLevelCreateWithoutOrganizationInput[]
    | Prisma.JobLevelUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.JobLevelCreateOrConnectWithoutOrganizationInput
    | Prisma.JobLevelCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.JobLevelUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.JobLevelUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.JobLevelCreateManyOrganizationInputEnvelope
  set?: Prisma.JobLevelWhereUniqueInput | Prisma.JobLevelWhereUniqueInput[]
  disconnect?:
    | Prisma.JobLevelWhereUniqueInput
    | Prisma.JobLevelWhereUniqueInput[]
  delete?: Prisma.JobLevelWhereUniqueInput | Prisma.JobLevelWhereUniqueInput[]
  connect?: Prisma.JobLevelWhereUniqueInput | Prisma.JobLevelWhereUniqueInput[]
  update?:
    | Prisma.JobLevelUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.JobLevelUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.JobLevelUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.JobLevelUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.JobLevelScalarWhereInput
    | Prisma.JobLevelScalarWhereInput[]
}

export type JobLevelCreateNestedOneWithoutJobRolesInput = {
  create?: Prisma.XOR<
    Prisma.JobLevelCreateWithoutJobRolesInput,
    Prisma.JobLevelUncheckedCreateWithoutJobRolesInput
  >
  connectOrCreate?: Prisma.JobLevelCreateOrConnectWithoutJobRolesInput
  connect?: Prisma.JobLevelWhereUniqueInput
}

export type JobLevelUpdateOneRequiredWithoutJobRolesNestedInput = {
  create?: Prisma.XOR<
    Prisma.JobLevelCreateWithoutJobRolesInput,
    Prisma.JobLevelUncheckedCreateWithoutJobRolesInput
  >
  connectOrCreate?: Prisma.JobLevelCreateOrConnectWithoutJobRolesInput
  upsert?: Prisma.JobLevelUpsertWithoutJobRolesInput
  connect?: Prisma.JobLevelWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.JobLevelUpdateToOneWithWhereWithoutJobRolesInput,
      Prisma.JobLevelUpdateWithoutJobRolesInput
    >,
    Prisma.JobLevelUncheckedUpdateWithoutJobRolesInput
  >
}

export type JobLevelCreateWithoutOrganizationInput = {
  id?: string
  name: string
  order?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  jobRoles?: Prisma.JobRoleCreateNestedManyWithoutLevelInput
}

export type JobLevelUncheckedCreateWithoutOrganizationInput = {
  id?: string
  name: string
  order?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  jobRoles?: Prisma.JobRoleUncheckedCreateNestedManyWithoutLevelInput
}

export type JobLevelCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.JobLevelWhereUniqueInput
  create: Prisma.XOR<
    Prisma.JobLevelCreateWithoutOrganizationInput,
    Prisma.JobLevelUncheckedCreateWithoutOrganizationInput
  >
}

export type JobLevelCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.JobLevelCreateManyOrganizationInput
    | Prisma.JobLevelCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type JobLevelUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.JobLevelWhereUniqueInput
  update: Prisma.XOR<
    Prisma.JobLevelUpdateWithoutOrganizationInput,
    Prisma.JobLevelUncheckedUpdateWithoutOrganizationInput
  >
  create: Prisma.XOR<
    Prisma.JobLevelCreateWithoutOrganizationInput,
    Prisma.JobLevelUncheckedCreateWithoutOrganizationInput
  >
}

export type JobLevelUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.JobLevelWhereUniqueInput
  data: Prisma.XOR<
    Prisma.JobLevelUpdateWithoutOrganizationInput,
    Prisma.JobLevelUncheckedUpdateWithoutOrganizationInput
  >
}

export type JobLevelUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.JobLevelScalarWhereInput
  data: Prisma.XOR<
    Prisma.JobLevelUpdateManyMutationInput,
    Prisma.JobLevelUncheckedUpdateManyWithoutOrganizationInput
  >
}

export type JobLevelScalarWhereInput = {
  AND?: Prisma.JobLevelScalarWhereInput | Prisma.JobLevelScalarWhereInput[]
  OR?: Prisma.JobLevelScalarWhereInput[]
  NOT?: Prisma.JobLevelScalarWhereInput | Prisma.JobLevelScalarWhereInput[]
  id?: Prisma.StringFilter<'JobLevel'> | string
  name?: Prisma.StringFilter<'JobLevel'> | string
  order?: Prisma.IntFilter<'JobLevel'> | number
  organizationId?: Prisma.StringFilter<'JobLevel'> | string
  createdAt?: Prisma.DateTimeFilter<'JobLevel'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'JobLevel'> | Date | string
}

export type JobLevelCreateWithoutJobRolesInput = {
  id?: string
  name: string
  order?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutLevelsInput
}

export type JobLevelUncheckedCreateWithoutJobRolesInput = {
  id?: string
  name: string
  order?: number
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type JobLevelCreateOrConnectWithoutJobRolesInput = {
  where: Prisma.JobLevelWhereUniqueInput
  create: Prisma.XOR<
    Prisma.JobLevelCreateWithoutJobRolesInput,
    Prisma.JobLevelUncheckedCreateWithoutJobRolesInput
  >
}

export type JobLevelUpsertWithoutJobRolesInput = {
  update: Prisma.XOR<
    Prisma.JobLevelUpdateWithoutJobRolesInput,
    Prisma.JobLevelUncheckedUpdateWithoutJobRolesInput
  >
  create: Prisma.XOR<
    Prisma.JobLevelCreateWithoutJobRolesInput,
    Prisma.JobLevelUncheckedCreateWithoutJobRolesInput
  >
  where?: Prisma.JobLevelWhereInput
}

export type JobLevelUpdateToOneWithWhereWithoutJobRolesInput = {
  where?: Prisma.JobLevelWhereInput
  data: Prisma.XOR<
    Prisma.JobLevelUpdateWithoutJobRolesInput,
    Prisma.JobLevelUncheckedUpdateWithoutJobRolesInput
  >
}

export type JobLevelUpdateWithoutJobRolesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutLevelsNestedInput
}

export type JobLevelUncheckedUpdateWithoutJobRolesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobLevelCreateManyOrganizationInput = {
  id?: string
  name: string
  order?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type JobLevelUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jobRoles?: Prisma.JobRoleUpdateManyWithoutLevelNestedInput
}

export type JobLevelUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jobRoles?: Prisma.JobRoleUncheckedUpdateManyWithoutLevelNestedInput
}

export type JobLevelUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

/**
 * Count Type JobLevelCountOutputType
 */

export type JobLevelCountOutputType = {
  jobRoles: number
}

export type JobLevelCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  jobRoles?: boolean | JobLevelCountOutputTypeCountJobRolesArgs
}

/**
 * JobLevelCountOutputType without action
 */
export type JobLevelCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevelCountOutputType
   */
  select?: Prisma.JobLevelCountOutputTypeSelect<ExtArgs> | null
}

/**
 * JobLevelCountOutputType without action
 */
export type JobLevelCountOutputTypeCountJobRolesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.JobRoleWhereInput
}

export type JobLevelSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    order?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    jobRoles?: boolean | Prisma.JobLevel$jobRolesArgs<ExtArgs>
    _count?: boolean | Prisma.JobLevelCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['jobLevel']
>

export type JobLevelSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    order?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['jobLevel']
>

export type JobLevelSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    order?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['jobLevel']
>

export type JobLevelSelectScalar = {
  id?: boolean
  name?: boolean
  order?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type JobLevelOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'order' | 'organizationId' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['jobLevel']
>
export type JobLevelInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  jobRoles?: boolean | Prisma.JobLevel$jobRolesArgs<ExtArgs>
  _count?: boolean | Prisma.JobLevelCountOutputTypeDefaultArgs<ExtArgs>
}
export type JobLevelIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type JobLevelIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $JobLevelPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'JobLevel'
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    jobRoles: Prisma.$JobRolePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      name: string
      order: number
      organizationId: string
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['jobLevel']
  >
  composites: {}
}

export type JobLevelGetPayload<
  S extends boolean | null | undefined | JobLevelDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$JobLevelPayload, S>

export type JobLevelCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<JobLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: JobLevelCountAggregateInputType | true
}

export interface JobLevelDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['JobLevel']
    meta: { name: 'JobLevel' }
  }
  /**
   * Find zero or one JobLevel that matches the filter.
   * @param {JobLevelFindUniqueArgs} args - Arguments to find a JobLevel
   * @example
   * // Get one JobLevel
   * const jobLevel = await prisma.jobLevel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends JobLevelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, JobLevelFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__JobLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one JobLevel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {JobLevelFindUniqueOrThrowArgs} args - Arguments to find a JobLevel
   * @example
   * // Get one JobLevel
   * const jobLevel = await prisma.jobLevel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends JobLevelFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, JobLevelFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__JobLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first JobLevel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobLevelFindFirstArgs} args - Arguments to find a JobLevel
   * @example
   * // Get one JobLevel
   * const jobLevel = await prisma.jobLevel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends JobLevelFindFirstArgs>(
    args?: Prisma.SelectSubset<T, JobLevelFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__JobLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first JobLevel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobLevelFindFirstOrThrowArgs} args - Arguments to find a JobLevel
   * @example
   * // Get one JobLevel
   * const jobLevel = await prisma.jobLevel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends JobLevelFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, JobLevelFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__JobLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more JobLevels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobLevelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all JobLevels
   * const jobLevels = await prisma.jobLevel.findMany()
   *
   * // Get first 10 JobLevels
   * const jobLevels = await prisma.jobLevel.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const jobLevelWithIdOnly = await prisma.jobLevel.findMany({ select: { id: true } })
   *
   */
  findMany<T extends JobLevelFindManyArgs>(
    args?: Prisma.SelectSubset<T, JobLevelFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a JobLevel.
   * @param {JobLevelCreateArgs} args - Arguments to create a JobLevel.
   * @example
   * // Create one JobLevel
   * const JobLevel = await prisma.jobLevel.create({
   *   data: {
   *     // ... data to create a JobLevel
   *   }
   * })
   *
   */
  create<T extends JobLevelCreateArgs>(
    args: Prisma.SelectSubset<T, JobLevelCreateArgs<ExtArgs>>
  ): Prisma.Prisma__JobLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many JobLevels.
   * @param {JobLevelCreateManyArgs} args - Arguments to create many JobLevels.
   * @example
   * // Create many JobLevels
   * const jobLevel = await prisma.jobLevel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends JobLevelCreateManyArgs>(
    args?: Prisma.SelectSubset<T, JobLevelCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many JobLevels and returns the data saved in the database.
   * @param {JobLevelCreateManyAndReturnArgs} args - Arguments to create many JobLevels.
   * @example
   * // Create many JobLevels
   * const jobLevel = await prisma.jobLevel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many JobLevels and only return the `id`
   * const jobLevelWithIdOnly = await prisma.jobLevel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends JobLevelCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, JobLevelCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a JobLevel.
   * @param {JobLevelDeleteArgs} args - Arguments to delete one JobLevel.
   * @example
   * // Delete one JobLevel
   * const JobLevel = await prisma.jobLevel.delete({
   *   where: {
   *     // ... filter to delete one JobLevel
   *   }
   * })
   *
   */
  delete<T extends JobLevelDeleteArgs>(
    args: Prisma.SelectSubset<T, JobLevelDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__JobLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one JobLevel.
   * @param {JobLevelUpdateArgs} args - Arguments to update one JobLevel.
   * @example
   * // Update one JobLevel
   * const jobLevel = await prisma.jobLevel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends JobLevelUpdateArgs>(
    args: Prisma.SelectSubset<T, JobLevelUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__JobLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more JobLevels.
   * @param {JobLevelDeleteManyArgs} args - Arguments to filter JobLevels to delete.
   * @example
   * // Delete a few JobLevels
   * const { count } = await prisma.jobLevel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends JobLevelDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, JobLevelDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more JobLevels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobLevelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many JobLevels
   * const jobLevel = await prisma.jobLevel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends JobLevelUpdateManyArgs>(
    args: Prisma.SelectSubset<T, JobLevelUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more JobLevels and returns the data updated in the database.
   * @param {JobLevelUpdateManyAndReturnArgs} args - Arguments to update many JobLevels.
   * @example
   * // Update many JobLevels
   * const jobLevel = await prisma.jobLevel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more JobLevels and only return the `id`
   * const jobLevelWithIdOnly = await prisma.jobLevel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends JobLevelUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, JobLevelUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one JobLevel.
   * @param {JobLevelUpsertArgs} args - Arguments to update or create a JobLevel.
   * @example
   * // Update or create a JobLevel
   * const jobLevel = await prisma.jobLevel.upsert({
   *   create: {
   *     // ... data to create a JobLevel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the JobLevel we want to update
   *   }
   * })
   */
  upsert<T extends JobLevelUpsertArgs>(
    args: Prisma.SelectSubset<T, JobLevelUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__JobLevelClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobLevelPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of JobLevels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobLevelCountArgs} args - Arguments to filter JobLevels to count.
   * @example
   * // Count the number of JobLevels
   * const count = await prisma.jobLevel.count({
   *   where: {
   *     // ... the filter for the JobLevels we want to count
   *   }
   * })
   **/
  count<T extends JobLevelCountArgs>(
    args?: Prisma.Subset<T, JobLevelCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], JobLevelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a JobLevel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends JobLevelAggregateArgs>(
    args: Prisma.Subset<T, JobLevelAggregateArgs>
  ): Prisma.PrismaPromise<GetJobLevelAggregateType<T>>

  /**
   * Group by JobLevel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobLevelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends JobLevelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: JobLevelGroupByArgs['orderBy'] }
      : { orderBy?: JobLevelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, JobLevelGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetJobLevelGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobLevel model
   */
  readonly fields: JobLevelFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for JobLevel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__JobLevelClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrganizationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  jobRoles<T extends Prisma.JobLevel$jobRolesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.JobLevel$jobRolesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$JobRolePayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the JobLevel model
 */
export interface JobLevelFieldRefs {
  readonly id: Prisma.FieldRef<'JobLevel', 'String'>
  readonly name: Prisma.FieldRef<'JobLevel', 'String'>
  readonly order: Prisma.FieldRef<'JobLevel', 'Int'>
  readonly organizationId: Prisma.FieldRef<'JobLevel', 'String'>
  readonly createdAt: Prisma.FieldRef<'JobLevel', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'JobLevel', 'DateTime'>
}

// Custom InputTypes
/**
 * JobLevel findUnique
 */
export type JobLevelFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * Filter, which JobLevel to fetch.
   */
  where: Prisma.JobLevelWhereUniqueInput
}

/**
 * JobLevel findUniqueOrThrow
 */
export type JobLevelFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * Filter, which JobLevel to fetch.
   */
  where: Prisma.JobLevelWhereUniqueInput
}

/**
 * JobLevel findFirst
 */
export type JobLevelFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * Filter, which JobLevel to fetch.
   */
  where?: Prisma.JobLevelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of JobLevels to fetch.
   */
  orderBy?:
    | Prisma.JobLevelOrderByWithRelationInput
    | Prisma.JobLevelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for JobLevels.
   */
  cursor?: Prisma.JobLevelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` JobLevels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` JobLevels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of JobLevels.
   */
  distinct?: Prisma.JobLevelScalarFieldEnum | Prisma.JobLevelScalarFieldEnum[]
}

/**
 * JobLevel findFirstOrThrow
 */
export type JobLevelFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * Filter, which JobLevel to fetch.
   */
  where?: Prisma.JobLevelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of JobLevels to fetch.
   */
  orderBy?:
    | Prisma.JobLevelOrderByWithRelationInput
    | Prisma.JobLevelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for JobLevels.
   */
  cursor?: Prisma.JobLevelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` JobLevels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` JobLevels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of JobLevels.
   */
  distinct?: Prisma.JobLevelScalarFieldEnum | Prisma.JobLevelScalarFieldEnum[]
}

/**
 * JobLevel findMany
 */
export type JobLevelFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * Filter, which JobLevels to fetch.
   */
  where?: Prisma.JobLevelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of JobLevels to fetch.
   */
  orderBy?:
    | Prisma.JobLevelOrderByWithRelationInput
    | Prisma.JobLevelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing JobLevels.
   */
  cursor?: Prisma.JobLevelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` JobLevels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` JobLevels.
   */
  skip?: number
  distinct?: Prisma.JobLevelScalarFieldEnum | Prisma.JobLevelScalarFieldEnum[]
}

/**
 * JobLevel create
 */
export type JobLevelCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * The data needed to create a JobLevel.
   */
  data: Prisma.XOR<
    Prisma.JobLevelCreateInput,
    Prisma.JobLevelUncheckedCreateInput
  >
}

/**
 * JobLevel createMany
 */
export type JobLevelCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many JobLevels.
   */
  data: Prisma.JobLevelCreateManyInput | Prisma.JobLevelCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * JobLevel createManyAndReturn
 */
export type JobLevelCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * The data used to create many JobLevels.
   */
  data: Prisma.JobLevelCreateManyInput | Prisma.JobLevelCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * JobLevel update
 */
export type JobLevelUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * The data needed to update a JobLevel.
   */
  data: Prisma.XOR<
    Prisma.JobLevelUpdateInput,
    Prisma.JobLevelUncheckedUpdateInput
  >
  /**
   * Choose, which JobLevel to update.
   */
  where: Prisma.JobLevelWhereUniqueInput
}

/**
 * JobLevel updateMany
 */
export type JobLevelUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update JobLevels.
   */
  data: Prisma.XOR<
    Prisma.JobLevelUpdateManyMutationInput,
    Prisma.JobLevelUncheckedUpdateManyInput
  >
  /**
   * Filter which JobLevels to update
   */
  where?: Prisma.JobLevelWhereInput
  /**
   * Limit how many JobLevels to update.
   */
  limit?: number
}

/**
 * JobLevel updateManyAndReturn
 */
export type JobLevelUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * The data used to update JobLevels.
   */
  data: Prisma.XOR<
    Prisma.JobLevelUpdateManyMutationInput,
    Prisma.JobLevelUncheckedUpdateManyInput
  >
  /**
   * Filter which JobLevels to update
   */
  where?: Prisma.JobLevelWhereInput
  /**
   * Limit how many JobLevels to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * JobLevel upsert
 */
export type JobLevelUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * The filter to search for the JobLevel to update in case it exists.
   */
  where: Prisma.JobLevelWhereUniqueInput
  /**
   * In case the JobLevel found by the `where` argument doesn't exist, create a new JobLevel with this data.
   */
  create: Prisma.XOR<
    Prisma.JobLevelCreateInput,
    Prisma.JobLevelUncheckedCreateInput
  >
  /**
   * In case the JobLevel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.JobLevelUpdateInput,
    Prisma.JobLevelUncheckedUpdateInput
  >
}

/**
 * JobLevel delete
 */
export type JobLevelDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
  /**
   * Filter which JobLevel to delete.
   */
  where: Prisma.JobLevelWhereUniqueInput
}

/**
 * JobLevel deleteMany
 */
export type JobLevelDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which JobLevels to delete
   */
  where?: Prisma.JobLevelWhereInput
  /**
   * Limit how many JobLevels to delete.
   */
  limit?: number
}

/**
 * JobLevel.jobRoles
 */
export type JobLevel$jobRolesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobRole
   */
  select?: Prisma.JobRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobRole
   */
  omit?: Prisma.JobRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobRoleInclude<ExtArgs> | null
  where?: Prisma.JobRoleWhereInput
  orderBy?:
    | Prisma.JobRoleOrderByWithRelationInput
    | Prisma.JobRoleOrderByWithRelationInput[]
  cursor?: Prisma.JobRoleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.JobRoleScalarFieldEnum | Prisma.JobRoleScalarFieldEnum[]
}

/**
 * JobLevel without action
 */
export type JobLevelDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobLevel
   */
  select?: Prisma.JobLevelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobLevel
   */
  omit?: Prisma.JobLevelOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobLevelInclude<ExtArgs> | null
}
