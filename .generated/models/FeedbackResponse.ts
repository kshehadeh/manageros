/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `FeedbackResponse` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model FeedbackResponse
 *
 */
export type FeedbackResponseModel =
  runtime.Types.Result.DefaultSelection<Prisma.$FeedbackResponsePayload>

export type AggregateFeedbackResponse = {
  _count: FeedbackResponseCountAggregateOutputType | null
  _min: FeedbackResponseMinAggregateOutputType | null
  _max: FeedbackResponseMaxAggregateOutputType | null
}

export type FeedbackResponseMinAggregateOutputType = {
  id: string | null
  campaignId: string | null
  responderEmail: string | null
  submittedAt: Date | null
}

export type FeedbackResponseMaxAggregateOutputType = {
  id: string | null
  campaignId: string | null
  responderEmail: string | null
  submittedAt: Date | null
}

export type FeedbackResponseCountAggregateOutputType = {
  id: number
  campaignId: number
  responderEmail: number
  responses: number
  submittedAt: number
  _all: number
}

export type FeedbackResponseMinAggregateInputType = {
  id?: true
  campaignId?: true
  responderEmail?: true
  submittedAt?: true
}

export type FeedbackResponseMaxAggregateInputType = {
  id?: true
  campaignId?: true
  responderEmail?: true
  submittedAt?: true
}

export type FeedbackResponseCountAggregateInputType = {
  id?: true
  campaignId?: true
  responderEmail?: true
  responses?: true
  submittedAt?: true
  _all?: true
}

export type FeedbackResponseAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FeedbackResponse to aggregate.
   */
  where?: Prisma.FeedbackResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackResponses to fetch.
   */
  orderBy?:
    | Prisma.FeedbackResponseOrderByWithRelationInput
    | Prisma.FeedbackResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FeedbackResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned FeedbackResponses
   **/
  _count?: true | FeedbackResponseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FeedbackResponseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FeedbackResponseMaxAggregateInputType
}

export type GetFeedbackResponseAggregateType<
  T extends FeedbackResponseAggregateArgs,
> = {
  [P in keyof T & keyof AggregateFeedbackResponse]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeedbackResponse[P]>
    : Prisma.GetScalarType<T[P], AggregateFeedbackResponse[P]>
}

export type FeedbackResponseGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeedbackResponseWhereInput
  orderBy?:
    | Prisma.FeedbackResponseOrderByWithAggregationInput
    | Prisma.FeedbackResponseOrderByWithAggregationInput[]
  by:
    | Prisma.FeedbackResponseScalarFieldEnum[]
    | Prisma.FeedbackResponseScalarFieldEnum
  having?: Prisma.FeedbackResponseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeedbackResponseCountAggregateInputType | true
  _min?: FeedbackResponseMinAggregateInputType
  _max?: FeedbackResponseMaxAggregateInputType
}

export type FeedbackResponseGroupByOutputType = {
  id: string
  campaignId: string
  responderEmail: string
  responses: runtime.JsonValue
  submittedAt: Date
  _count: FeedbackResponseCountAggregateOutputType | null
  _min: FeedbackResponseMinAggregateOutputType | null
  _max: FeedbackResponseMaxAggregateOutputType | null
}

type GetFeedbackResponseGroupByPayload<T extends FeedbackResponseGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<FeedbackResponseGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof FeedbackResponseGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeedbackResponseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeedbackResponseGroupByOutputType[P]>
      }
    >
  >

export type FeedbackResponseWhereInput = {
  AND?: Prisma.FeedbackResponseWhereInput | Prisma.FeedbackResponseWhereInput[]
  OR?: Prisma.FeedbackResponseWhereInput[]
  NOT?: Prisma.FeedbackResponseWhereInput | Prisma.FeedbackResponseWhereInput[]
  id?: Prisma.StringFilter<'FeedbackResponse'> | string
  campaignId?: Prisma.StringFilter<'FeedbackResponse'> | string
  responderEmail?: Prisma.StringFilter<'FeedbackResponse'> | string
  responses?: Prisma.JsonFilter<'FeedbackResponse'>
  submittedAt?: Prisma.DateTimeFilter<'FeedbackResponse'> | Date | string
  campaign?: Prisma.XOR<
    Prisma.FeedbackCampaignScalarRelationFilter,
    Prisma.FeedbackCampaignWhereInput
  >
}

export type FeedbackResponseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  campaignId?: Prisma.SortOrder
  responderEmail?: Prisma.SortOrder
  responses?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  campaign?: Prisma.FeedbackCampaignOrderByWithRelationInput
}

export type FeedbackResponseWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    campaignId_responderEmail?: Prisma.FeedbackResponseCampaignIdResponderEmailCompoundUniqueInput
    AND?:
      | Prisma.FeedbackResponseWhereInput
      | Prisma.FeedbackResponseWhereInput[]
    OR?: Prisma.FeedbackResponseWhereInput[]
    NOT?:
      | Prisma.FeedbackResponseWhereInput
      | Prisma.FeedbackResponseWhereInput[]
    campaignId?: Prisma.StringFilter<'FeedbackResponse'> | string
    responderEmail?: Prisma.StringFilter<'FeedbackResponse'> | string
    responses?: Prisma.JsonFilter<'FeedbackResponse'>
    submittedAt?: Prisma.DateTimeFilter<'FeedbackResponse'> | Date | string
    campaign?: Prisma.XOR<
      Prisma.FeedbackCampaignScalarRelationFilter,
      Prisma.FeedbackCampaignWhereInput
    >
  },
  'id' | 'campaignId_responderEmail'
>

export type FeedbackResponseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  campaignId?: Prisma.SortOrder
  responderEmail?: Prisma.SortOrder
  responses?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  _count?: Prisma.FeedbackResponseCountOrderByAggregateInput
  _max?: Prisma.FeedbackResponseMaxOrderByAggregateInput
  _min?: Prisma.FeedbackResponseMinOrderByAggregateInput
}

export type FeedbackResponseScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FeedbackResponseScalarWhereWithAggregatesInput
    | Prisma.FeedbackResponseScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeedbackResponseScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.FeedbackResponseScalarWhereWithAggregatesInput
    | Prisma.FeedbackResponseScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'FeedbackResponse'> | string
  campaignId?: Prisma.StringWithAggregatesFilter<'FeedbackResponse'> | string
  responderEmail?:
    | Prisma.StringWithAggregatesFilter<'FeedbackResponse'>
    | string
  responses?: Prisma.JsonWithAggregatesFilter<'FeedbackResponse'>
  submittedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackResponse'>
    | Date
    | string
}

export type FeedbackResponseCreateInput = {
  id?: string
  responderEmail: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Date | string
  campaign: Prisma.FeedbackCampaignCreateNestedOneWithoutResponsesInput
}

export type FeedbackResponseUncheckedCreateInput = {
  id?: string
  campaignId: string
  responderEmail: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Date | string
}

export type FeedbackResponseUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responderEmail?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  campaign?: Prisma.FeedbackCampaignUpdateOneRequiredWithoutResponsesNestedInput
}

export type FeedbackResponseUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  campaignId?: Prisma.StringFieldUpdateOperationsInput | string
  responderEmail?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackResponseCreateManyInput = {
  id?: string
  campaignId: string
  responderEmail: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Date | string
}

export type FeedbackResponseUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responderEmail?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackResponseUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  campaignId?: Prisma.StringFieldUpdateOperationsInput | string
  responderEmail?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackResponseListRelationFilter = {
  every?: Prisma.FeedbackResponseWhereInput
  some?: Prisma.FeedbackResponseWhereInput
  none?: Prisma.FeedbackResponseWhereInput
}

export type FeedbackResponseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FeedbackResponseCampaignIdResponderEmailCompoundUniqueInput = {
  campaignId: string
  responderEmail: string
}

export type FeedbackResponseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  campaignId?: Prisma.SortOrder
  responderEmail?: Prisma.SortOrder
  responses?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
}

export type FeedbackResponseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  campaignId?: Prisma.SortOrder
  responderEmail?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
}

export type FeedbackResponseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  campaignId?: Prisma.SortOrder
  responderEmail?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
}

export type FeedbackResponseCreateNestedManyWithoutCampaignInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackResponseCreateWithoutCampaignInput,
        Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput
      >
    | Prisma.FeedbackResponseCreateWithoutCampaignInput[]
    | Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput[]
  connectOrCreate?:
    | Prisma.FeedbackResponseCreateOrConnectWithoutCampaignInput
    | Prisma.FeedbackResponseCreateOrConnectWithoutCampaignInput[]
  createMany?: Prisma.FeedbackResponseCreateManyCampaignInputEnvelope
  connect?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
}

export type FeedbackResponseUncheckedCreateNestedManyWithoutCampaignInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackResponseCreateWithoutCampaignInput,
        Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput
      >
    | Prisma.FeedbackResponseCreateWithoutCampaignInput[]
    | Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput[]
  connectOrCreate?:
    | Prisma.FeedbackResponseCreateOrConnectWithoutCampaignInput
    | Prisma.FeedbackResponseCreateOrConnectWithoutCampaignInput[]
  createMany?: Prisma.FeedbackResponseCreateManyCampaignInputEnvelope
  connect?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
}

export type FeedbackResponseUpdateManyWithoutCampaignNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackResponseCreateWithoutCampaignInput,
        Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput
      >
    | Prisma.FeedbackResponseCreateWithoutCampaignInput[]
    | Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput[]
  connectOrCreate?:
    | Prisma.FeedbackResponseCreateOrConnectWithoutCampaignInput
    | Prisma.FeedbackResponseCreateOrConnectWithoutCampaignInput[]
  upsert?:
    | Prisma.FeedbackResponseUpsertWithWhereUniqueWithoutCampaignInput
    | Prisma.FeedbackResponseUpsertWithWhereUniqueWithoutCampaignInput[]
  createMany?: Prisma.FeedbackResponseCreateManyCampaignInputEnvelope
  set?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
  update?:
    | Prisma.FeedbackResponseUpdateWithWhereUniqueWithoutCampaignInput
    | Prisma.FeedbackResponseUpdateWithWhereUniqueWithoutCampaignInput[]
  updateMany?:
    | Prisma.FeedbackResponseUpdateManyWithWhereWithoutCampaignInput
    | Prisma.FeedbackResponseUpdateManyWithWhereWithoutCampaignInput[]
  deleteMany?:
    | Prisma.FeedbackResponseScalarWhereInput
    | Prisma.FeedbackResponseScalarWhereInput[]
}

export type FeedbackResponseUncheckedUpdateManyWithoutCampaignNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackResponseCreateWithoutCampaignInput,
        Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput
      >
    | Prisma.FeedbackResponseCreateWithoutCampaignInput[]
    | Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput[]
  connectOrCreate?:
    | Prisma.FeedbackResponseCreateOrConnectWithoutCampaignInput
    | Prisma.FeedbackResponseCreateOrConnectWithoutCampaignInput[]
  upsert?:
    | Prisma.FeedbackResponseUpsertWithWhereUniqueWithoutCampaignInput
    | Prisma.FeedbackResponseUpsertWithWhereUniqueWithoutCampaignInput[]
  createMany?: Prisma.FeedbackResponseCreateManyCampaignInputEnvelope
  set?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackResponseWhereUniqueInput
    | Prisma.FeedbackResponseWhereUniqueInput[]
  update?:
    | Prisma.FeedbackResponseUpdateWithWhereUniqueWithoutCampaignInput
    | Prisma.FeedbackResponseUpdateWithWhereUniqueWithoutCampaignInput[]
  updateMany?:
    | Prisma.FeedbackResponseUpdateManyWithWhereWithoutCampaignInput
    | Prisma.FeedbackResponseUpdateManyWithWhereWithoutCampaignInput[]
  deleteMany?:
    | Prisma.FeedbackResponseScalarWhereInput
    | Prisma.FeedbackResponseScalarWhereInput[]
}

export type FeedbackResponseCreateWithoutCampaignInput = {
  id?: string
  responderEmail: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Date | string
}

export type FeedbackResponseUncheckedCreateWithoutCampaignInput = {
  id?: string
  responderEmail: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Date | string
}

export type FeedbackResponseCreateOrConnectWithoutCampaignInput = {
  where: Prisma.FeedbackResponseWhereUniqueInput
  create: Prisma.XOR<
    Prisma.FeedbackResponseCreateWithoutCampaignInput,
    Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput
  >
}

export type FeedbackResponseCreateManyCampaignInputEnvelope = {
  data:
    | Prisma.FeedbackResponseCreateManyCampaignInput
    | Prisma.FeedbackResponseCreateManyCampaignInput[]
  skipDuplicates?: boolean
}

export type FeedbackResponseUpsertWithWhereUniqueWithoutCampaignInput = {
  where: Prisma.FeedbackResponseWhereUniqueInput
  update: Prisma.XOR<
    Prisma.FeedbackResponseUpdateWithoutCampaignInput,
    Prisma.FeedbackResponseUncheckedUpdateWithoutCampaignInput
  >
  create: Prisma.XOR<
    Prisma.FeedbackResponseCreateWithoutCampaignInput,
    Prisma.FeedbackResponseUncheckedCreateWithoutCampaignInput
  >
}

export type FeedbackResponseUpdateWithWhereUniqueWithoutCampaignInput = {
  where: Prisma.FeedbackResponseWhereUniqueInput
  data: Prisma.XOR<
    Prisma.FeedbackResponseUpdateWithoutCampaignInput,
    Prisma.FeedbackResponseUncheckedUpdateWithoutCampaignInput
  >
}

export type FeedbackResponseUpdateManyWithWhereWithoutCampaignInput = {
  where: Prisma.FeedbackResponseScalarWhereInput
  data: Prisma.XOR<
    Prisma.FeedbackResponseUpdateManyMutationInput,
    Prisma.FeedbackResponseUncheckedUpdateManyWithoutCampaignInput
  >
}

export type FeedbackResponseScalarWhereInput = {
  AND?:
    | Prisma.FeedbackResponseScalarWhereInput
    | Prisma.FeedbackResponseScalarWhereInput[]
  OR?: Prisma.FeedbackResponseScalarWhereInput[]
  NOT?:
    | Prisma.FeedbackResponseScalarWhereInput
    | Prisma.FeedbackResponseScalarWhereInput[]
  id?: Prisma.StringFilter<'FeedbackResponse'> | string
  campaignId?: Prisma.StringFilter<'FeedbackResponse'> | string
  responderEmail?: Prisma.StringFilter<'FeedbackResponse'> | string
  responses?: Prisma.JsonFilter<'FeedbackResponse'>
  submittedAt?: Prisma.DateTimeFilter<'FeedbackResponse'> | Date | string
}

export type FeedbackResponseCreateManyCampaignInput = {
  id?: string
  responderEmail: string
  responses: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Date | string
}

export type FeedbackResponseUpdateWithoutCampaignInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responderEmail?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackResponseUncheckedUpdateWithoutCampaignInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responderEmail?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackResponseUncheckedUpdateManyWithoutCampaignInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  responderEmail?: Prisma.StringFieldUpdateOperationsInput | string
  responses?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackResponseSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    campaignId?: boolean
    responderEmail?: boolean
    responses?: boolean
    submittedAt?: boolean
    campaign?: boolean | Prisma.FeedbackCampaignDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackResponse']
>

export type FeedbackResponseSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    campaignId?: boolean
    responderEmail?: boolean
    responses?: boolean
    submittedAt?: boolean
    campaign?: boolean | Prisma.FeedbackCampaignDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackResponse']
>

export type FeedbackResponseSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    campaignId?: boolean
    responderEmail?: boolean
    responses?: boolean
    submittedAt?: boolean
    campaign?: boolean | Prisma.FeedbackCampaignDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackResponse']
>

export type FeedbackResponseSelectScalar = {
  id?: boolean
  campaignId?: boolean
  responderEmail?: boolean
  responses?: boolean
  submittedAt?: boolean
}

export type FeedbackResponseOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'campaignId' | 'responderEmail' | 'responses' | 'submittedAt',
  ExtArgs['result']['feedbackResponse']
>
export type FeedbackResponseInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  campaign?: boolean | Prisma.FeedbackCampaignDefaultArgs<ExtArgs>
}
export type FeedbackResponseIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  campaign?: boolean | Prisma.FeedbackCampaignDefaultArgs<ExtArgs>
}
export type FeedbackResponseIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  campaign?: boolean | Prisma.FeedbackCampaignDefaultArgs<ExtArgs>
}

export type $FeedbackResponsePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'FeedbackResponse'
  objects: {
    campaign: Prisma.$FeedbackCampaignPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      campaignId: string
      responderEmail: string
      responses: runtime.JsonValue
      submittedAt: Date
    },
    ExtArgs['result']['feedbackResponse']
  >
  composites: {}
}

export type FeedbackResponseGetPayload<
  S extends boolean | null | undefined | FeedbackResponseDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$FeedbackResponsePayload, S>

export type FeedbackResponseCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  FeedbackResponseFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: FeedbackResponseCountAggregateInputType | true
}

export interface FeedbackResponseDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['FeedbackResponse']
    meta: { name: 'FeedbackResponse' }
  }
  /**
   * Find zero or one FeedbackResponse that matches the filter.
   * @param {FeedbackResponseFindUniqueArgs} args - Arguments to find a FeedbackResponse
   * @example
   * // Get one FeedbackResponse
   * const feedbackResponse = await prisma.feedbackResponse.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeedbackResponseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FeedbackResponseFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one FeedbackResponse that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeedbackResponseFindUniqueOrThrowArgs} args - Arguments to find a FeedbackResponse
   * @example
   * // Get one FeedbackResponse
   * const feedbackResponse = await prisma.feedbackResponse.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeedbackResponseFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FeedbackResponseFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first FeedbackResponse that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackResponseFindFirstArgs} args - Arguments to find a FeedbackResponse
   * @example
   * // Get one FeedbackResponse
   * const feedbackResponse = await prisma.feedbackResponse.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeedbackResponseFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FeedbackResponseFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first FeedbackResponse that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackResponseFindFirstOrThrowArgs} args - Arguments to find a FeedbackResponse
   * @example
   * // Get one FeedbackResponse
   * const feedbackResponse = await prisma.feedbackResponse.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeedbackResponseFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FeedbackResponseFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more FeedbackResponses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackResponseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeedbackResponses
   * const feedbackResponses = await prisma.feedbackResponse.findMany()
   *
   * // Get first 10 FeedbackResponses
   * const feedbackResponses = await prisma.feedbackResponse.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const feedbackResponseWithIdOnly = await prisma.feedbackResponse.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FeedbackResponseFindManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackResponseFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a FeedbackResponse.
   * @param {FeedbackResponseCreateArgs} args - Arguments to create a FeedbackResponse.
   * @example
   * // Create one FeedbackResponse
   * const FeedbackResponse = await prisma.feedbackResponse.create({
   *   data: {
   *     // ... data to create a FeedbackResponse
   *   }
   * })
   *
   */
  create<T extends FeedbackResponseCreateArgs>(
    args: Prisma.SelectSubset<T, FeedbackResponseCreateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many FeedbackResponses.
   * @param {FeedbackResponseCreateManyArgs} args - Arguments to create many FeedbackResponses.
   * @example
   * // Create many FeedbackResponses
   * const feedbackResponse = await prisma.feedbackResponse.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FeedbackResponseCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackResponseCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeedbackResponses and returns the data saved in the database.
   * @param {FeedbackResponseCreateManyAndReturnArgs} args - Arguments to create many FeedbackResponses.
   * @example
   * // Create many FeedbackResponses
   * const feedbackResponse = await prisma.feedbackResponse.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many FeedbackResponses and only return the `id`
   * const feedbackResponseWithIdOnly = await prisma.feedbackResponse.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FeedbackResponseCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      FeedbackResponseCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a FeedbackResponse.
   * @param {FeedbackResponseDeleteArgs} args - Arguments to delete one FeedbackResponse.
   * @example
   * // Delete one FeedbackResponse
   * const FeedbackResponse = await prisma.feedbackResponse.delete({
   *   where: {
   *     // ... filter to delete one FeedbackResponse
   *   }
   * })
   *
   */
  delete<T extends FeedbackResponseDeleteArgs>(
    args: Prisma.SelectSubset<T, FeedbackResponseDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one FeedbackResponse.
   * @param {FeedbackResponseUpdateArgs} args - Arguments to update one FeedbackResponse.
   * @example
   * // Update one FeedbackResponse
   * const feedbackResponse = await prisma.feedbackResponse.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FeedbackResponseUpdateArgs>(
    args: Prisma.SelectSubset<T, FeedbackResponseUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more FeedbackResponses.
   * @param {FeedbackResponseDeleteManyArgs} args - Arguments to filter FeedbackResponses to delete.
   * @example
   * // Delete a few FeedbackResponses
   * const { count } = await prisma.feedbackResponse.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FeedbackResponseDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackResponseDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackResponses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackResponseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeedbackResponses
   * const feedbackResponse = await prisma.feedbackResponse.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FeedbackResponseUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FeedbackResponseUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackResponses and returns the data updated in the database.
   * @param {FeedbackResponseUpdateManyAndReturnArgs} args - Arguments to update many FeedbackResponses.
   * @example
   * // Update many FeedbackResponses
   * const feedbackResponse = await prisma.feedbackResponse.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more FeedbackResponses and only return the `id`
   * const feedbackResponseWithIdOnly = await prisma.feedbackResponse.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FeedbackResponseUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      FeedbackResponseUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one FeedbackResponse.
   * @param {FeedbackResponseUpsertArgs} args - Arguments to update or create a FeedbackResponse.
   * @example
   * // Update or create a FeedbackResponse
   * const feedbackResponse = await prisma.feedbackResponse.upsert({
   *   create: {
   *     // ... data to create a FeedbackResponse
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeedbackResponse we want to update
   *   }
   * })
   */
  upsert<T extends FeedbackResponseUpsertArgs>(
    args: Prisma.SelectSubset<T, FeedbackResponseUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackResponseClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackResponsePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of FeedbackResponses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackResponseCountArgs} args - Arguments to filter FeedbackResponses to count.
   * @example
   * // Count the number of FeedbackResponses
   * const count = await prisma.feedbackResponse.count({
   *   where: {
   *     // ... the filter for the FeedbackResponses we want to count
   *   }
   * })
   **/
  count<T extends FeedbackResponseCountArgs>(
    args?: Prisma.Subset<T, FeedbackResponseCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            FeedbackResponseCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeedbackResponse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FeedbackResponseAggregateArgs>(
    args: Prisma.Subset<T, FeedbackResponseAggregateArgs>
  ): Prisma.PrismaPromise<GetFeedbackResponseAggregateType<T>>

  /**
   * Group by FeedbackResponse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackResponseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FeedbackResponseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeedbackResponseGroupByArgs['orderBy'] }
      : { orderBy?: FeedbackResponseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      FeedbackResponseGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetFeedbackResponseGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackResponse model
   */
  readonly fields: FeedbackResponseFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for FeedbackResponse.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeedbackResponseClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  campaign<T extends Prisma.FeedbackCampaignDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeedbackCampaignDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    | runtime.Types.Result.GetResult<
        Prisma.$FeedbackCampaignPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the FeedbackResponse model
 */
export interface FeedbackResponseFieldRefs {
  readonly id: Prisma.FieldRef<'FeedbackResponse', 'String'>
  readonly campaignId: Prisma.FieldRef<'FeedbackResponse', 'String'>
  readonly responderEmail: Prisma.FieldRef<'FeedbackResponse', 'String'>
  readonly responses: Prisma.FieldRef<'FeedbackResponse', 'Json'>
  readonly submittedAt: Prisma.FieldRef<'FeedbackResponse', 'DateTime'>
}

// Custom InputTypes
/**
 * FeedbackResponse findUnique
 */
export type FeedbackResponseFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackResponse to fetch.
   */
  where: Prisma.FeedbackResponseWhereUniqueInput
}

/**
 * FeedbackResponse findUniqueOrThrow
 */
export type FeedbackResponseFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackResponse to fetch.
   */
  where: Prisma.FeedbackResponseWhereUniqueInput
}

/**
 * FeedbackResponse findFirst
 */
export type FeedbackResponseFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackResponse to fetch.
   */
  where?: Prisma.FeedbackResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackResponses to fetch.
   */
  orderBy?:
    | Prisma.FeedbackResponseOrderByWithRelationInput
    | Prisma.FeedbackResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FeedbackResponses.
   */
  cursor?: Prisma.FeedbackResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FeedbackResponses.
   */
  distinct?:
    | Prisma.FeedbackResponseScalarFieldEnum
    | Prisma.FeedbackResponseScalarFieldEnum[]
}

/**
 * FeedbackResponse findFirstOrThrow
 */
export type FeedbackResponseFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackResponse to fetch.
   */
  where?: Prisma.FeedbackResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackResponses to fetch.
   */
  orderBy?:
    | Prisma.FeedbackResponseOrderByWithRelationInput
    | Prisma.FeedbackResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FeedbackResponses.
   */
  cursor?: Prisma.FeedbackResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FeedbackResponses.
   */
  distinct?:
    | Prisma.FeedbackResponseScalarFieldEnum
    | Prisma.FeedbackResponseScalarFieldEnum[]
}

/**
 * FeedbackResponse findMany
 */
export type FeedbackResponseFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackResponses to fetch.
   */
  where?: Prisma.FeedbackResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackResponses to fetch.
   */
  orderBy?:
    | Prisma.FeedbackResponseOrderByWithRelationInput
    | Prisma.FeedbackResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing FeedbackResponses.
   */
  cursor?: Prisma.FeedbackResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackResponses.
   */
  skip?: number
  distinct?:
    | Prisma.FeedbackResponseScalarFieldEnum
    | Prisma.FeedbackResponseScalarFieldEnum[]
}

/**
 * FeedbackResponse create
 */
export type FeedbackResponseCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * The data needed to create a FeedbackResponse.
   */
  data: Prisma.XOR<
    Prisma.FeedbackResponseCreateInput,
    Prisma.FeedbackResponseUncheckedCreateInput
  >
}

/**
 * FeedbackResponse createMany
 */
export type FeedbackResponseCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many FeedbackResponses.
   */
  data:
    | Prisma.FeedbackResponseCreateManyInput
    | Prisma.FeedbackResponseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeedbackResponse createManyAndReturn
 */
export type FeedbackResponseCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * The data used to create many FeedbackResponses.
   */
  data:
    | Prisma.FeedbackResponseCreateManyInput
    | Prisma.FeedbackResponseCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackResponse update
 */
export type FeedbackResponseUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * The data needed to update a FeedbackResponse.
   */
  data: Prisma.XOR<
    Prisma.FeedbackResponseUpdateInput,
    Prisma.FeedbackResponseUncheckedUpdateInput
  >
  /**
   * Choose, which FeedbackResponse to update.
   */
  where: Prisma.FeedbackResponseWhereUniqueInput
}

/**
 * FeedbackResponse updateMany
 */
export type FeedbackResponseUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update FeedbackResponses.
   */
  data: Prisma.XOR<
    Prisma.FeedbackResponseUpdateManyMutationInput,
    Prisma.FeedbackResponseUncheckedUpdateManyInput
  >
  /**
   * Filter which FeedbackResponses to update
   */
  where?: Prisma.FeedbackResponseWhereInput
  /**
   * Limit how many FeedbackResponses to update.
   */
  limit?: number
}

/**
 * FeedbackResponse updateManyAndReturn
 */
export type FeedbackResponseUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * The data used to update FeedbackResponses.
   */
  data: Prisma.XOR<
    Prisma.FeedbackResponseUpdateManyMutationInput,
    Prisma.FeedbackResponseUncheckedUpdateManyInput
  >
  /**
   * Filter which FeedbackResponses to update
   */
  where?: Prisma.FeedbackResponseWhereInput
  /**
   * Limit how many FeedbackResponses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackResponse upsert
 */
export type FeedbackResponseUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * The filter to search for the FeedbackResponse to update in case it exists.
   */
  where: Prisma.FeedbackResponseWhereUniqueInput
  /**
   * In case the FeedbackResponse found by the `where` argument doesn't exist, create a new FeedbackResponse with this data.
   */
  create: Prisma.XOR<
    Prisma.FeedbackResponseCreateInput,
    Prisma.FeedbackResponseUncheckedCreateInput
  >
  /**
   * In case the FeedbackResponse was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.FeedbackResponseUpdateInput,
    Prisma.FeedbackResponseUncheckedUpdateInput
  >
}

/**
 * FeedbackResponse delete
 */
export type FeedbackResponseDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  /**
   * Filter which FeedbackResponse to delete.
   */
  where: Prisma.FeedbackResponseWhereUniqueInput
}

/**
 * FeedbackResponse deleteMany
 */
export type FeedbackResponseDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FeedbackResponses to delete
   */
  where?: Prisma.FeedbackResponseWhereInput
  /**
   * Limit how many FeedbackResponses to delete.
   */
  limit?: number
}

/**
 * FeedbackResponse without action
 */
export type FeedbackResponseDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
}
