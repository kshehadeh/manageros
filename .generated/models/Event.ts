/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Event` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model Event
 *
 */
export type EventModel =
  runtime.Types.Result.DefaultSelection<Prisma.$EventPayload>

export type AggregateEvent = {
  _count: EventCountAggregateOutputType | null
  _min: EventMinAggregateOutputType | null
  _max: EventMaxAggregateOutputType | null
}

export type EventMinAggregateOutputType = {
  id: string | null
  actorId: string | null
  entity: string | null
  entityId: string | null
  action: string | null
  metadata: string | null
  createdAt: Date | null
}

export type EventMaxAggregateOutputType = {
  id: string | null
  actorId: string | null
  entity: string | null
  entityId: string | null
  action: string | null
  metadata: string | null
  createdAt: Date | null
}

export type EventCountAggregateOutputType = {
  id: number
  actorId: number
  entity: number
  entityId: number
  action: number
  metadata: number
  createdAt: number
  _all: number
}

export type EventMinAggregateInputType = {
  id?: true
  actorId?: true
  entity?: true
  entityId?: true
  action?: true
  metadata?: true
  createdAt?: true
}

export type EventMaxAggregateInputType = {
  id?: true
  actorId?: true
  entity?: true
  entityId?: true
  action?: true
  metadata?: true
  createdAt?: true
}

export type EventCountAggregateInputType = {
  id?: true
  actorId?: true
  entity?: true
  entityId?: true
  action?: true
  metadata?: true
  createdAt?: true
  _all?: true
}

export type EventAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Event to aggregate.
   */
  where?: Prisma.EventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Events to fetch.
   */
  orderBy?:
    | Prisma.EventOrderByWithRelationInput
    | Prisma.EventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.EventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Events
   **/
  _count?: true | EventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: EventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: EventMaxAggregateInputType
}

export type GetEventAggregateType<T extends EventAggregateArgs> = {
  [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateEvent[P]>
}

export type EventGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.EventWhereInput
  orderBy?:
    | Prisma.EventOrderByWithAggregationInput
    | Prisma.EventOrderByWithAggregationInput[]
  by: Prisma.EventScalarFieldEnum[] | Prisma.EventScalarFieldEnum
  having?: Prisma.EventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EventCountAggregateInputType | true
  _min?: EventMinAggregateInputType
  _max?: EventMaxAggregateInputType
}

export type EventGroupByOutputType = {
  id: string
  actorId: string | null
  entity: string
  entityId: string
  action: string
  metadata: string | null
  createdAt: Date
  _count: EventCountAggregateOutputType | null
  _min: EventMinAggregateOutputType | null
  _max: EventMaxAggregateOutputType | null
}

type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EventGroupByOutputType, T['by']> & {
      [P in keyof T & keyof EventGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], EventGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], EventGroupByOutputType[P]>
    }
  >
>

export type EventWhereInput = {
  AND?: Prisma.EventWhereInput | Prisma.EventWhereInput[]
  OR?: Prisma.EventWhereInput[]
  NOT?: Prisma.EventWhereInput | Prisma.EventWhereInput[]
  id?: Prisma.StringFilter<'Event'> | string
  actorId?: Prisma.StringNullableFilter<'Event'> | string | null
  entity?: Prisma.StringFilter<'Event'> | string
  entityId?: Prisma.StringFilter<'Event'> | string
  action?: Prisma.StringFilter<'Event'> | string
  metadata?: Prisma.StringNullableFilter<'Event'> | string | null
  createdAt?: Prisma.DateTimeFilter<'Event'> | Date | string
  actor?: Prisma.XOR<
    Prisma.PersonNullableScalarRelationFilter,
    Prisma.PersonWhereInput
  > | null
}

export type EventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  actorId?: Prisma.SortOrderInput | Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  action?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  actor?: Prisma.PersonOrderByWithRelationInput
}

export type EventWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.EventWhereInput | Prisma.EventWhereInput[]
    OR?: Prisma.EventWhereInput[]
    NOT?: Prisma.EventWhereInput | Prisma.EventWhereInput[]
    actorId?: Prisma.StringNullableFilter<'Event'> | string | null
    entity?: Prisma.StringFilter<'Event'> | string
    entityId?: Prisma.StringFilter<'Event'> | string
    action?: Prisma.StringFilter<'Event'> | string
    metadata?: Prisma.StringNullableFilter<'Event'> | string | null
    createdAt?: Prisma.DateTimeFilter<'Event'> | Date | string
    actor?: Prisma.XOR<
      Prisma.PersonNullableScalarRelationFilter,
      Prisma.PersonWhereInput
    > | null
  },
  'id'
>

export type EventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  actorId?: Prisma.SortOrderInput | Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  action?: Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.EventCountOrderByAggregateInput
  _max?: Prisma.EventMaxOrderByAggregateInput
  _min?: Prisma.EventMinOrderByAggregateInput
}

export type EventScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.EventScalarWhereWithAggregatesInput
    | Prisma.EventScalarWhereWithAggregatesInput[]
  OR?: Prisma.EventScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.EventScalarWhereWithAggregatesInput
    | Prisma.EventScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'Event'> | string
  actorId?: Prisma.StringNullableWithAggregatesFilter<'Event'> | string | null
  entity?: Prisma.StringWithAggregatesFilter<'Event'> | string
  entityId?: Prisma.StringWithAggregatesFilter<'Event'> | string
  action?: Prisma.StringWithAggregatesFilter<'Event'> | string
  metadata?: Prisma.StringNullableWithAggregatesFilter<'Event'> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Event'> | Date | string
}

export type EventCreateInput = {
  id?: string
  entity: string
  entityId: string
  action: string
  metadata?: string | null
  createdAt?: Date | string
  actor?: Prisma.PersonCreateNestedOneWithoutEventsInput
}

export type EventUncheckedCreateInput = {
  id?: string
  actorId?: string | null
  entity: string
  entityId: string
  action: string
  metadata?: string | null
  createdAt?: Date | string
}

export type EventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  actor?: Prisma.PersonUpdateOneWithoutEventsNestedInput
}

export type EventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  actorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventCreateManyInput = {
  id?: string
  actorId?: string | null
  entity: string
  entityId: string
  action: string
  metadata?: string | null
  createdAt?: Date | string
}

export type EventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  actorId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventListRelationFilter = {
  every?: Prisma.EventWhereInput
  some?: Prisma.EventWhereInput
  none?: Prisma.EventWhereInput
}

export type EventOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  actorId?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  action?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  actorId?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  action?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  actorId?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  action?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EventCreateNestedManyWithoutActorInput = {
  create?:
    | Prisma.XOR<
        Prisma.EventCreateWithoutActorInput,
        Prisma.EventUncheckedCreateWithoutActorInput
      >
    | Prisma.EventCreateWithoutActorInput[]
    | Prisma.EventUncheckedCreateWithoutActorInput[]
  connectOrCreate?:
    | Prisma.EventCreateOrConnectWithoutActorInput
    | Prisma.EventCreateOrConnectWithoutActorInput[]
  createMany?: Prisma.EventCreateManyActorInputEnvelope
  connect?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
}

export type EventUncheckedCreateNestedManyWithoutActorInput = {
  create?:
    | Prisma.XOR<
        Prisma.EventCreateWithoutActorInput,
        Prisma.EventUncheckedCreateWithoutActorInput
      >
    | Prisma.EventCreateWithoutActorInput[]
    | Prisma.EventUncheckedCreateWithoutActorInput[]
  connectOrCreate?:
    | Prisma.EventCreateOrConnectWithoutActorInput
    | Prisma.EventCreateOrConnectWithoutActorInput[]
  createMany?: Prisma.EventCreateManyActorInputEnvelope
  connect?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
}

export type EventUpdateManyWithoutActorNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EventCreateWithoutActorInput,
        Prisma.EventUncheckedCreateWithoutActorInput
      >
    | Prisma.EventCreateWithoutActorInput[]
    | Prisma.EventUncheckedCreateWithoutActorInput[]
  connectOrCreate?:
    | Prisma.EventCreateOrConnectWithoutActorInput
    | Prisma.EventCreateOrConnectWithoutActorInput[]
  upsert?:
    | Prisma.EventUpsertWithWhereUniqueWithoutActorInput
    | Prisma.EventUpsertWithWhereUniqueWithoutActorInput[]
  createMany?: Prisma.EventCreateManyActorInputEnvelope
  set?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
  disconnect?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
  delete?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
  connect?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
  update?:
    | Prisma.EventUpdateWithWhereUniqueWithoutActorInput
    | Prisma.EventUpdateWithWhereUniqueWithoutActorInput[]
  updateMany?:
    | Prisma.EventUpdateManyWithWhereWithoutActorInput
    | Prisma.EventUpdateManyWithWhereWithoutActorInput[]
  deleteMany?: Prisma.EventScalarWhereInput | Prisma.EventScalarWhereInput[]
}

export type EventUncheckedUpdateManyWithoutActorNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.EventCreateWithoutActorInput,
        Prisma.EventUncheckedCreateWithoutActorInput
      >
    | Prisma.EventCreateWithoutActorInput[]
    | Prisma.EventUncheckedCreateWithoutActorInput[]
  connectOrCreate?:
    | Prisma.EventCreateOrConnectWithoutActorInput
    | Prisma.EventCreateOrConnectWithoutActorInput[]
  upsert?:
    | Prisma.EventUpsertWithWhereUniqueWithoutActorInput
    | Prisma.EventUpsertWithWhereUniqueWithoutActorInput[]
  createMany?: Prisma.EventCreateManyActorInputEnvelope
  set?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
  disconnect?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
  delete?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
  connect?: Prisma.EventWhereUniqueInput | Prisma.EventWhereUniqueInput[]
  update?:
    | Prisma.EventUpdateWithWhereUniqueWithoutActorInput
    | Prisma.EventUpdateWithWhereUniqueWithoutActorInput[]
  updateMany?:
    | Prisma.EventUpdateManyWithWhereWithoutActorInput
    | Prisma.EventUpdateManyWithWhereWithoutActorInput[]
  deleteMany?: Prisma.EventScalarWhereInput | Prisma.EventScalarWhereInput[]
}

export type EventCreateWithoutActorInput = {
  id?: string
  entity: string
  entityId: string
  action: string
  metadata?: string | null
  createdAt?: Date | string
}

export type EventUncheckedCreateWithoutActorInput = {
  id?: string
  entity: string
  entityId: string
  action: string
  metadata?: string | null
  createdAt?: Date | string
}

export type EventCreateOrConnectWithoutActorInput = {
  where: Prisma.EventWhereUniqueInput
  create: Prisma.XOR<
    Prisma.EventCreateWithoutActorInput,
    Prisma.EventUncheckedCreateWithoutActorInput
  >
}

export type EventCreateManyActorInputEnvelope = {
  data: Prisma.EventCreateManyActorInput | Prisma.EventCreateManyActorInput[]
  skipDuplicates?: boolean
}

export type EventUpsertWithWhereUniqueWithoutActorInput = {
  where: Prisma.EventWhereUniqueInput
  update: Prisma.XOR<
    Prisma.EventUpdateWithoutActorInput,
    Prisma.EventUncheckedUpdateWithoutActorInput
  >
  create: Prisma.XOR<
    Prisma.EventCreateWithoutActorInput,
    Prisma.EventUncheckedCreateWithoutActorInput
  >
}

export type EventUpdateWithWhereUniqueWithoutActorInput = {
  where: Prisma.EventWhereUniqueInput
  data: Prisma.XOR<
    Prisma.EventUpdateWithoutActorInput,
    Prisma.EventUncheckedUpdateWithoutActorInput
  >
}

export type EventUpdateManyWithWhereWithoutActorInput = {
  where: Prisma.EventScalarWhereInput
  data: Prisma.XOR<
    Prisma.EventUpdateManyMutationInput,
    Prisma.EventUncheckedUpdateManyWithoutActorInput
  >
}

export type EventScalarWhereInput = {
  AND?: Prisma.EventScalarWhereInput | Prisma.EventScalarWhereInput[]
  OR?: Prisma.EventScalarWhereInput[]
  NOT?: Prisma.EventScalarWhereInput | Prisma.EventScalarWhereInput[]
  id?: Prisma.StringFilter<'Event'> | string
  actorId?: Prisma.StringNullableFilter<'Event'> | string | null
  entity?: Prisma.StringFilter<'Event'> | string
  entityId?: Prisma.StringFilter<'Event'> | string
  action?: Prisma.StringFilter<'Event'> | string
  metadata?: Prisma.StringNullableFilter<'Event'> | string | null
  createdAt?: Prisma.DateTimeFilter<'Event'> | Date | string
}

export type EventCreateManyActorInput = {
  id?: string
  entity: string
  entityId: string
  action: string
  metadata?: string | null
  createdAt?: Date | string
}

export type EventUpdateWithoutActorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventUncheckedUpdateWithoutActorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventUncheckedUpdateManyWithoutActorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  action?: Prisma.StringFieldUpdateOperationsInput | string
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    actorId?: boolean
    entity?: boolean
    entityId?: boolean
    action?: boolean
    metadata?: boolean
    createdAt?: boolean
    actor?: boolean | Prisma.Event$actorArgs<ExtArgs>
  },
  ExtArgs['result']['event']
>

export type EventSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    actorId?: boolean
    entity?: boolean
    entityId?: boolean
    action?: boolean
    metadata?: boolean
    createdAt?: boolean
    actor?: boolean | Prisma.Event$actorArgs<ExtArgs>
  },
  ExtArgs['result']['event']
>

export type EventSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    actorId?: boolean
    entity?: boolean
    entityId?: boolean
    action?: boolean
    metadata?: boolean
    createdAt?: boolean
    actor?: boolean | Prisma.Event$actorArgs<ExtArgs>
  },
  ExtArgs['result']['event']
>

export type EventSelectScalar = {
  id?: boolean
  actorId?: boolean
  entity?: boolean
  entityId?: boolean
  action?: boolean
  metadata?: boolean
  createdAt?: boolean
}

export type EventOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'actorId'
  | 'entity'
  | 'entityId'
  | 'action'
  | 'metadata'
  | 'createdAt',
  ExtArgs['result']['event']
>
export type EventInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  actor?: boolean | Prisma.Event$actorArgs<ExtArgs>
}
export type EventIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  actor?: boolean | Prisma.Event$actorArgs<ExtArgs>
}
export type EventIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  actor?: boolean | Prisma.Event$actorArgs<ExtArgs>
}

export type $EventPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Event'
  objects: {
    actor: Prisma.$PersonPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      actorId: string | null
      entity: string
      entityId: string
      action: string
      metadata: string | null
      createdAt: Date
    },
    ExtArgs['result']['event']
  >
  composites: {}
}

export type EventGetPayload<
  S extends boolean | null | undefined | EventDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$EventPayload, S>

export type EventCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: EventCountAggregateInputType | true
}

export interface EventDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Event']
    meta: { name: 'Event' }
  }
  /**
   * Find zero or one Event that matches the filter.
   * @param {EventFindUniqueArgs} args - Arguments to find a Event
   * @example
   * // Get one Event
   * const event = await prisma.event.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, EventFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__EventClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one Event that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
   * @example
   * // Get one Event
   * const event = await prisma.event.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__EventClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Event that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventFindFirstArgs} args - Arguments to find a Event
   * @example
   * // Get one Event
   * const event = await prisma.event.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EventFindFirstArgs>(
    args?: Prisma.SelectSubset<T, EventFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__EventClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first Event that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
   * @example
   * // Get one Event
   * const event = await prisma.event.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__EventClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more Events that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Events
   * const events = await prisma.event.findMany()
   *
   * // Get first 10 Events
   * const events = await prisma.event.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
   *
   */
  findMany<T extends EventFindManyArgs>(
    args?: Prisma.SelectSubset<T, EventFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a Event.
   * @param {EventCreateArgs} args - Arguments to create a Event.
   * @example
   * // Create one Event
   * const Event = await prisma.event.create({
   *   data: {
   *     // ... data to create a Event
   *   }
   * })
   *
   */
  create<T extends EventCreateArgs>(
    args: Prisma.SelectSubset<T, EventCreateArgs<ExtArgs>>
  ): Prisma.Prisma__EventClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many Events.
   * @param {EventCreateManyArgs} args - Arguments to create many Events.
   * @example
   * // Create many Events
   * const event = await prisma.event.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends EventCreateManyArgs>(
    args?: Prisma.SelectSubset<T, EventCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Events and returns the data saved in the database.
   * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
   * @example
   * // Create many Events
   * const event = await prisma.event.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Events and only return the `id`
   * const eventWithIdOnly = await prisma.event.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends EventCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a Event.
   * @param {EventDeleteArgs} args - Arguments to delete one Event.
   * @example
   * // Delete one Event
   * const Event = await prisma.event.delete({
   *   where: {
   *     // ... filter to delete one Event
   *   }
   * })
   *
   */
  delete<T extends EventDeleteArgs>(
    args: Prisma.SelectSubset<T, EventDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__EventClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one Event.
   * @param {EventUpdateArgs} args - Arguments to update one Event.
   * @example
   * // Update one Event
   * const event = await prisma.event.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends EventUpdateArgs>(
    args: Prisma.SelectSubset<T, EventUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__EventClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more Events.
   * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
   * @example
   * // Delete a few Events
   * const { count } = await prisma.event.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends EventDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, EventDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Events.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Events
   * const event = await prisma.event.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends EventUpdateManyArgs>(
    args: Prisma.SelectSubset<T, EventUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Events and returns the data updated in the database.
   * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
   * @example
   * // Update many Events
   * const event = await prisma.event.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Events and only return the `id`
   * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one Event.
   * @param {EventUpsertArgs} args - Arguments to update or create a Event.
   * @example
   * // Update or create a Event
   * const event = await prisma.event.upsert({
   *   create: {
   *     // ... data to create a Event
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Event we want to update
   *   }
   * })
   */
  upsert<T extends EventUpsertArgs>(
    args: Prisma.SelectSubset<T, EventUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__EventClient<
    runtime.Types.Result.GetResult<
      Prisma.$EventPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of Events.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventCountArgs} args - Arguments to filter Events to count.
   * @example
   * // Count the number of Events
   * const count = await prisma.event.count({
   *   where: {
   *     // ... the filter for the Events we want to count
   *   }
   * })
   **/
  count<T extends EventCountArgs>(
    args?: Prisma.Subset<T, EventCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Event.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends EventAggregateArgs>(
    args: Prisma.Subset<T, EventAggregateArgs>
  ): Prisma.PrismaPromise<GetEventAggregateType<T>>

  /**
   * Group by Event.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends EventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EventGroupByArgs['orderBy'] }
      : { orderBy?: EventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, EventGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetEventGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for Event.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EventClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  actor<T extends Prisma.Event$actorArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Event$actorArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    runtime.Types.Result.GetResult<
      Prisma.$PersonPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the Event model
 */
export interface EventFieldRefs {
  readonly id: Prisma.FieldRef<'Event', 'String'>
  readonly actorId: Prisma.FieldRef<'Event', 'String'>
  readonly entity: Prisma.FieldRef<'Event', 'String'>
  readonly entityId: Prisma.FieldRef<'Event', 'String'>
  readonly action: Prisma.FieldRef<'Event', 'String'>
  readonly metadata: Prisma.FieldRef<'Event', 'String'>
  readonly createdAt: Prisma.FieldRef<'Event', 'DateTime'>
}

// Custom InputTypes
/**
 * Event findUnique
 */
export type EventFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Event to fetch.
   */
  where: Prisma.EventWhereUniqueInput
}

/**
 * Event findUniqueOrThrow
 */
export type EventFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Event to fetch.
   */
  where: Prisma.EventWhereUniqueInput
}

/**
 * Event findFirst
 */
export type EventFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Event to fetch.
   */
  where?: Prisma.EventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Events to fetch.
   */
  orderBy?:
    | Prisma.EventOrderByWithRelationInput
    | Prisma.EventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Events.
   */
  cursor?: Prisma.EventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Events.
   */
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Event findFirstOrThrow
 */
export type EventFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Event to fetch.
   */
  where?: Prisma.EventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Events to fetch.
   */
  orderBy?:
    | Prisma.EventOrderByWithRelationInput
    | Prisma.EventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Events.
   */
  cursor?: Prisma.EventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Events.
   */
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Event findMany
 */
export type EventFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter, which Events to fetch.
   */
  where?: Prisma.EventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Events to fetch.
   */
  orderBy?:
    | Prisma.EventOrderByWithRelationInput
    | Prisma.EventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Events.
   */
  cursor?: Prisma.EventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Events.
   */
  skip?: number
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Event create
 */
export type EventCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * The data needed to create a Event.
   */
  data: Prisma.XOR<Prisma.EventCreateInput, Prisma.EventUncheckedCreateInput>
}

/**
 * Event createMany
 */
export type EventCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Events.
   */
  data: Prisma.EventCreateManyInput | Prisma.EventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Event createManyAndReturn
 */
export type EventCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * The data used to create many Events.
   */
  data: Prisma.EventCreateManyInput | Prisma.EventCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Event update
 */
export type EventUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * The data needed to update a Event.
   */
  data: Prisma.XOR<Prisma.EventUpdateInput, Prisma.EventUncheckedUpdateInput>
  /**
   * Choose, which Event to update.
   */
  where: Prisma.EventWhereUniqueInput
}

/**
 * Event updateMany
 */
export type EventUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Events.
   */
  data: Prisma.XOR<
    Prisma.EventUpdateManyMutationInput,
    Prisma.EventUncheckedUpdateManyInput
  >
  /**
   * Filter which Events to update
   */
  where?: Prisma.EventWhereInput
  /**
   * Limit how many Events to update.
   */
  limit?: number
}

/**
 * Event updateManyAndReturn
 */
export type EventUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * The data used to update Events.
   */
  data: Prisma.XOR<
    Prisma.EventUpdateManyMutationInput,
    Prisma.EventUncheckedUpdateManyInput
  >
  /**
   * Filter which Events to update
   */
  where?: Prisma.EventWhereInput
  /**
   * Limit how many Events to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Event upsert
 */
export type EventUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * The filter to search for the Event to update in case it exists.
   */
  where: Prisma.EventWhereUniqueInput
  /**
   * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
   */
  create: Prisma.XOR<Prisma.EventCreateInput, Prisma.EventUncheckedCreateInput>
  /**
   * In case the Event was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EventUpdateInput, Prisma.EventUncheckedUpdateInput>
}

/**
 * Event delete
 */
export type EventDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  /**
   * Filter which Event to delete.
   */
  where: Prisma.EventWhereUniqueInput
}

/**
 * Event deleteMany
 */
export type EventDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Events to delete
   */
  where?: Prisma.EventWhereInput
  /**
   * Limit how many Events to delete.
   */
  limit?: number
}

/**
 * Event.actor
 */
export type Event$actorArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Person
   */
  select?: Prisma.PersonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Person
   */
  omit?: Prisma.PersonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PersonInclude<ExtArgs> | null
  where?: Prisma.PersonWhereInput
}

/**
 * Event without action
 */
export type EventDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
}
