/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `ReportInstance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model ReportInstance
 * A single execution of a report with captured inputs and outputs
 */
export type ReportInstanceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ReportInstancePayload>

export type AggregateReportInstance = {
  _count: ReportInstanceCountAggregateOutputType | null
  _min: ReportInstanceMinAggregateOutputType | null
  _max: ReportInstanceMaxAggregateOutputType | null
}

export type ReportInstanceMinAggregateOutputType = {
  id: string | null
  reportId: string | null
  userId: string | null
  organizationId: string | null
  renderer: string | null
  status: string | null
  errorMessage: string | null
  startedAt: Date | null
  completedAt: Date | null
}

export type ReportInstanceMaxAggregateOutputType = {
  id: string | null
  reportId: string | null
  userId: string | null
  organizationId: string | null
  renderer: string | null
  status: string | null
  errorMessage: string | null
  startedAt: Date | null
  completedAt: Date | null
}

export type ReportInstanceCountAggregateOutputType = {
  id: number
  reportId: number
  userId: number
  organizationId: number
  renderer: number
  input: number
  output: number
  status: number
  errorMessage: number
  startedAt: number
  completedAt: number
  _all: number
}

export type ReportInstanceMinAggregateInputType = {
  id?: true
  reportId?: true
  userId?: true
  organizationId?: true
  renderer?: true
  status?: true
  errorMessage?: true
  startedAt?: true
  completedAt?: true
}

export type ReportInstanceMaxAggregateInputType = {
  id?: true
  reportId?: true
  userId?: true
  organizationId?: true
  renderer?: true
  status?: true
  errorMessage?: true
  startedAt?: true
  completedAt?: true
}

export type ReportInstanceCountAggregateInputType = {
  id?: true
  reportId?: true
  userId?: true
  organizationId?: true
  renderer?: true
  input?: true
  output?: true
  status?: true
  errorMessage?: true
  startedAt?: true
  completedAt?: true
  _all?: true
}

export type ReportInstanceAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ReportInstance to aggregate.
   */
  where?: Prisma.ReportInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReportInstances to fetch.
   */
  orderBy?:
    | Prisma.ReportInstanceOrderByWithRelationInput
    | Prisma.ReportInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ReportInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReportInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReportInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned ReportInstances
   **/
  _count?: true | ReportInstanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ReportInstanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ReportInstanceMaxAggregateInputType
}

export type GetReportInstanceAggregateType<
  T extends ReportInstanceAggregateArgs,
> = {
  [P in keyof T & keyof AggregateReportInstance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReportInstance[P]>
    : Prisma.GetScalarType<T[P], AggregateReportInstance[P]>
}

export type ReportInstanceGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ReportInstanceWhereInput
  orderBy?:
    | Prisma.ReportInstanceOrderByWithAggregationInput
    | Prisma.ReportInstanceOrderByWithAggregationInput[]
  by:
    | Prisma.ReportInstanceScalarFieldEnum[]
    | Prisma.ReportInstanceScalarFieldEnum
  having?: Prisma.ReportInstanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ReportInstanceCountAggregateInputType | true
  _min?: ReportInstanceMinAggregateInputType
  _max?: ReportInstanceMaxAggregateInputType
}

export type ReportInstanceGroupByOutputType = {
  id: string
  reportId: string
  userId: string
  organizationId: string
  renderer: string
  input: runtime.JsonValue
  output: runtime.JsonValue
  status: string
  errorMessage: string | null
  startedAt: Date
  completedAt: Date | null
  _count: ReportInstanceCountAggregateOutputType | null
  _min: ReportInstanceMinAggregateOutputType | null
  _max: ReportInstanceMaxAggregateOutputType | null
}

type GetReportInstanceGroupByPayload<T extends ReportInstanceGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<ReportInstanceGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof ReportInstanceGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReportInstanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReportInstanceGroupByOutputType[P]>
      }
    >
  >

export type ReportInstanceWhereInput = {
  AND?: Prisma.ReportInstanceWhereInput | Prisma.ReportInstanceWhereInput[]
  OR?: Prisma.ReportInstanceWhereInput[]
  NOT?: Prisma.ReportInstanceWhereInput | Prisma.ReportInstanceWhereInput[]
  id?: Prisma.StringFilter<'ReportInstance'> | string
  reportId?: Prisma.StringFilter<'ReportInstance'> | string
  userId?: Prisma.StringFilter<'ReportInstance'> | string
  organizationId?: Prisma.StringFilter<'ReportInstance'> | string
  renderer?: Prisma.StringFilter<'ReportInstance'> | string
  input?: Prisma.JsonFilter<'ReportInstance'>
  output?: Prisma.JsonFilter<'ReportInstance'>
  status?: Prisma.StringFilter<'ReportInstance'> | string
  errorMessage?: Prisma.StringNullableFilter<'ReportInstance'> | string | null
  startedAt?: Prisma.DateTimeFilter<'ReportInstance'> | Date | string
  completedAt?:
    | Prisma.DateTimeNullableFilter<'ReportInstance'>
    | Date
    | string
    | null
  report?: Prisma.XOR<
    Prisma.ReportScalarRelationFilter,
    Prisma.ReportWhereInput
  >
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  organization?: Prisma.XOR<
    Prisma.OrganizationScalarRelationFilter,
    Prisma.OrganizationWhereInput
  >
}

export type ReportInstanceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  renderer?: Prisma.SortOrder
  input?: Prisma.SortOrder
  output?: Prisma.SortOrder
  status?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  report?: Prisma.ReportOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
}

export type ReportInstanceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?: Prisma.ReportInstanceWhereInput | Prisma.ReportInstanceWhereInput[]
    OR?: Prisma.ReportInstanceWhereInput[]
    NOT?: Prisma.ReportInstanceWhereInput | Prisma.ReportInstanceWhereInput[]
    reportId?: Prisma.StringFilter<'ReportInstance'> | string
    userId?: Prisma.StringFilter<'ReportInstance'> | string
    organizationId?: Prisma.StringFilter<'ReportInstance'> | string
    renderer?: Prisma.StringFilter<'ReportInstance'> | string
    input?: Prisma.JsonFilter<'ReportInstance'>
    output?: Prisma.JsonFilter<'ReportInstance'>
    status?: Prisma.StringFilter<'ReportInstance'> | string
    errorMessage?: Prisma.StringNullableFilter<'ReportInstance'> | string | null
    startedAt?: Prisma.DateTimeFilter<'ReportInstance'> | Date | string
    completedAt?:
      | Prisma.DateTimeNullableFilter<'ReportInstance'>
      | Date
      | string
      | null
    report?: Prisma.XOR<
      Prisma.ReportScalarRelationFilter,
      Prisma.ReportWhereInput
    >
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
    organization?: Prisma.XOR<
      Prisma.OrganizationScalarRelationFilter,
      Prisma.OrganizationWhereInput
    >
  },
  'id'
>

export type ReportInstanceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  renderer?: Prisma.SortOrder
  input?: Prisma.SortOrder
  output?: Prisma.SortOrder
  status?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrderInput | Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.ReportInstanceCountOrderByAggregateInput
  _max?: Prisma.ReportInstanceMaxOrderByAggregateInput
  _min?: Prisma.ReportInstanceMinOrderByAggregateInput
}

export type ReportInstanceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ReportInstanceScalarWhereWithAggregatesInput
    | Prisma.ReportInstanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.ReportInstanceScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.ReportInstanceScalarWhereWithAggregatesInput
    | Prisma.ReportInstanceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'ReportInstance'> | string
  reportId?: Prisma.StringWithAggregatesFilter<'ReportInstance'> | string
  userId?: Prisma.StringWithAggregatesFilter<'ReportInstance'> | string
  organizationId?: Prisma.StringWithAggregatesFilter<'ReportInstance'> | string
  renderer?: Prisma.StringWithAggregatesFilter<'ReportInstance'> | string
  input?: Prisma.JsonWithAggregatesFilter<'ReportInstance'>
  output?: Prisma.JsonWithAggregatesFilter<'ReportInstance'>
  status?: Prisma.StringWithAggregatesFilter<'ReportInstance'> | string
  errorMessage?:
    | Prisma.StringNullableWithAggregatesFilter<'ReportInstance'>
    | string
    | null
  startedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'ReportInstance'>
    | Date
    | string
  completedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'ReportInstance'>
    | Date
    | string
    | null
}

export type ReportInstanceCreateInput = {
  id?: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
  report: Prisma.ReportCreateNestedOneWithoutInstancesInput
  user: Prisma.UserCreateNestedOneWithoutReportRunsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutReportInstancesInput
}

export type ReportInstanceUncheckedCreateInput = {
  id?: string
  reportId: string
  userId: string
  organizationId: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
}

export type ReportInstanceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  report?: Prisma.ReportUpdateOneRequiredWithoutInstancesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutReportRunsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutReportInstancesNestedInput
}

export type ReportInstanceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceCreateManyInput = {
  id?: string
  reportId: string
  userId: string
  organizationId: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
}

export type ReportInstanceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceListRelationFilter = {
  every?: Prisma.ReportInstanceWhereInput
  some?: Prisma.ReportInstanceWhereInput
  none?: Prisma.ReportInstanceWhereInput
}

export type ReportInstanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ReportInstanceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  renderer?: Prisma.SortOrder
  input?: Prisma.SortOrder
  output?: Prisma.SortOrder
  status?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type ReportInstanceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  renderer?: Prisma.SortOrder
  status?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type ReportInstanceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  reportId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  renderer?: Prisma.SortOrder
  status?: Prisma.SortOrder
  errorMessage?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  completedAt?: Prisma.SortOrder
}

export type ReportInstanceCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutOrganizationInput,
        Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.ReportInstanceCreateWithoutOrganizationInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutOrganizationInput
    | Prisma.ReportInstanceCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ReportInstanceCreateManyOrganizationInputEnvelope
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
}

export type ReportInstanceUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutOrganizationInput,
        Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.ReportInstanceCreateWithoutOrganizationInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutOrganizationInput
    | Prisma.ReportInstanceCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ReportInstanceCreateManyOrganizationInputEnvelope
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
}

export type ReportInstanceUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutOrganizationInput,
        Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.ReportInstanceCreateWithoutOrganizationInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutOrganizationInput
    | Prisma.ReportInstanceCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ReportInstanceCreateManyOrganizationInputEnvelope
  set?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  delete?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  update?:
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.ReportInstanceScalarWhereInput
    | Prisma.ReportInstanceScalarWhereInput[]
}

export type ReportInstanceUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutOrganizationInput,
        Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.ReportInstanceCreateWithoutOrganizationInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutOrganizationInput
    | Prisma.ReportInstanceCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ReportInstanceCreateManyOrganizationInputEnvelope
  set?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  delete?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  update?:
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.ReportInstanceScalarWhereInput
    | Prisma.ReportInstanceScalarWhereInput[]
}

export type ReportInstanceCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutUserInput,
        Prisma.ReportInstanceUncheckedCreateWithoutUserInput
      >
    | Prisma.ReportInstanceCreateWithoutUserInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutUserInput
    | Prisma.ReportInstanceCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ReportInstanceCreateManyUserInputEnvelope
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
}

export type ReportInstanceUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutUserInput,
        Prisma.ReportInstanceUncheckedCreateWithoutUserInput
      >
    | Prisma.ReportInstanceCreateWithoutUserInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutUserInput
    | Prisma.ReportInstanceCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ReportInstanceCreateManyUserInputEnvelope
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
}

export type ReportInstanceUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutUserInput,
        Prisma.ReportInstanceUncheckedCreateWithoutUserInput
      >
    | Prisma.ReportInstanceCreateWithoutUserInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutUserInput
    | Prisma.ReportInstanceCreateOrConnectWithoutUserInput[]
  upsert?:
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ReportInstanceCreateManyUserInputEnvelope
  set?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  delete?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  update?:
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?:
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutUserInput
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutUserInput[]
  deleteMany?:
    | Prisma.ReportInstanceScalarWhereInput
    | Prisma.ReportInstanceScalarWhereInput[]
}

export type ReportInstanceUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutUserInput,
        Prisma.ReportInstanceUncheckedCreateWithoutUserInput
      >
    | Prisma.ReportInstanceCreateWithoutUserInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutUserInput
    | Prisma.ReportInstanceCreateOrConnectWithoutUserInput[]
  upsert?:
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ReportInstanceCreateManyUserInputEnvelope
  set?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  delete?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  update?:
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?:
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutUserInput
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutUserInput[]
  deleteMany?:
    | Prisma.ReportInstanceScalarWhereInput
    | Prisma.ReportInstanceScalarWhereInput[]
}

export type ReportInstanceCreateNestedManyWithoutReportInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutReportInput,
        Prisma.ReportInstanceUncheckedCreateWithoutReportInput
      >
    | Prisma.ReportInstanceCreateWithoutReportInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutReportInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutReportInput
    | Prisma.ReportInstanceCreateOrConnectWithoutReportInput[]
  createMany?: Prisma.ReportInstanceCreateManyReportInputEnvelope
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
}

export type ReportInstanceUncheckedCreateNestedManyWithoutReportInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutReportInput,
        Prisma.ReportInstanceUncheckedCreateWithoutReportInput
      >
    | Prisma.ReportInstanceCreateWithoutReportInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutReportInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutReportInput
    | Prisma.ReportInstanceCreateOrConnectWithoutReportInput[]
  createMany?: Prisma.ReportInstanceCreateManyReportInputEnvelope
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
}

export type ReportInstanceUpdateManyWithoutReportNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutReportInput,
        Prisma.ReportInstanceUncheckedCreateWithoutReportInput
      >
    | Prisma.ReportInstanceCreateWithoutReportInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutReportInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutReportInput
    | Prisma.ReportInstanceCreateOrConnectWithoutReportInput[]
  upsert?:
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutReportInput
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutReportInput[]
  createMany?: Prisma.ReportInstanceCreateManyReportInputEnvelope
  set?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  delete?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  update?:
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutReportInput
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutReportInput[]
  updateMany?:
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutReportInput
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutReportInput[]
  deleteMany?:
    | Prisma.ReportInstanceScalarWhereInput
    | Prisma.ReportInstanceScalarWhereInput[]
}

export type ReportInstanceUncheckedUpdateManyWithoutReportNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ReportInstanceCreateWithoutReportInput,
        Prisma.ReportInstanceUncheckedCreateWithoutReportInput
      >
    | Prisma.ReportInstanceCreateWithoutReportInput[]
    | Prisma.ReportInstanceUncheckedCreateWithoutReportInput[]
  connectOrCreate?:
    | Prisma.ReportInstanceCreateOrConnectWithoutReportInput
    | Prisma.ReportInstanceCreateOrConnectWithoutReportInput[]
  upsert?:
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutReportInput
    | Prisma.ReportInstanceUpsertWithWhereUniqueWithoutReportInput[]
  createMany?: Prisma.ReportInstanceCreateManyReportInputEnvelope
  set?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  disconnect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  delete?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  connect?:
    | Prisma.ReportInstanceWhereUniqueInput
    | Prisma.ReportInstanceWhereUniqueInput[]
  update?:
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutReportInput
    | Prisma.ReportInstanceUpdateWithWhereUniqueWithoutReportInput[]
  updateMany?:
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutReportInput
    | Prisma.ReportInstanceUpdateManyWithWhereWithoutReportInput[]
  deleteMany?:
    | Prisma.ReportInstanceScalarWhereInput
    | Prisma.ReportInstanceScalarWhereInput[]
}

export type ReportInstanceCreateWithoutOrganizationInput = {
  id?: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
  report: Prisma.ReportCreateNestedOneWithoutInstancesInput
  user: Prisma.UserCreateNestedOneWithoutReportRunsInput
}

export type ReportInstanceUncheckedCreateWithoutOrganizationInput = {
  id?: string
  reportId: string
  userId: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
}

export type ReportInstanceCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  create: Prisma.XOR<
    Prisma.ReportInstanceCreateWithoutOrganizationInput,
    Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput
  >
}

export type ReportInstanceCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.ReportInstanceCreateManyOrganizationInput
    | Prisma.ReportInstanceCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type ReportInstanceUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  update: Prisma.XOR<
    Prisma.ReportInstanceUpdateWithoutOrganizationInput,
    Prisma.ReportInstanceUncheckedUpdateWithoutOrganizationInput
  >
  create: Prisma.XOR<
    Prisma.ReportInstanceCreateWithoutOrganizationInput,
    Prisma.ReportInstanceUncheckedCreateWithoutOrganizationInput
  >
}

export type ReportInstanceUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateWithoutOrganizationInput,
    Prisma.ReportInstanceUncheckedUpdateWithoutOrganizationInput
  >
}

export type ReportInstanceUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.ReportInstanceScalarWhereInput
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateManyMutationInput,
    Prisma.ReportInstanceUncheckedUpdateManyWithoutOrganizationInput
  >
}

export type ReportInstanceScalarWhereInput = {
  AND?:
    | Prisma.ReportInstanceScalarWhereInput
    | Prisma.ReportInstanceScalarWhereInput[]
  OR?: Prisma.ReportInstanceScalarWhereInput[]
  NOT?:
    | Prisma.ReportInstanceScalarWhereInput
    | Prisma.ReportInstanceScalarWhereInput[]
  id?: Prisma.StringFilter<'ReportInstance'> | string
  reportId?: Prisma.StringFilter<'ReportInstance'> | string
  userId?: Prisma.StringFilter<'ReportInstance'> | string
  organizationId?: Prisma.StringFilter<'ReportInstance'> | string
  renderer?: Prisma.StringFilter<'ReportInstance'> | string
  input?: Prisma.JsonFilter<'ReportInstance'>
  output?: Prisma.JsonFilter<'ReportInstance'>
  status?: Prisma.StringFilter<'ReportInstance'> | string
  errorMessage?: Prisma.StringNullableFilter<'ReportInstance'> | string | null
  startedAt?: Prisma.DateTimeFilter<'ReportInstance'> | Date | string
  completedAt?:
    | Prisma.DateTimeNullableFilter<'ReportInstance'>
    | Date
    | string
    | null
}

export type ReportInstanceCreateWithoutUserInput = {
  id?: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
  report: Prisma.ReportCreateNestedOneWithoutInstancesInput
  organization: Prisma.OrganizationCreateNestedOneWithoutReportInstancesInput
}

export type ReportInstanceUncheckedCreateWithoutUserInput = {
  id?: string
  reportId: string
  organizationId: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
}

export type ReportInstanceCreateOrConnectWithoutUserInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  create: Prisma.XOR<
    Prisma.ReportInstanceCreateWithoutUserInput,
    Prisma.ReportInstanceUncheckedCreateWithoutUserInput
  >
}

export type ReportInstanceCreateManyUserInputEnvelope = {
  data:
    | Prisma.ReportInstanceCreateManyUserInput
    | Prisma.ReportInstanceCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ReportInstanceUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  update: Prisma.XOR<
    Prisma.ReportInstanceUpdateWithoutUserInput,
    Prisma.ReportInstanceUncheckedUpdateWithoutUserInput
  >
  create: Prisma.XOR<
    Prisma.ReportInstanceCreateWithoutUserInput,
    Prisma.ReportInstanceUncheckedCreateWithoutUserInput
  >
}

export type ReportInstanceUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateWithoutUserInput,
    Prisma.ReportInstanceUncheckedUpdateWithoutUserInput
  >
}

export type ReportInstanceUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ReportInstanceScalarWhereInput
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateManyMutationInput,
    Prisma.ReportInstanceUncheckedUpdateManyWithoutUserInput
  >
}

export type ReportInstanceCreateWithoutReportInput = {
  id?: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutReportRunsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutReportInstancesInput
}

export type ReportInstanceUncheckedCreateWithoutReportInput = {
  id?: string
  userId: string
  organizationId: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
}

export type ReportInstanceCreateOrConnectWithoutReportInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  create: Prisma.XOR<
    Prisma.ReportInstanceCreateWithoutReportInput,
    Prisma.ReportInstanceUncheckedCreateWithoutReportInput
  >
}

export type ReportInstanceCreateManyReportInputEnvelope = {
  data:
    | Prisma.ReportInstanceCreateManyReportInput
    | Prisma.ReportInstanceCreateManyReportInput[]
  skipDuplicates?: boolean
}

export type ReportInstanceUpsertWithWhereUniqueWithoutReportInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  update: Prisma.XOR<
    Prisma.ReportInstanceUpdateWithoutReportInput,
    Prisma.ReportInstanceUncheckedUpdateWithoutReportInput
  >
  create: Prisma.XOR<
    Prisma.ReportInstanceCreateWithoutReportInput,
    Prisma.ReportInstanceUncheckedCreateWithoutReportInput
  >
}

export type ReportInstanceUpdateWithWhereUniqueWithoutReportInput = {
  where: Prisma.ReportInstanceWhereUniqueInput
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateWithoutReportInput,
    Prisma.ReportInstanceUncheckedUpdateWithoutReportInput
  >
}

export type ReportInstanceUpdateManyWithWhereWithoutReportInput = {
  where: Prisma.ReportInstanceScalarWhereInput
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateManyMutationInput,
    Prisma.ReportInstanceUncheckedUpdateManyWithoutReportInput
  >
}

export type ReportInstanceCreateManyOrganizationInput = {
  id?: string
  reportId: string
  userId: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
}

export type ReportInstanceUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  report?: Prisma.ReportUpdateOneRequiredWithoutInstancesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutReportRunsNestedInput
}

export type ReportInstanceUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceCreateManyUserInput = {
  id?: string
  reportId: string
  organizationId: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
}

export type ReportInstanceUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  report?: Prisma.ReportUpdateOneRequiredWithoutInstancesNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutReportInstancesNestedInput
}

export type ReportInstanceUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  reportId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceCreateManyReportInput = {
  id?: string
  userId: string
  organizationId: string
  renderer: string
  input: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: string
  errorMessage?: string | null
  startedAt?: Date | string
  completedAt?: Date | string | null
}

export type ReportInstanceUpdateWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
  user?: Prisma.UserUpdateOneRequiredWithoutReportRunsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutReportInstancesNestedInput
}

export type ReportInstanceUncheckedUpdateWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceUncheckedUpdateManyWithoutReportInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  renderer?: Prisma.StringFieldUpdateOperationsInput | string
  input?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  output?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.StringFieldUpdateOperationsInput | string
  errorMessage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null
}

export type ReportInstanceSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    reportId?: boolean
    userId?: boolean
    organizationId?: boolean
    renderer?: boolean
    input?: boolean
    output?: boolean
    status?: boolean
    errorMessage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['reportInstance']
>

export type ReportInstanceSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    reportId?: boolean
    userId?: boolean
    organizationId?: boolean
    renderer?: boolean
    input?: boolean
    output?: boolean
    status?: boolean
    errorMessage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['reportInstance']
>

export type ReportInstanceSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    reportId?: boolean
    userId?: boolean
    organizationId?: boolean
    renderer?: boolean
    input?: boolean
    output?: boolean
    status?: boolean
    errorMessage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['reportInstance']
>

export type ReportInstanceSelectScalar = {
  id?: boolean
  reportId?: boolean
  userId?: boolean
  organizationId?: boolean
  renderer?: boolean
  input?: boolean
  output?: boolean
  status?: boolean
  errorMessage?: boolean
  startedAt?: boolean
  completedAt?: boolean
}

export type ReportInstanceOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'reportId'
  | 'userId'
  | 'organizationId'
  | 'renderer'
  | 'input'
  | 'output'
  | 'status'
  | 'errorMessage'
  | 'startedAt'
  | 'completedAt',
  ExtArgs['result']['reportInstance']
>
export type ReportInstanceInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type ReportInstanceIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type ReportInstanceIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  report?: boolean | Prisma.ReportDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $ReportInstancePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'ReportInstance'
  objects: {
    report: Prisma.$ReportPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
    organization: Prisma.$OrganizationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      reportId: string
      userId: string
      organizationId: string
      renderer: string
      input: runtime.JsonValue
      output: runtime.JsonValue
      status: string
      errorMessage: string | null
      startedAt: Date
      completedAt: Date | null
    },
    ExtArgs['result']['reportInstance']
  >
  composites: {}
}

export type ReportInstanceGetPayload<
  S extends boolean | null | undefined | ReportInstanceDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ReportInstancePayload, S>

export type ReportInstanceCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  ReportInstanceFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: ReportInstanceCountAggregateInputType | true
}

export interface ReportInstanceDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['ReportInstance']
    meta: { name: 'ReportInstance' }
  }
  /**
   * Find zero or one ReportInstance that matches the filter.
   * @param {ReportInstanceFindUniqueArgs} args - Arguments to find a ReportInstance
   * @example
   * // Get one ReportInstance
   * const reportInstance = await prisma.reportInstance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReportInstanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ReportInstanceFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ReportInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one ReportInstance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReportInstanceFindUniqueOrThrowArgs} args - Arguments to find a ReportInstance
   * @example
   * // Get one ReportInstance
   * const reportInstance = await prisma.reportInstance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReportInstanceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ReportInstanceFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ReportInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first ReportInstance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportInstanceFindFirstArgs} args - Arguments to find a ReportInstance
   * @example
   * // Get one ReportInstance
   * const reportInstance = await prisma.reportInstance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReportInstanceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ReportInstanceFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ReportInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first ReportInstance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportInstanceFindFirstOrThrowArgs} args - Arguments to find a ReportInstance
   * @example
   * // Get one ReportInstance
   * const reportInstance = await prisma.reportInstance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReportInstanceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ReportInstanceFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ReportInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more ReportInstances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportInstanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ReportInstances
   * const reportInstances = await prisma.reportInstance.findMany()
   *
   * // Get first 10 ReportInstances
   * const reportInstances = await prisma.reportInstance.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const reportInstanceWithIdOnly = await prisma.reportInstance.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ReportInstanceFindManyArgs>(
    args?: Prisma.SelectSubset<T, ReportInstanceFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a ReportInstance.
   * @param {ReportInstanceCreateArgs} args - Arguments to create a ReportInstance.
   * @example
   * // Create one ReportInstance
   * const ReportInstance = await prisma.reportInstance.create({
   *   data: {
   *     // ... data to create a ReportInstance
   *   }
   * })
   *
   */
  create<T extends ReportInstanceCreateArgs>(
    args: Prisma.SelectSubset<T, ReportInstanceCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ReportInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many ReportInstances.
   * @param {ReportInstanceCreateManyArgs} args - Arguments to create many ReportInstances.
   * @example
   * // Create many ReportInstances
   * const reportInstance = await prisma.reportInstance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ReportInstanceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ReportInstanceCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ReportInstances and returns the data saved in the database.
   * @param {ReportInstanceCreateManyAndReturnArgs} args - Arguments to create many ReportInstances.
   * @example
   * // Create many ReportInstances
   * const reportInstance = await prisma.reportInstance.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many ReportInstances and only return the `id`
   * const reportInstanceWithIdOnly = await prisma.reportInstance.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ReportInstanceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      ReportInstanceCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a ReportInstance.
   * @param {ReportInstanceDeleteArgs} args - Arguments to delete one ReportInstance.
   * @example
   * // Delete one ReportInstance
   * const ReportInstance = await prisma.reportInstance.delete({
   *   where: {
   *     // ... filter to delete one ReportInstance
   *   }
   * })
   *
   */
  delete<T extends ReportInstanceDeleteArgs>(
    args: Prisma.SelectSubset<T, ReportInstanceDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ReportInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one ReportInstance.
   * @param {ReportInstanceUpdateArgs} args - Arguments to update one ReportInstance.
   * @example
   * // Update one ReportInstance
   * const reportInstance = await prisma.reportInstance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ReportInstanceUpdateArgs>(
    args: Prisma.SelectSubset<T, ReportInstanceUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ReportInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more ReportInstances.
   * @param {ReportInstanceDeleteManyArgs} args - Arguments to filter ReportInstances to delete.
   * @example
   * // Delete a few ReportInstances
   * const { count } = await prisma.reportInstance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ReportInstanceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ReportInstanceDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ReportInstances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportInstanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ReportInstances
   * const reportInstance = await prisma.reportInstance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ReportInstanceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ReportInstanceUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ReportInstances and returns the data updated in the database.
   * @param {ReportInstanceUpdateManyAndReturnArgs} args - Arguments to update many ReportInstances.
   * @example
   * // Update many ReportInstances
   * const reportInstance = await prisma.reportInstance.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more ReportInstances and only return the `id`
   * const reportInstanceWithIdOnly = await prisma.reportInstance.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ReportInstanceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ReportInstanceUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one ReportInstance.
   * @param {ReportInstanceUpsertArgs} args - Arguments to update or create a ReportInstance.
   * @example
   * // Update or create a ReportInstance
   * const reportInstance = await prisma.reportInstance.upsert({
   *   create: {
   *     // ... data to create a ReportInstance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ReportInstance we want to update
   *   }
   * })
   */
  upsert<T extends ReportInstanceUpsertArgs>(
    args: Prisma.SelectSubset<T, ReportInstanceUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ReportInstanceClient<
    runtime.Types.Result.GetResult<
      Prisma.$ReportInstancePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of ReportInstances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportInstanceCountArgs} args - Arguments to filter ReportInstances to count.
   * @example
   * // Count the number of ReportInstances
   * const count = await prisma.reportInstance.count({
   *   where: {
   *     // ... the filter for the ReportInstances we want to count
   *   }
   * })
   **/
  count<T extends ReportInstanceCountArgs>(
    args?: Prisma.Subset<T, ReportInstanceCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            ReportInstanceCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ReportInstance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportInstanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ReportInstanceAggregateArgs>(
    args: Prisma.Subset<T, ReportInstanceAggregateArgs>
  ): Prisma.PrismaPromise<GetReportInstanceAggregateType<T>>

  /**
   * Group by ReportInstance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportInstanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ReportInstanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReportInstanceGroupByArgs['orderBy'] }
      : { orderBy?: ReportInstanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ReportInstanceGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetReportInstanceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportInstance model
   */
  readonly fields: ReportInstanceFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for ReportInstance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReportInstanceClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  report<T extends Prisma.ReportDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ReportDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__ReportClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ReportPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrganizationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the ReportInstance model
 */
export interface ReportInstanceFieldRefs {
  readonly id: Prisma.FieldRef<'ReportInstance', 'String'>
  readonly reportId: Prisma.FieldRef<'ReportInstance', 'String'>
  readonly userId: Prisma.FieldRef<'ReportInstance', 'String'>
  readonly organizationId: Prisma.FieldRef<'ReportInstance', 'String'>
  readonly renderer: Prisma.FieldRef<'ReportInstance', 'String'>
  readonly input: Prisma.FieldRef<'ReportInstance', 'Json'>
  readonly output: Prisma.FieldRef<'ReportInstance', 'Json'>
  readonly status: Prisma.FieldRef<'ReportInstance', 'String'>
  readonly errorMessage: Prisma.FieldRef<'ReportInstance', 'String'>
  readonly startedAt: Prisma.FieldRef<'ReportInstance', 'DateTime'>
  readonly completedAt: Prisma.FieldRef<'ReportInstance', 'DateTime'>
}

// Custom InputTypes
/**
 * ReportInstance findUnique
 */
export type ReportInstanceFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * Filter, which ReportInstance to fetch.
   */
  where: Prisma.ReportInstanceWhereUniqueInput
}

/**
 * ReportInstance findUniqueOrThrow
 */
export type ReportInstanceFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * Filter, which ReportInstance to fetch.
   */
  where: Prisma.ReportInstanceWhereUniqueInput
}

/**
 * ReportInstance findFirst
 */
export type ReportInstanceFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * Filter, which ReportInstance to fetch.
   */
  where?: Prisma.ReportInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReportInstances to fetch.
   */
  orderBy?:
    | Prisma.ReportInstanceOrderByWithRelationInput
    | Prisma.ReportInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ReportInstances.
   */
  cursor?: Prisma.ReportInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReportInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReportInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ReportInstances.
   */
  distinct?:
    | Prisma.ReportInstanceScalarFieldEnum
    | Prisma.ReportInstanceScalarFieldEnum[]
}

/**
 * ReportInstance findFirstOrThrow
 */
export type ReportInstanceFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * Filter, which ReportInstance to fetch.
   */
  where?: Prisma.ReportInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReportInstances to fetch.
   */
  orderBy?:
    | Prisma.ReportInstanceOrderByWithRelationInput
    | Prisma.ReportInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for ReportInstances.
   */
  cursor?: Prisma.ReportInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReportInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReportInstances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of ReportInstances.
   */
  distinct?:
    | Prisma.ReportInstanceScalarFieldEnum
    | Prisma.ReportInstanceScalarFieldEnum[]
}

/**
 * ReportInstance findMany
 */
export type ReportInstanceFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * Filter, which ReportInstances to fetch.
   */
  where?: Prisma.ReportInstanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of ReportInstances to fetch.
   */
  orderBy?:
    | Prisma.ReportInstanceOrderByWithRelationInput
    | Prisma.ReportInstanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing ReportInstances.
   */
  cursor?: Prisma.ReportInstanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` ReportInstances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` ReportInstances.
   */
  skip?: number
  distinct?:
    | Prisma.ReportInstanceScalarFieldEnum
    | Prisma.ReportInstanceScalarFieldEnum[]
}

/**
 * ReportInstance create
 */
export type ReportInstanceCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * The data needed to create a ReportInstance.
   */
  data: Prisma.XOR<
    Prisma.ReportInstanceCreateInput,
    Prisma.ReportInstanceUncheckedCreateInput
  >
}

/**
 * ReportInstance createMany
 */
export type ReportInstanceCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many ReportInstances.
   */
  data:
    | Prisma.ReportInstanceCreateManyInput
    | Prisma.ReportInstanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ReportInstance createManyAndReturn
 */
export type ReportInstanceCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * The data used to create many ReportInstances.
   */
  data:
    | Prisma.ReportInstanceCreateManyInput
    | Prisma.ReportInstanceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ReportInstance update
 */
export type ReportInstanceUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * The data needed to update a ReportInstance.
   */
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateInput,
    Prisma.ReportInstanceUncheckedUpdateInput
  >
  /**
   * Choose, which ReportInstance to update.
   */
  where: Prisma.ReportInstanceWhereUniqueInput
}

/**
 * ReportInstance updateMany
 */
export type ReportInstanceUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update ReportInstances.
   */
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateManyMutationInput,
    Prisma.ReportInstanceUncheckedUpdateManyInput
  >
  /**
   * Filter which ReportInstances to update
   */
  where?: Prisma.ReportInstanceWhereInput
  /**
   * Limit how many ReportInstances to update.
   */
  limit?: number
}

/**
 * ReportInstance updateManyAndReturn
 */
export type ReportInstanceUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * The data used to update ReportInstances.
   */
  data: Prisma.XOR<
    Prisma.ReportInstanceUpdateManyMutationInput,
    Prisma.ReportInstanceUncheckedUpdateManyInput
  >
  /**
   * Filter which ReportInstances to update
   */
  where?: Prisma.ReportInstanceWhereInput
  /**
   * Limit how many ReportInstances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ReportInstance upsert
 */
export type ReportInstanceUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * The filter to search for the ReportInstance to update in case it exists.
   */
  where: Prisma.ReportInstanceWhereUniqueInput
  /**
   * In case the ReportInstance found by the `where` argument doesn't exist, create a new ReportInstance with this data.
   */
  create: Prisma.XOR<
    Prisma.ReportInstanceCreateInput,
    Prisma.ReportInstanceUncheckedCreateInput
  >
  /**
   * In case the ReportInstance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.ReportInstanceUpdateInput,
    Prisma.ReportInstanceUncheckedUpdateInput
  >
}

/**
 * ReportInstance delete
 */
export type ReportInstanceDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
  /**
   * Filter which ReportInstance to delete.
   */
  where: Prisma.ReportInstanceWhereUniqueInput
}

/**
 * ReportInstance deleteMany
 */
export type ReportInstanceDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which ReportInstances to delete
   */
  where?: Prisma.ReportInstanceWhereInput
  /**
   * Limit how many ReportInstances to delete.
   */
  limit?: number
}

/**
 * ReportInstance without action
 */
export type ReportInstanceDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ReportInstance
   */
  select?: Prisma.ReportInstanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ReportInstance
   */
  omit?: Prisma.ReportInstanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInstanceInclude<ExtArgs> | null
}
