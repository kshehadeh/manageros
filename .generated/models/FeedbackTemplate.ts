/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `FeedbackTemplate` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model FeedbackTemplate
 *
 */
export type FeedbackTemplateModel =
  runtime.Types.Result.DefaultSelection<Prisma.$FeedbackTemplatePayload>

export type AggregateFeedbackTemplate = {
  _count: FeedbackTemplateCountAggregateOutputType | null
  _min: FeedbackTemplateMinAggregateOutputType | null
  _max: FeedbackTemplateMaxAggregateOutputType | null
}

export type FeedbackTemplateMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  isDefault: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackTemplateMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  isDefault: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackTemplateCountAggregateOutputType = {
  id: number
  name: number
  description: number
  isDefault: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type FeedbackTemplateMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isDefault?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackTemplateMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isDefault?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackTemplateCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isDefault?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FeedbackTemplateAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FeedbackTemplate to aggregate.
   */
  where?: Prisma.FeedbackTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackTemplates to fetch.
   */
  orderBy?:
    | Prisma.FeedbackTemplateOrderByWithRelationInput
    | Prisma.FeedbackTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FeedbackTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned FeedbackTemplates
   **/
  _count?: true | FeedbackTemplateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FeedbackTemplateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FeedbackTemplateMaxAggregateInputType
}

export type GetFeedbackTemplateAggregateType<
  T extends FeedbackTemplateAggregateArgs,
> = {
  [P in keyof T & keyof AggregateFeedbackTemplate]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeedbackTemplate[P]>
    : Prisma.GetScalarType<T[P], AggregateFeedbackTemplate[P]>
}

export type FeedbackTemplateGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeedbackTemplateWhereInput
  orderBy?:
    | Prisma.FeedbackTemplateOrderByWithAggregationInput
    | Prisma.FeedbackTemplateOrderByWithAggregationInput[]
  by:
    | Prisma.FeedbackTemplateScalarFieldEnum[]
    | Prisma.FeedbackTemplateScalarFieldEnum
  having?: Prisma.FeedbackTemplateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeedbackTemplateCountAggregateInputType | true
  _min?: FeedbackTemplateMinAggregateInputType
  _max?: FeedbackTemplateMaxAggregateInputType
}

export type FeedbackTemplateGroupByOutputType = {
  id: string
  name: string
  description: string | null
  isDefault: boolean
  createdAt: Date
  updatedAt: Date
  _count: FeedbackTemplateCountAggregateOutputType | null
  _min: FeedbackTemplateMinAggregateOutputType | null
  _max: FeedbackTemplateMaxAggregateOutputType | null
}

type GetFeedbackTemplateGroupByPayload<T extends FeedbackTemplateGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<FeedbackTemplateGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof FeedbackTemplateGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeedbackTemplateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeedbackTemplateGroupByOutputType[P]>
      }
    >
  >

export type FeedbackTemplateWhereInput = {
  AND?: Prisma.FeedbackTemplateWhereInput | Prisma.FeedbackTemplateWhereInput[]
  OR?: Prisma.FeedbackTemplateWhereInput[]
  NOT?: Prisma.FeedbackTemplateWhereInput | Prisma.FeedbackTemplateWhereInput[]
  id?: Prisma.StringFilter<'FeedbackTemplate'> | string
  name?: Prisma.StringFilter<'FeedbackTemplate'> | string
  description?: Prisma.StringNullableFilter<'FeedbackTemplate'> | string | null
  isDefault?: Prisma.BoolFilter<'FeedbackTemplate'> | boolean
  createdAt?: Prisma.DateTimeFilter<'FeedbackTemplate'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'FeedbackTemplate'> | Date | string
  questions?: Prisma.FeedbackQuestionListRelationFilter
  campaigns?: Prisma.FeedbackCampaignListRelationFilter
}

export type FeedbackTemplateOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  questions?: Prisma.FeedbackQuestionOrderByRelationAggregateInput
  campaigns?: Prisma.FeedbackCampaignOrderByRelationAggregateInput
}

export type FeedbackTemplateWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?:
      | Prisma.FeedbackTemplateWhereInput
      | Prisma.FeedbackTemplateWhereInput[]
    OR?: Prisma.FeedbackTemplateWhereInput[]
    NOT?:
      | Prisma.FeedbackTemplateWhereInput
      | Prisma.FeedbackTemplateWhereInput[]
    name?: Prisma.StringFilter<'FeedbackTemplate'> | string
    description?:
      | Prisma.StringNullableFilter<'FeedbackTemplate'>
      | string
      | null
    isDefault?: Prisma.BoolFilter<'FeedbackTemplate'> | boolean
    createdAt?: Prisma.DateTimeFilter<'FeedbackTemplate'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'FeedbackTemplate'> | Date | string
    questions?: Prisma.FeedbackQuestionListRelationFilter
    campaigns?: Prisma.FeedbackCampaignListRelationFilter
  },
  'id'
>

export type FeedbackTemplateOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FeedbackTemplateCountOrderByAggregateInput
  _max?: Prisma.FeedbackTemplateMaxOrderByAggregateInput
  _min?: Prisma.FeedbackTemplateMinOrderByAggregateInput
}

export type FeedbackTemplateScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FeedbackTemplateScalarWhereWithAggregatesInput
    | Prisma.FeedbackTemplateScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeedbackTemplateScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.FeedbackTemplateScalarWhereWithAggregatesInput
    | Prisma.FeedbackTemplateScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'FeedbackTemplate'> | string
  name?: Prisma.StringWithAggregatesFilter<'FeedbackTemplate'> | string
  description?:
    | Prisma.StringNullableWithAggregatesFilter<'FeedbackTemplate'>
    | string
    | null
  isDefault?: Prisma.BoolWithAggregatesFilter<'FeedbackTemplate'> | boolean
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackTemplate'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackTemplate'>
    | Date
    | string
}

export type FeedbackTemplateCreateInput = {
  id?: string
  name: string
  description?: string | null
  isDefault?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  questions?: Prisma.FeedbackQuestionCreateNestedManyWithoutTemplateInput
  campaigns?: Prisma.FeedbackCampaignCreateNestedManyWithoutTemplateInput
}

export type FeedbackTemplateUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  isDefault?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  questions?: Prisma.FeedbackQuestionUncheckedCreateNestedManyWithoutTemplateInput
  campaigns?: Prisma.FeedbackCampaignUncheckedCreateNestedManyWithoutTemplateInput
}

export type FeedbackTemplateUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  questions?: Prisma.FeedbackQuestionUpdateManyWithoutTemplateNestedInput
  campaigns?: Prisma.FeedbackCampaignUpdateManyWithoutTemplateNestedInput
}

export type FeedbackTemplateUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  questions?: Prisma.FeedbackQuestionUncheckedUpdateManyWithoutTemplateNestedInput
  campaigns?: Prisma.FeedbackCampaignUncheckedUpdateManyWithoutTemplateNestedInput
}

export type FeedbackTemplateCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  isDefault?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackTemplateUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackTemplateUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackTemplateNullableScalarRelationFilter = {
  is?: Prisma.FeedbackTemplateWhereInput | null
  isNot?: Prisma.FeedbackTemplateWhereInput | null
}

export type FeedbackTemplateCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackTemplateMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackTemplateMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackTemplateScalarRelationFilter = {
  is?: Prisma.FeedbackTemplateWhereInput
  isNot?: Prisma.FeedbackTemplateWhereInput
}

export type FeedbackTemplateCreateNestedOneWithoutCampaignsInput = {
  create?: Prisma.XOR<
    Prisma.FeedbackTemplateCreateWithoutCampaignsInput,
    Prisma.FeedbackTemplateUncheckedCreateWithoutCampaignsInput
  >
  connectOrCreate?: Prisma.FeedbackTemplateCreateOrConnectWithoutCampaignsInput
  connect?: Prisma.FeedbackTemplateWhereUniqueInput
}

export type FeedbackTemplateUpdateOneWithoutCampaignsNestedInput = {
  create?: Prisma.XOR<
    Prisma.FeedbackTemplateCreateWithoutCampaignsInput,
    Prisma.FeedbackTemplateUncheckedCreateWithoutCampaignsInput
  >
  connectOrCreate?: Prisma.FeedbackTemplateCreateOrConnectWithoutCampaignsInput
  upsert?: Prisma.FeedbackTemplateUpsertWithoutCampaignsInput
  disconnect?: Prisma.FeedbackTemplateWhereInput | boolean
  delete?: Prisma.FeedbackTemplateWhereInput | boolean
  connect?: Prisma.FeedbackTemplateWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.FeedbackTemplateUpdateToOneWithWhereWithoutCampaignsInput,
      Prisma.FeedbackTemplateUpdateWithoutCampaignsInput
    >,
    Prisma.FeedbackTemplateUncheckedUpdateWithoutCampaignsInput
  >
}

export type FeedbackTemplateCreateNestedOneWithoutQuestionsInput = {
  create?: Prisma.XOR<
    Prisma.FeedbackTemplateCreateWithoutQuestionsInput,
    Prisma.FeedbackTemplateUncheckedCreateWithoutQuestionsInput
  >
  connectOrCreate?: Prisma.FeedbackTemplateCreateOrConnectWithoutQuestionsInput
  connect?: Prisma.FeedbackTemplateWhereUniqueInput
}

export type FeedbackTemplateUpdateOneRequiredWithoutQuestionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.FeedbackTemplateCreateWithoutQuestionsInput,
    Prisma.FeedbackTemplateUncheckedCreateWithoutQuestionsInput
  >
  connectOrCreate?: Prisma.FeedbackTemplateCreateOrConnectWithoutQuestionsInput
  upsert?: Prisma.FeedbackTemplateUpsertWithoutQuestionsInput
  connect?: Prisma.FeedbackTemplateWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.FeedbackTemplateUpdateToOneWithWhereWithoutQuestionsInput,
      Prisma.FeedbackTemplateUpdateWithoutQuestionsInput
    >,
    Prisma.FeedbackTemplateUncheckedUpdateWithoutQuestionsInput
  >
}

export type FeedbackTemplateCreateWithoutCampaignsInput = {
  id?: string
  name: string
  description?: string | null
  isDefault?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  questions?: Prisma.FeedbackQuestionCreateNestedManyWithoutTemplateInput
}

export type FeedbackTemplateUncheckedCreateWithoutCampaignsInput = {
  id?: string
  name: string
  description?: string | null
  isDefault?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  questions?: Prisma.FeedbackQuestionUncheckedCreateNestedManyWithoutTemplateInput
}

export type FeedbackTemplateCreateOrConnectWithoutCampaignsInput = {
  where: Prisma.FeedbackTemplateWhereUniqueInput
  create: Prisma.XOR<
    Prisma.FeedbackTemplateCreateWithoutCampaignsInput,
    Prisma.FeedbackTemplateUncheckedCreateWithoutCampaignsInput
  >
}

export type FeedbackTemplateUpsertWithoutCampaignsInput = {
  update: Prisma.XOR<
    Prisma.FeedbackTemplateUpdateWithoutCampaignsInput,
    Prisma.FeedbackTemplateUncheckedUpdateWithoutCampaignsInput
  >
  create: Prisma.XOR<
    Prisma.FeedbackTemplateCreateWithoutCampaignsInput,
    Prisma.FeedbackTemplateUncheckedCreateWithoutCampaignsInput
  >
  where?: Prisma.FeedbackTemplateWhereInput
}

export type FeedbackTemplateUpdateToOneWithWhereWithoutCampaignsInput = {
  where?: Prisma.FeedbackTemplateWhereInput
  data: Prisma.XOR<
    Prisma.FeedbackTemplateUpdateWithoutCampaignsInput,
    Prisma.FeedbackTemplateUncheckedUpdateWithoutCampaignsInput
  >
}

export type FeedbackTemplateUpdateWithoutCampaignsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  questions?: Prisma.FeedbackQuestionUpdateManyWithoutTemplateNestedInput
}

export type FeedbackTemplateUncheckedUpdateWithoutCampaignsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  questions?: Prisma.FeedbackQuestionUncheckedUpdateManyWithoutTemplateNestedInput
}

export type FeedbackTemplateCreateWithoutQuestionsInput = {
  id?: string
  name: string
  description?: string | null
  isDefault?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  campaigns?: Prisma.FeedbackCampaignCreateNestedManyWithoutTemplateInput
}

export type FeedbackTemplateUncheckedCreateWithoutQuestionsInput = {
  id?: string
  name: string
  description?: string | null
  isDefault?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  campaigns?: Prisma.FeedbackCampaignUncheckedCreateNestedManyWithoutTemplateInput
}

export type FeedbackTemplateCreateOrConnectWithoutQuestionsInput = {
  where: Prisma.FeedbackTemplateWhereUniqueInput
  create: Prisma.XOR<
    Prisma.FeedbackTemplateCreateWithoutQuestionsInput,
    Prisma.FeedbackTemplateUncheckedCreateWithoutQuestionsInput
  >
}

export type FeedbackTemplateUpsertWithoutQuestionsInput = {
  update: Prisma.XOR<
    Prisma.FeedbackTemplateUpdateWithoutQuestionsInput,
    Prisma.FeedbackTemplateUncheckedUpdateWithoutQuestionsInput
  >
  create: Prisma.XOR<
    Prisma.FeedbackTemplateCreateWithoutQuestionsInput,
    Prisma.FeedbackTemplateUncheckedCreateWithoutQuestionsInput
  >
  where?: Prisma.FeedbackTemplateWhereInput
}

export type FeedbackTemplateUpdateToOneWithWhereWithoutQuestionsInput = {
  where?: Prisma.FeedbackTemplateWhereInput
  data: Prisma.XOR<
    Prisma.FeedbackTemplateUpdateWithoutQuestionsInput,
    Prisma.FeedbackTemplateUncheckedUpdateWithoutQuestionsInput
  >
}

export type FeedbackTemplateUpdateWithoutQuestionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  campaigns?: Prisma.FeedbackCampaignUpdateManyWithoutTemplateNestedInput
}

export type FeedbackTemplateUncheckedUpdateWithoutQuestionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  campaigns?: Prisma.FeedbackCampaignUncheckedUpdateManyWithoutTemplateNestedInput
}

/**
 * Count Type FeedbackTemplateCountOutputType
 */

export type FeedbackTemplateCountOutputType = {
  questions: number
  campaigns: number
}

export type FeedbackTemplateCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  questions?: boolean | FeedbackTemplateCountOutputTypeCountQuestionsArgs
  campaigns?: boolean | FeedbackTemplateCountOutputTypeCountCampaignsArgs
}

/**
 * FeedbackTemplateCountOutputType without action
 */
export type FeedbackTemplateCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplateCountOutputType
   */
  select?: Prisma.FeedbackTemplateCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FeedbackTemplateCountOutputType without action
 */
export type FeedbackTemplateCountOutputTypeCountQuestionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeedbackQuestionWhereInput
}

/**
 * FeedbackTemplateCountOutputType without action
 */
export type FeedbackTemplateCountOutputTypeCountCampaignsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeedbackCampaignWhereInput
}

export type FeedbackTemplateSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questions?: boolean | Prisma.FeedbackTemplate$questionsArgs<ExtArgs>
    campaigns?: boolean | Prisma.FeedbackTemplate$campaignsArgs<ExtArgs>
    _count?:
      | boolean
      | Prisma.FeedbackTemplateCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackTemplate']
>

export type FeedbackTemplateSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  },
  ExtArgs['result']['feedbackTemplate']
>

export type FeedbackTemplateSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  },
  ExtArgs['result']['feedbackTemplate']
>

export type FeedbackTemplateSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  isDefault?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FeedbackTemplateOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'description' | 'isDefault' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['feedbackTemplate']
>
export type FeedbackTemplateInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  questions?: boolean | Prisma.FeedbackTemplate$questionsArgs<ExtArgs>
  campaigns?: boolean | Prisma.FeedbackTemplate$campaignsArgs<ExtArgs>
  _count?: boolean | Prisma.FeedbackTemplateCountOutputTypeDefaultArgs<ExtArgs>
}
export type FeedbackTemplateIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {}
export type FeedbackTemplateIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {}

export type $FeedbackTemplatePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'FeedbackTemplate'
  objects: {
    questions: Prisma.$FeedbackQuestionPayload<ExtArgs>[]
    campaigns: Prisma.$FeedbackCampaignPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      name: string
      description: string | null
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['feedbackTemplate']
  >
  composites: {}
}

export type FeedbackTemplateGetPayload<
  S extends boolean | null | undefined | FeedbackTemplateDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$FeedbackTemplatePayload, S>

export type FeedbackTemplateCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  FeedbackTemplateFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: FeedbackTemplateCountAggregateInputType | true
}

export interface FeedbackTemplateDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['FeedbackTemplate']
    meta: { name: 'FeedbackTemplate' }
  }
  /**
   * Find zero or one FeedbackTemplate that matches the filter.
   * @param {FeedbackTemplateFindUniqueArgs} args - Arguments to find a FeedbackTemplate
   * @example
   * // Get one FeedbackTemplate
   * const feedbackTemplate = await prisma.feedbackTemplate.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeedbackTemplateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FeedbackTemplateFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one FeedbackTemplate that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeedbackTemplateFindUniqueOrThrowArgs} args - Arguments to find a FeedbackTemplate
   * @example
   * // Get one FeedbackTemplate
   * const feedbackTemplate = await prisma.feedbackTemplate.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeedbackTemplateFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FeedbackTemplateFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first FeedbackTemplate that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackTemplateFindFirstArgs} args - Arguments to find a FeedbackTemplate
   * @example
   * // Get one FeedbackTemplate
   * const feedbackTemplate = await prisma.feedbackTemplate.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeedbackTemplateFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FeedbackTemplateFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first FeedbackTemplate that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackTemplateFindFirstOrThrowArgs} args - Arguments to find a FeedbackTemplate
   * @example
   * // Get one FeedbackTemplate
   * const feedbackTemplate = await prisma.feedbackTemplate.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeedbackTemplateFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FeedbackTemplateFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more FeedbackTemplates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeedbackTemplates
   * const feedbackTemplates = await prisma.feedbackTemplate.findMany()
   *
   * // Get first 10 FeedbackTemplates
   * const feedbackTemplates = await prisma.feedbackTemplate.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const feedbackTemplateWithIdOnly = await prisma.feedbackTemplate.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FeedbackTemplateFindManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackTemplateFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a FeedbackTemplate.
   * @param {FeedbackTemplateCreateArgs} args - Arguments to create a FeedbackTemplate.
   * @example
   * // Create one FeedbackTemplate
   * const FeedbackTemplate = await prisma.feedbackTemplate.create({
   *   data: {
   *     // ... data to create a FeedbackTemplate
   *   }
   * })
   *
   */
  create<T extends FeedbackTemplateCreateArgs>(
    args: Prisma.SelectSubset<T, FeedbackTemplateCreateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many FeedbackTemplates.
   * @param {FeedbackTemplateCreateManyArgs} args - Arguments to create many FeedbackTemplates.
   * @example
   * // Create many FeedbackTemplates
   * const feedbackTemplate = await prisma.feedbackTemplate.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FeedbackTemplateCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackTemplateCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeedbackTemplates and returns the data saved in the database.
   * @param {FeedbackTemplateCreateManyAndReturnArgs} args - Arguments to create many FeedbackTemplates.
   * @example
   * // Create many FeedbackTemplates
   * const feedbackTemplate = await prisma.feedbackTemplate.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many FeedbackTemplates and only return the `id`
   * const feedbackTemplateWithIdOnly = await prisma.feedbackTemplate.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FeedbackTemplateCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      FeedbackTemplateCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a FeedbackTemplate.
   * @param {FeedbackTemplateDeleteArgs} args - Arguments to delete one FeedbackTemplate.
   * @example
   * // Delete one FeedbackTemplate
   * const FeedbackTemplate = await prisma.feedbackTemplate.delete({
   *   where: {
   *     // ... filter to delete one FeedbackTemplate
   *   }
   * })
   *
   */
  delete<T extends FeedbackTemplateDeleteArgs>(
    args: Prisma.SelectSubset<T, FeedbackTemplateDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one FeedbackTemplate.
   * @param {FeedbackTemplateUpdateArgs} args - Arguments to update one FeedbackTemplate.
   * @example
   * // Update one FeedbackTemplate
   * const feedbackTemplate = await prisma.feedbackTemplate.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FeedbackTemplateUpdateArgs>(
    args: Prisma.SelectSubset<T, FeedbackTemplateUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more FeedbackTemplates.
   * @param {FeedbackTemplateDeleteManyArgs} args - Arguments to filter FeedbackTemplates to delete.
   * @example
   * // Delete a few FeedbackTemplates
   * const { count } = await prisma.feedbackTemplate.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FeedbackTemplateDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackTemplateDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackTemplates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackTemplateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeedbackTemplates
   * const feedbackTemplate = await prisma.feedbackTemplate.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FeedbackTemplateUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FeedbackTemplateUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackTemplates and returns the data updated in the database.
   * @param {FeedbackTemplateUpdateManyAndReturnArgs} args - Arguments to update many FeedbackTemplates.
   * @example
   * // Update many FeedbackTemplates
   * const feedbackTemplate = await prisma.feedbackTemplate.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more FeedbackTemplates and only return the `id`
   * const feedbackTemplateWithIdOnly = await prisma.feedbackTemplate.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FeedbackTemplateUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      FeedbackTemplateUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one FeedbackTemplate.
   * @param {FeedbackTemplateUpsertArgs} args - Arguments to update or create a FeedbackTemplate.
   * @example
   * // Update or create a FeedbackTemplate
   * const feedbackTemplate = await prisma.feedbackTemplate.upsert({
   *   create: {
   *     // ... data to create a FeedbackTemplate
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeedbackTemplate we want to update
   *   }
   * })
   */
  upsert<T extends FeedbackTemplateUpsertArgs>(
    args: Prisma.SelectSubset<T, FeedbackTemplateUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of FeedbackTemplates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackTemplateCountArgs} args - Arguments to filter FeedbackTemplates to count.
   * @example
   * // Count the number of FeedbackTemplates
   * const count = await prisma.feedbackTemplate.count({
   *   where: {
   *     // ... the filter for the FeedbackTemplates we want to count
   *   }
   * })
   **/
  count<T extends FeedbackTemplateCountArgs>(
    args?: Prisma.Subset<T, FeedbackTemplateCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            FeedbackTemplateCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeedbackTemplate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FeedbackTemplateAggregateArgs>(
    args: Prisma.Subset<T, FeedbackTemplateAggregateArgs>
  ): Prisma.PrismaPromise<GetFeedbackTemplateAggregateType<T>>

  /**
   * Group by FeedbackTemplate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackTemplateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FeedbackTemplateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeedbackTemplateGroupByArgs['orderBy'] }
      : { orderBy?: FeedbackTemplateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      FeedbackTemplateGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetFeedbackTemplateGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackTemplate model
   */
  readonly fields: FeedbackTemplateFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for FeedbackTemplate.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeedbackTemplateClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  questions<T extends Prisma.FeedbackTemplate$questionsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeedbackTemplate$questionsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$FeedbackQuestionPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  campaigns<T extends Prisma.FeedbackTemplate$campaignsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeedbackTemplate$campaignsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$FeedbackCampaignPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the FeedbackTemplate model
 */
export interface FeedbackTemplateFieldRefs {
  readonly id: Prisma.FieldRef<'FeedbackTemplate', 'String'>
  readonly name: Prisma.FieldRef<'FeedbackTemplate', 'String'>
  readonly description: Prisma.FieldRef<'FeedbackTemplate', 'String'>
  readonly isDefault: Prisma.FieldRef<'FeedbackTemplate', 'Boolean'>
  readonly createdAt: Prisma.FieldRef<'FeedbackTemplate', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'FeedbackTemplate', 'DateTime'>
}

// Custom InputTypes
/**
 * FeedbackTemplate findUnique
 */
export type FeedbackTemplateFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackTemplate to fetch.
   */
  where: Prisma.FeedbackTemplateWhereUniqueInput
}

/**
 * FeedbackTemplate findUniqueOrThrow
 */
export type FeedbackTemplateFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackTemplate to fetch.
   */
  where: Prisma.FeedbackTemplateWhereUniqueInput
}

/**
 * FeedbackTemplate findFirst
 */
export type FeedbackTemplateFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackTemplate to fetch.
   */
  where?: Prisma.FeedbackTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackTemplates to fetch.
   */
  orderBy?:
    | Prisma.FeedbackTemplateOrderByWithRelationInput
    | Prisma.FeedbackTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FeedbackTemplates.
   */
  cursor?: Prisma.FeedbackTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FeedbackTemplates.
   */
  distinct?:
    | Prisma.FeedbackTemplateScalarFieldEnum
    | Prisma.FeedbackTemplateScalarFieldEnum[]
}

/**
 * FeedbackTemplate findFirstOrThrow
 */
export type FeedbackTemplateFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackTemplate to fetch.
   */
  where?: Prisma.FeedbackTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackTemplates to fetch.
   */
  orderBy?:
    | Prisma.FeedbackTemplateOrderByWithRelationInput
    | Prisma.FeedbackTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FeedbackTemplates.
   */
  cursor?: Prisma.FeedbackTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FeedbackTemplates.
   */
  distinct?:
    | Prisma.FeedbackTemplateScalarFieldEnum
    | Prisma.FeedbackTemplateScalarFieldEnum[]
}

/**
 * FeedbackTemplate findMany
 */
export type FeedbackTemplateFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackTemplates to fetch.
   */
  where?: Prisma.FeedbackTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackTemplates to fetch.
   */
  orderBy?:
    | Prisma.FeedbackTemplateOrderByWithRelationInput
    | Prisma.FeedbackTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing FeedbackTemplates.
   */
  cursor?: Prisma.FeedbackTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackTemplates.
   */
  skip?: number
  distinct?:
    | Prisma.FeedbackTemplateScalarFieldEnum
    | Prisma.FeedbackTemplateScalarFieldEnum[]
}

/**
 * FeedbackTemplate create
 */
export type FeedbackTemplateCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * The data needed to create a FeedbackTemplate.
   */
  data: Prisma.XOR<
    Prisma.FeedbackTemplateCreateInput,
    Prisma.FeedbackTemplateUncheckedCreateInput
  >
}

/**
 * FeedbackTemplate createMany
 */
export type FeedbackTemplateCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many FeedbackTemplates.
   */
  data:
    | Prisma.FeedbackTemplateCreateManyInput
    | Prisma.FeedbackTemplateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeedbackTemplate createManyAndReturn
 */
export type FeedbackTemplateCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * The data used to create many FeedbackTemplates.
   */
  data:
    | Prisma.FeedbackTemplateCreateManyInput
    | Prisma.FeedbackTemplateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeedbackTemplate update
 */
export type FeedbackTemplateUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * The data needed to update a FeedbackTemplate.
   */
  data: Prisma.XOR<
    Prisma.FeedbackTemplateUpdateInput,
    Prisma.FeedbackTemplateUncheckedUpdateInput
  >
  /**
   * Choose, which FeedbackTemplate to update.
   */
  where: Prisma.FeedbackTemplateWhereUniqueInput
}

/**
 * FeedbackTemplate updateMany
 */
export type FeedbackTemplateUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update FeedbackTemplates.
   */
  data: Prisma.XOR<
    Prisma.FeedbackTemplateUpdateManyMutationInput,
    Prisma.FeedbackTemplateUncheckedUpdateManyInput
  >
  /**
   * Filter which FeedbackTemplates to update
   */
  where?: Prisma.FeedbackTemplateWhereInput
  /**
   * Limit how many FeedbackTemplates to update.
   */
  limit?: number
}

/**
 * FeedbackTemplate updateManyAndReturn
 */
export type FeedbackTemplateUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * The data used to update FeedbackTemplates.
   */
  data: Prisma.XOR<
    Prisma.FeedbackTemplateUpdateManyMutationInput,
    Prisma.FeedbackTemplateUncheckedUpdateManyInput
  >
  /**
   * Filter which FeedbackTemplates to update
   */
  where?: Prisma.FeedbackTemplateWhereInput
  /**
   * Limit how many FeedbackTemplates to update.
   */
  limit?: number
}

/**
 * FeedbackTemplate upsert
 */
export type FeedbackTemplateUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * The filter to search for the FeedbackTemplate to update in case it exists.
   */
  where: Prisma.FeedbackTemplateWhereUniqueInput
  /**
   * In case the FeedbackTemplate found by the `where` argument doesn't exist, create a new FeedbackTemplate with this data.
   */
  create: Prisma.XOR<
    Prisma.FeedbackTemplateCreateInput,
    Prisma.FeedbackTemplateUncheckedCreateInput
  >
  /**
   * In case the FeedbackTemplate was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.FeedbackTemplateUpdateInput,
    Prisma.FeedbackTemplateUncheckedUpdateInput
  >
}

/**
 * FeedbackTemplate delete
 */
export type FeedbackTemplateDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  /**
   * Filter which FeedbackTemplate to delete.
   */
  where: Prisma.FeedbackTemplateWhereUniqueInput
}

/**
 * FeedbackTemplate deleteMany
 */
export type FeedbackTemplateDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FeedbackTemplates to delete
   */
  where?: Prisma.FeedbackTemplateWhereInput
  /**
   * Limit how many FeedbackTemplates to delete.
   */
  limit?: number
}

/**
 * FeedbackTemplate.questions
 */
export type FeedbackTemplate$questionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackQuestion
   */
  select?: Prisma.FeedbackQuestionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackQuestion
   */
  omit?: Prisma.FeedbackQuestionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackQuestionInclude<ExtArgs> | null
  where?: Prisma.FeedbackQuestionWhereInput
  orderBy?:
    | Prisma.FeedbackQuestionOrderByWithRelationInput
    | Prisma.FeedbackQuestionOrderByWithRelationInput[]
  cursor?: Prisma.FeedbackQuestionWhereUniqueInput
  take?: number
  skip?: number
  distinct?:
    | Prisma.FeedbackQuestionScalarFieldEnum
    | Prisma.FeedbackQuestionScalarFieldEnum[]
}

/**
 * FeedbackTemplate.campaigns
 */
export type FeedbackTemplate$campaignsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  where?: Prisma.FeedbackCampaignWhereInput
  orderBy?:
    | Prisma.FeedbackCampaignOrderByWithRelationInput
    | Prisma.FeedbackCampaignOrderByWithRelationInput[]
  cursor?: Prisma.FeedbackCampaignWhereUniqueInput
  take?: number
  skip?: number
  distinct?:
    | Prisma.FeedbackCampaignScalarFieldEnum
    | Prisma.FeedbackCampaignScalarFieldEnum[]
}

/**
 * FeedbackTemplate without action
 */
export type FeedbackTemplateDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
}
