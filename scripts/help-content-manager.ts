#!/usr/bin/env bun

/**
 * Help Content Manager
 *
 * This script helps manage help content by:
 * - Listing all available help topics
 * - Validating help content
 * - Generating help content index
 * - Clearing cache for development
 */

import { readdirSync, readFileSync, writeFileSync, statSync } from 'fs'
import { join } from 'path'
import {
  getAllHelpContent,
  getHelpCategories,
} from '../src/lib/help-content-loader'

const helpDir = join(process.cwd(), 'help')

/**
 * Recursively find all markdown files in a directory
 */
function findMarkdownFiles(
  dir: string,
  relativePath = ''
): Array<{ filePath: string; relativePath: string }> {
  const files: Array<{ filePath: string; relativePath: string }> = []

  try {
    const items = readdirSync(dir)

    for (const item of items) {
      const itemPath = join(dir, item)
      const itemRelativePath = relativePath ? join(relativePath, item) : item
      const stat = statSync(itemPath)

      if (stat.isDirectory()) {
        // Recursively search subdirectories
        files.push(...findMarkdownFiles(itemPath, itemRelativePath))
      } else if (item.endsWith('.md') && item !== 'README.md') {
        files.push({ filePath: itemPath, relativePath: itemRelativePath })
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Could not read directory ${dir}:`, error)
  }

  return files
}

function listHelpTopics() {
  console.log('üìö Available Help Topics:\n')

  try {
    const markdownFiles = findMarkdownFiles(helpDir)

    if (markdownFiles.length === 0) {
      console.log('No help topics found in the help directory.')
      return
    }

    const content = getAllHelpContent()
    const categories = getHelpCategories()

    console.log(`Total topics: ${markdownFiles.length}`)
    console.log(`Categories: ${categories.join(', ')}\n`)

    // Group by category
    categories.forEach(category => {
      console.log(`## ${category}`)
      const categoryContent = content.filter(item => item.category === category)

      categoryContent.forEach(item => {
        // Find the file for this content item
        const fileInfo = markdownFiles.find(f =>
          f.relativePath.includes(`${item.id}.md`)
        )
        if (fileInfo) {
          const stats = readFileSync(fileInfo.filePath, 'utf-8')
          const lineCount = stats.split('\n').length
          const wordCount = stats.split(/\s+/).length

          console.log(`  ‚Ä¢ ${item.title} (${item.id})`)
          console.log(
            `    üìÑ ${fileInfo.relativePath} - ${lineCount} lines, ${wordCount} words`
          )
        } else {
          console.log(`  ‚Ä¢ ${item.title} (${item.id}) - file not found`)
        }
      })
      console.log()
    })

    // List files without metadata
    const contentIds = new Set(content.map(item => item.id))
    const orphanFiles = markdownFiles.filter(file => {
      const id = file.relativePath.replace('.md', '').split('/').pop()
      return !contentIds.has(id!)
    })

    if (orphanFiles.length > 0) {
      console.log('‚ö†Ô∏è  Files without metadata:')
      orphanFiles.forEach(file => {
        console.log(`  ‚Ä¢ ${file.relativePath}`)
      })
      console.log()
    }
  } catch (error) {
    console.error('Error listing help topics:', error)
  }
}

function validateHelpContent() {
  console.log('üîç Validating Help Content:\n')

  try {
    const content = getAllHelpContent()
    let hasErrors = false

    content.forEach(item => {
      console.log(`Checking: ${item.title} (${item.id})`)

      // Check for required fields
      if (!item.title) {
        console.log(`  ‚ùå Missing title`)
        hasErrors = true
      }

      if (!item.content) {
        console.log(`  ‚ùå Missing content`)
        hasErrors = true
      }

      if (!item.category) {
        console.log(`  ‚ö†Ô∏è  Missing category`)
      }

      // Check content length
      if (item.content.length < 50) {
        console.log(
          `  ‚ö†Ô∏è  Content seems too short (${item.content.length} chars)`
        )
      }

      // Check for markdown headers
      if (!item.content.includes('#')) {
        console.log(`  ‚ö†Ô∏è  No markdown headers found`)
      }

      console.log(`  ‚úÖ Valid`)
    })

    if (!hasErrors) {
      console.log('\nüéâ All help content is valid!')
    } else {
      console.log('\n‚ùå Some help content has errors. Please fix them.')
    }
  } catch (error) {
    console.error('Error validating help content:', error)
  }
}

function generateHelpIndex() {
  console.log('üìã Generating Help Content Index:\n')

  try {
    const content = getAllHelpContent()
    const categories = getHelpCategories()

    const indexContent = `# Help Content Index

This file is automatically generated. Do not edit manually.

## Overview

- **Total Topics**: ${content.length}
- **Categories**: ${categories.length}
- **Last Updated**: ${new Date().toISOString()}

## Categories

${categories
  .map(category => {
    const categoryContent = content.filter(item => item.category === category)
    return `### ${category} (${categoryContent.length} topics)

${categoryContent.map(item => `- **${item.title}** (\`${item.id}\`)`).join('\n')}`
  })
  .join('\n\n')}

## All Topics

${content.map(item => `- **${item.title}** (\`${item.id}\`) - ${item.category || 'Uncategorized'}`).join('\n')}

## Usage

To use help content in your components:

\`\`\`tsx
import { HelpIcon } from '@/components/help-icon'

<HelpIcon helpId="${content[0]?.id || 'example'}" />
\`\`\`

To add new help content:

1. Create a new markdown file in the appropriate category folder under \`help/\`
   - \`help/tasks-projects/\` - Task and project related help
   - \`help/people-teams/\` - People and team management help  
   - \`help/meetings-communication/\` - Meeting and communication help
   - \`help/integrations/\` - Third-party integration help
   - \`help/feedback-development/\` - Feedback and development help
2. Add front matter with id, title, and category to the markdown file
3. Run \`bun scripts/help-content-manager.ts validate\` to check
4. Run \`bun scripts/generate-help-content.ts\` to regenerate TypeScript files
`

    const indexPath = join(process.cwd(), 'help', 'README.md')
    writeFileSync(indexPath, indexContent)

    console.log(`‚úÖ Help index generated: ${indexPath}`)
    console.log(
      `üìä ${content.length} topics indexed across ${categories.length} categories`
    )
  } catch (error) {
    console.error('Error generating help index:', error)
  }
}

function clearCache() {
  console.log('üóëÔ∏è  Help content is now loaded at build time.')
  console.log('‚úÖ No cache to clear - content is statically imported')
}

function showUsage() {
  console.log(`
Help Content Manager

Usage: bun scripts/help-content-manager.ts <command>

Commands:
  list      List all available help topics
  validate  Validate help content for errors
  index     Generate help content index
  clear     Clear help content cache
  help      Show this help message

Examples:
  bun scripts/help-content-manager.ts list
  bun scripts/help-content-manager.ts validate
  bun scripts/help-content-manager.ts index
`)
}

// Main execution
const command = process.argv[2] || 'help'

switch (command) {
  case 'list':
    listHelpTopics()
    break
  case 'validate':
    validateHelpContent()
    break
  case 'index':
    generateHelpIndex()
    break
  case 'clear':
    clearCache()
    break
  case 'help':
  default:
    showUsage()
    break
}
