/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from '@prisma/client/runtime/client'
import type * as Prisma from '../models'
import { type PrismaClient } from './class'

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError =
  runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError =
  runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError =
  runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError =
  runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError =
  runtime.PrismaClientInitializationError
export type PrismaClientInitializationError =
  runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<
  T,
  F
>
export type Payload<
  T,
  F extends runtime.Operation = never,
> = runtime.Types.Public.Payload<T, F>
export type Result<
  T,
  A,
  F extends runtime.Operation,
> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
export const prismaVersion: PrismaVersion = {
  client: '6.17.1',
  engine: '272a37d34178c2894197e17273bf937f25acdeac',
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.DbNull,
  JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.JsonNull,
  AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
    secret: never
  ) => typeof runtime.objectEnumValues.instances.AnyNull,
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
  [P in K]: T[P]
}

export type Enumerable<T> = T | Array<T>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
}

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} & (T extends SelectAndInclude
  ? 'Please either choose `select` or `include`.'
  : T extends SelectAndOmit
    ? 'Please either choose `select` or `omit`.'
    : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} & K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never }

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object
  ? U extends object
    ? (Without<T, U> & U) | (Without<U, T> & T)
    : U
  : T

/**
 * Is T a Record?
 */
type IsObject<T extends any> =
  T extends Array<any>
    ? False
    : T extends Date
      ? False
      : T extends Uint8Array
        ? False
        : T extends BigInt
          ? False
          : T extends object
            ? True
            : False

/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<O extends object, K extends Key, strict extends Boolean> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1,
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
  [K in keyof O]: K extends keyof O1 ? O1[K] : O[K]
} & {}

type _Merge<U extends object> = IntersectOf<
  Overwrite<
    U,
    {
      [K in keyof U]-?: At<U, K>
    }
  >
>

type Key = string | number | symbol
type AtStrict<O extends object, K extends Key> = O[K & keyof O]
type AtLoose<O extends object, K extends Key> = O extends unknown
  ? AtStrict<O, K>
  : never
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
  1: AtStrict<O, K>
  0: AtLoose<O, K>
}[strict]

export type ComputeRaw<A extends any> = A extends Function
  ? A
  : {
      [K in keyof A]: A[K]
    } & {}

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K]
} & {}

type _Record<K extends keyof any, T> = {
  [P in K]: T
}

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
    ?
        | (K extends keyof O ? { [P in K]: O[P] } & O : O)
        | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
    : never
>

type _Strict<U, _U = U> = U extends unknown
  ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
  : never

export type Strict<U extends object> = ComputeRaw<_Strict<U>>
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
    ? 1
    : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object
  ? {
      [P in keyof T]: P extends keyof O ? O[P] : never
    }
  : never

type FieldPaths<T, U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>> =
  IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<
          UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never
        >
      : never
    : {} extends FieldPaths<T[K]>
      ? never
      : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<
  T,
  K extends Enumerable<keyof T> | keyof T,
> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}`
  ? never
  : T

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never
  ? never
  : FieldRef<Model, FieldType>

export const ModelName = {
  Organization: 'Organization',
  User: 'User',
  Team: 'Team',
  Person: 'Person',
  Initiative: 'Initiative',
  InitiativeOwner: 'InitiativeOwner',
  Objective: 'Objective',
  Task: 'Task',
  CheckIn: 'CheckIn',
  OneOnOne: 'OneOnOne',
  IDP: 'IDP',
  IDPGoal: 'IDPGoal',
  Feedback: 'Feedback',
  Metric: 'Metric',
  Tag: 'Tag',
  TagMap: 'TagMap',
  OrganizationInvitation: 'OrganizationInvitation',
  Event: 'Event',
  UserJiraCredentials: 'UserJiraCredentials',
  PersonJiraAccount: 'PersonJiraAccount',
  UserGithubCredentials: 'UserGithubCredentials',
  PersonGithubAccount: 'PersonGithubAccount',
  FeedbackCampaign: 'FeedbackCampaign',
  FeedbackResponse: 'FeedbackResponse',
  FeedbackTemplate: 'FeedbackTemplate',
  FeedbackQuestion: 'FeedbackQuestion',
  Meeting: 'Meeting',
  MeetingParticipant: 'MeetingParticipant',
  MeetingInstance: 'MeetingInstance',
  MeetingInstanceParticipant: 'MeetingInstanceParticipant',
  PersonSynopsis: 'PersonSynopsis',
  EntityLink: 'EntityLink',
  JobRole: 'JobRole',
  JobLevel: 'JobLevel',
  JobDomain: 'JobDomain',
  PasswordResetToken: 'PasswordResetToken',
  Notification: 'Notification',
  NotificationResponse: 'NotificationResponse',
  CronJobExecution: 'CronJobExecution',
  Report: 'Report',
  ReportInstance: 'ReportInstance',
  Note: 'Note',
  FileAttachment: 'FileAttachment',
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]

export interface TypeMapCb<GlobalOmitOptions = {}>
  extends runtime.Types.Utils.Fn<
    { extArgs: runtime.Types.Extensions.InternalArgs },
    runtime.Types.Utils.Record<string, any>
  > {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps:
      | 'organization'
      | 'user'
      | 'team'
      | 'person'
      | 'initiative'
      | 'initiativeOwner'
      | 'objective'
      | 'task'
      | 'checkIn'
      | 'oneOnOne'
      | 'iDP'
      | 'iDPGoal'
      | 'feedback'
      | 'metric'
      | 'tag'
      | 'tagMap'
      | 'organizationInvitation'
      | 'event'
      | 'userJiraCredentials'
      | 'personJiraAccount'
      | 'userGithubCredentials'
      | 'personGithubAccount'
      | 'feedbackCampaign'
      | 'feedbackResponse'
      | 'feedbackTemplate'
      | 'feedbackQuestion'
      | 'meeting'
      | 'meetingParticipant'
      | 'meetingInstance'
      | 'meetingInstanceParticipant'
      | 'personSynopsis'
      | 'entityLink'
      | 'jobRole'
      | 'jobLevel'
      | 'jobDomain'
      | 'passwordResetToken'
      | 'notification'
      | 'notificationResponse'
      | 'cronJobExecution'
      | 'report'
      | 'reportInstance'
      | 'note'
      | 'fileAttachment'
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Organization: {
      payload: Prisma.$OrganizationPayload<ExtArgs>
      fields: Prisma.OrganizationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findFirst: {
          args: Prisma.OrganizationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findMany: {
          args: Prisma.OrganizationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        create: {
          args: Prisma.OrganizationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        createMany: {
          args: Prisma.OrganizationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        delete: {
          args: Prisma.OrganizationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        update: {
          args: Prisma.OrganizationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        aggregate: {
          args: Prisma.OrganizationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganization>
        }
        groupBy: {
          args: Prisma.OrganizationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.OrganizationCountAggregateOutputType>
            | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType>
            | number
        }
      }
    }
    Team: {
      payload: Prisma.$TeamPayload<ExtArgs>
      fields: Prisma.TeamFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TeamFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>
        }
        findFirst: {
          args: Prisma.TeamFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>
        }
        findMany: {
          args: Prisma.TeamFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>[]
        }
        create: {
          args: Prisma.TeamCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>
        }
        createMany: {
          args: Prisma.TeamCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>[]
        }
        delete: {
          args: Prisma.TeamDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>
        }
        update: {
          args: Prisma.TeamUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>
        }
        deleteMany: {
          args: Prisma.TeamDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TeamUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>[]
        }
        upsert: {
          args: Prisma.TeamUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TeamPayload>
        }
        aggregate: {
          args: Prisma.TeamAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeam>
        }
        groupBy: {
          args: Prisma.TeamGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeamGroupByOutputType>[]
        }
        count: {
          args: Prisma.TeamCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.TeamCountAggregateOutputType>
            | number
        }
      }
    }
    Person: {
      payload: Prisma.$PersonPayload<ExtArgs>
      fields: Prisma.PersonFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PersonFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>
        }
        findFirst: {
          args: Prisma.PersonFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>
        }
        findMany: {
          args: Prisma.PersonFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>[]
        }
        create: {
          args: Prisma.PersonCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>
        }
        createMany: {
          args: Prisma.PersonCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PersonCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>[]
        }
        delete: {
          args: Prisma.PersonDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>
        }
        update: {
          args: Prisma.PersonUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>
        }
        deleteMany: {
          args: Prisma.PersonDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PersonUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PersonUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>[]
        }
        upsert: {
          args: Prisma.PersonUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonPayload>
        }
        aggregate: {
          args: Prisma.PersonAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePerson>
        }
        groupBy: {
          args: Prisma.PersonGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PersonGroupByOutputType>[]
        }
        count: {
          args: Prisma.PersonCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.PersonCountAggregateOutputType>
            | number
        }
      }
    }
    Initiative: {
      payload: Prisma.$InitiativePayload<ExtArgs>
      fields: Prisma.InitiativeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InitiativeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InitiativeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>
        }
        findFirst: {
          args: Prisma.InitiativeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InitiativeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>
        }
        findMany: {
          args: Prisma.InitiativeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>[]
        }
        create: {
          args: Prisma.InitiativeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>
        }
        createMany: {
          args: Prisma.InitiativeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InitiativeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>[]
        }
        delete: {
          args: Prisma.InitiativeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>
        }
        update: {
          args: Prisma.InitiativeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>
        }
        deleteMany: {
          args: Prisma.InitiativeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InitiativeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InitiativeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>[]
        }
        upsert: {
          args: Prisma.InitiativeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativePayload>
        }
        aggregate: {
          args: Prisma.InitiativeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInitiative>
        }
        groupBy: {
          args: Prisma.InitiativeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InitiativeGroupByOutputType>[]
        }
        count: {
          args: Prisma.InitiativeCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.InitiativeCountAggregateOutputType>
            | number
        }
      }
    }
    InitiativeOwner: {
      payload: Prisma.$InitiativeOwnerPayload<ExtArgs>
      fields: Prisma.InitiativeOwnerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.InitiativeOwnerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.InitiativeOwnerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>
        }
        findFirst: {
          args: Prisma.InitiativeOwnerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.InitiativeOwnerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>
        }
        findMany: {
          args: Prisma.InitiativeOwnerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>[]
        }
        create: {
          args: Prisma.InitiativeOwnerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>
        }
        createMany: {
          args: Prisma.InitiativeOwnerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.InitiativeOwnerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>[]
        }
        delete: {
          args: Prisma.InitiativeOwnerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>
        }
        update: {
          args: Prisma.InitiativeOwnerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>
        }
        deleteMany: {
          args: Prisma.InitiativeOwnerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.InitiativeOwnerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.InitiativeOwnerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>[]
        }
        upsert: {
          args: Prisma.InitiativeOwnerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InitiativeOwnerPayload>
        }
        aggregate: {
          args: Prisma.InitiativeOwnerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateInitiativeOwner>
        }
        groupBy: {
          args: Prisma.InitiativeOwnerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.InitiativeOwnerGroupByOutputType>[]
        }
        count: {
          args: Prisma.InitiativeOwnerCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.InitiativeOwnerCountAggregateOutputType>
            | number
        }
      }
    }
    Objective: {
      payload: Prisma.$ObjectivePayload<ExtArgs>
      fields: Prisma.ObjectiveFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ObjectiveFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ObjectiveFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>
        }
        findFirst: {
          args: Prisma.ObjectiveFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ObjectiveFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>
        }
        findMany: {
          args: Prisma.ObjectiveFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>[]
        }
        create: {
          args: Prisma.ObjectiveCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>
        }
        createMany: {
          args: Prisma.ObjectiveCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ObjectiveCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>[]
        }
        delete: {
          args: Prisma.ObjectiveDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>
        }
        update: {
          args: Prisma.ObjectiveUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>
        }
        deleteMany: {
          args: Prisma.ObjectiveDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ObjectiveUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ObjectiveUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>[]
        }
        upsert: {
          args: Prisma.ObjectiveUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ObjectivePayload>
        }
        aggregate: {
          args: Prisma.ObjectiveAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateObjective>
        }
        groupBy: {
          args: Prisma.ObjectiveGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ObjectiveGroupByOutputType>[]
        }
        count: {
          args: Prisma.ObjectiveCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.ObjectiveCountAggregateOutputType>
            | number
        }
      }
    }
    Task: {
      payload: Prisma.$TaskPayload<ExtArgs>
      fields: Prisma.TaskFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TaskFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        findFirst: {
          args: Prisma.TaskFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        findMany: {
          args: Prisma.TaskFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        create: {
          args: Prisma.TaskCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        createMany: {
          args: Prisma.TaskCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        delete: {
          args: Prisma.TaskDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        update: {
          args: Prisma.TaskUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        deleteMany: {
          args: Prisma.TaskDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TaskUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        upsert: {
          args: Prisma.TaskUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        aggregate: {
          args: Prisma.TaskAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTask>
        }
        groupBy: {
          args: Prisma.TaskGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TaskGroupByOutputType>[]
        }
        count: {
          args: Prisma.TaskCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.TaskCountAggregateOutputType>
            | number
        }
      }
    }
    CheckIn: {
      payload: Prisma.$CheckInPayload<ExtArgs>
      fields: Prisma.CheckInFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CheckInFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CheckInFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>
        }
        findFirst: {
          args: Prisma.CheckInFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CheckInFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>
        }
        findMany: {
          args: Prisma.CheckInFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>[]
        }
        create: {
          args: Prisma.CheckInCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>
        }
        createMany: {
          args: Prisma.CheckInCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CheckInCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>[]
        }
        delete: {
          args: Prisma.CheckInDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>
        }
        update: {
          args: Prisma.CheckInUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>
        }
        deleteMany: {
          args: Prisma.CheckInDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CheckInUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CheckInUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>[]
        }
        upsert: {
          args: Prisma.CheckInUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CheckInPayload>
        }
        aggregate: {
          args: Prisma.CheckInAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCheckIn>
        }
        groupBy: {
          args: Prisma.CheckInGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CheckInGroupByOutputType>[]
        }
        count: {
          args: Prisma.CheckInCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.CheckInCountAggregateOutputType>
            | number
        }
      }
    }
    OneOnOne: {
      payload: Prisma.$OneOnOnePayload<ExtArgs>
      fields: Prisma.OneOnOneFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OneOnOneFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OneOnOneFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>
        }
        findFirst: {
          args: Prisma.OneOnOneFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OneOnOneFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>
        }
        findMany: {
          args: Prisma.OneOnOneFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>[]
        }
        create: {
          args: Prisma.OneOnOneCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>
        }
        createMany: {
          args: Prisma.OneOnOneCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OneOnOneCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>[]
        }
        delete: {
          args: Prisma.OneOnOneDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>
        }
        update: {
          args: Prisma.OneOnOneUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>
        }
        deleteMany: {
          args: Prisma.OneOnOneDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OneOnOneUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OneOnOneUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>[]
        }
        upsert: {
          args: Prisma.OneOnOneUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OneOnOnePayload>
        }
        aggregate: {
          args: Prisma.OneOnOneAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOneOnOne>
        }
        groupBy: {
          args: Prisma.OneOnOneGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OneOnOneGroupByOutputType>[]
        }
        count: {
          args: Prisma.OneOnOneCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.OneOnOneCountAggregateOutputType>
            | number
        }
      }
    }
    IDP: {
      payload: Prisma.$IDPPayload<ExtArgs>
      fields: Prisma.IDPFieldRefs
      operations: {
        findUnique: {
          args: Prisma.IDPFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.IDPFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>
        }
        findFirst: {
          args: Prisma.IDPFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.IDPFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>
        }
        findMany: {
          args: Prisma.IDPFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>[]
        }
        create: {
          args: Prisma.IDPCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>
        }
        createMany: {
          args: Prisma.IDPCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.IDPCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>[]
        }
        delete: {
          args: Prisma.IDPDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>
        }
        update: {
          args: Prisma.IDPUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>
        }
        deleteMany: {
          args: Prisma.IDPDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.IDPUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.IDPUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>[]
        }
        upsert: {
          args: Prisma.IDPUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPPayload>
        }
        aggregate: {
          args: Prisma.IDPAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateIDP>
        }
        groupBy: {
          args: Prisma.IDPGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.IDPGroupByOutputType>[]
        }
        count: {
          args: Prisma.IDPCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.IDPCountAggregateOutputType>
            | number
        }
      }
    }
    IDPGoal: {
      payload: Prisma.$IDPGoalPayload<ExtArgs>
      fields: Prisma.IDPGoalFieldRefs
      operations: {
        findUnique: {
          args: Prisma.IDPGoalFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.IDPGoalFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>
        }
        findFirst: {
          args: Prisma.IDPGoalFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.IDPGoalFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>
        }
        findMany: {
          args: Prisma.IDPGoalFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>[]
        }
        create: {
          args: Prisma.IDPGoalCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>
        }
        createMany: {
          args: Prisma.IDPGoalCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.IDPGoalCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>[]
        }
        delete: {
          args: Prisma.IDPGoalDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>
        }
        update: {
          args: Prisma.IDPGoalUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>
        }
        deleteMany: {
          args: Prisma.IDPGoalDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.IDPGoalUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.IDPGoalUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>[]
        }
        upsert: {
          args: Prisma.IDPGoalUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IDPGoalPayload>
        }
        aggregate: {
          args: Prisma.IDPGoalAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateIDPGoal>
        }
        groupBy: {
          args: Prisma.IDPGoalGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.IDPGoalGroupByOutputType>[]
        }
        count: {
          args: Prisma.IDPGoalCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.IDPGoalCountAggregateOutputType>
            | number
        }
      }
    }
    Feedback: {
      payload: Prisma.$FeedbackPayload<ExtArgs>
      fields: Prisma.FeedbackFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>
        }
        findFirst: {
          args: Prisma.FeedbackFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>
        }
        findMany: {
          args: Prisma.FeedbackFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
        }
        create: {
          args: Prisma.FeedbackCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>
        }
        createMany: {
          args: Prisma.FeedbackCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
        }
        delete: {
          args: Prisma.FeedbackDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>
        }
        update: {
          args: Prisma.FeedbackUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>
        }
        deleteMany: {
          args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
        }
        upsert: {
          args: Prisma.FeedbackUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackPayload>
        }
        aggregate: {
          args: Prisma.FeedbackAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeedback>
        }
        groupBy: {
          args: Prisma.FeedbackGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeedbackGroupByOutputType>[]
        }
        count: {
          args: Prisma.FeedbackCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.FeedbackCountAggregateOutputType>
            | number
        }
      }
    }
    Metric: {
      payload: Prisma.$MetricPayload<ExtArgs>
      fields: Prisma.MetricFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MetricFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MetricFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>
        }
        findFirst: {
          args: Prisma.MetricFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MetricFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>
        }
        findMany: {
          args: Prisma.MetricFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>[]
        }
        create: {
          args: Prisma.MetricCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>
        }
        createMany: {
          args: Prisma.MetricCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MetricCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>[]
        }
        delete: {
          args: Prisma.MetricDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>
        }
        update: {
          args: Prisma.MetricUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>
        }
        deleteMany: {
          args: Prisma.MetricDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MetricUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MetricUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>[]
        }
        upsert: {
          args: Prisma.MetricUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MetricPayload>
        }
        aggregate: {
          args: Prisma.MetricAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMetric>
        }
        groupBy: {
          args: Prisma.MetricGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MetricGroupByOutputType>[]
        }
        count: {
          args: Prisma.MetricCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.MetricCountAggregateOutputType>
            | number
        }
      }
    }
    Tag: {
      payload: Prisma.$TagPayload<ExtArgs>
      fields: Prisma.TagFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TagFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        findFirst: {
          args: Prisma.TagFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        findMany: {
          args: Prisma.TagFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>[]
        }
        create: {
          args: Prisma.TagCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        createMany: {
          args: Prisma.TagCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>[]
        }
        delete: {
          args: Prisma.TagDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        update: {
          args: Prisma.TagUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        deleteMany: {
          args: Prisma.TagDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TagUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TagUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>[]
        }
        upsert: {
          args: Prisma.TagUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagPayload>
        }
        aggregate: {
          args: Prisma.TagAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTag>
        }
        groupBy: {
          args: Prisma.TagGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TagGroupByOutputType>[]
        }
        count: {
          args: Prisma.TagCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.TagCountAggregateOutputType>
            | number
        }
      }
    }
    TagMap: {
      payload: Prisma.$TagMapPayload<ExtArgs>
      fields: Prisma.TagMapFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TagMapFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TagMapFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>
        }
        findFirst: {
          args: Prisma.TagMapFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TagMapFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>
        }
        findMany: {
          args: Prisma.TagMapFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>[]
        }
        create: {
          args: Prisma.TagMapCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>
        }
        createMany: {
          args: Prisma.TagMapCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TagMapCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>[]
        }
        delete: {
          args: Prisma.TagMapDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>
        }
        update: {
          args: Prisma.TagMapUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>
        }
        deleteMany: {
          args: Prisma.TagMapDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TagMapUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TagMapUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>[]
        }
        upsert: {
          args: Prisma.TagMapUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TagMapPayload>
        }
        aggregate: {
          args: Prisma.TagMapAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTagMap>
        }
        groupBy: {
          args: Prisma.TagMapGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TagMapGroupByOutputType>[]
        }
        count: {
          args: Prisma.TagMapCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.TagMapCountAggregateOutputType>
            | number
        }
      }
    }
    OrganizationInvitation: {
      payload: Prisma.$OrganizationInvitationPayload<ExtArgs>
      fields: Prisma.OrganizationInvitationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationInvitationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationInvitationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
        }
        findFirst: {
          args: Prisma.OrganizationInvitationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationInvitationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
        }
        findMany: {
          args: Prisma.OrganizationInvitationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>[]
        }
        create: {
          args: Prisma.OrganizationInvitationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
        }
        createMany: {
          args: Prisma.OrganizationInvitationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationInvitationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>[]
        }
        delete: {
          args: Prisma.OrganizationInvitationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
        }
        update: {
          args: Prisma.OrganizationInvitationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationInvitationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationInvitationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationInvitationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationInvitationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationInvitationPayload>
        }
        aggregate: {
          args: Prisma.OrganizationInvitationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganizationInvitation>
        }
        groupBy: {
          args: Prisma.OrganizationInvitationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationInvitationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationInvitationCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.OrganizationInvitationCountAggregateOutputType>
            | number
        }
      }
    }
    Event: {
      payload: Prisma.$EventPayload<ExtArgs>
      fields: Prisma.EventFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EventFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        findFirst: {
          args: Prisma.EventFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        findMany: {
          args: Prisma.EventFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>[]
        }
        create: {
          args: Prisma.EventCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        createMany: {
          args: Prisma.EventCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>[]
        }
        delete: {
          args: Prisma.EventDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        update: {
          args: Prisma.EventUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        deleteMany: {
          args: Prisma.EventDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EventUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>[]
        }
        upsert: {
          args: Prisma.EventUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventPayload>
        }
        aggregate: {
          args: Prisma.EventAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEvent>
        }
        groupBy: {
          args: Prisma.EventGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EventGroupByOutputType>[]
        }
        count: {
          args: Prisma.EventCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.EventCountAggregateOutputType>
            | number
        }
      }
    }
    UserJiraCredentials: {
      payload: Prisma.$UserJiraCredentialsPayload<ExtArgs>
      fields: Prisma.UserJiraCredentialsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserJiraCredentialsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserJiraCredentialsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>
        }
        findFirst: {
          args: Prisma.UserJiraCredentialsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserJiraCredentialsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>
        }
        findMany: {
          args: Prisma.UserJiraCredentialsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>[]
        }
        create: {
          args: Prisma.UserJiraCredentialsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>
        }
        createMany: {
          args: Prisma.UserJiraCredentialsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserJiraCredentialsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>[]
        }
        delete: {
          args: Prisma.UserJiraCredentialsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>
        }
        update: {
          args: Prisma.UserJiraCredentialsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>
        }
        deleteMany: {
          args: Prisma.UserJiraCredentialsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserJiraCredentialsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserJiraCredentialsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>[]
        }
        upsert: {
          args: Prisma.UserJiraCredentialsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserJiraCredentialsPayload>
        }
        aggregate: {
          args: Prisma.UserJiraCredentialsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserJiraCredentials>
        }
        groupBy: {
          args: Prisma.UserJiraCredentialsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserJiraCredentialsGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserJiraCredentialsCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.UserJiraCredentialsCountAggregateOutputType>
            | number
        }
      }
    }
    PersonJiraAccount: {
      payload: Prisma.$PersonJiraAccountPayload<ExtArgs>
      fields: Prisma.PersonJiraAccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PersonJiraAccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PersonJiraAccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>
        }
        findFirst: {
          args: Prisma.PersonJiraAccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PersonJiraAccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>
        }
        findMany: {
          args: Prisma.PersonJiraAccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>[]
        }
        create: {
          args: Prisma.PersonJiraAccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>
        }
        createMany: {
          args: Prisma.PersonJiraAccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PersonJiraAccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>[]
        }
        delete: {
          args: Prisma.PersonJiraAccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>
        }
        update: {
          args: Prisma.PersonJiraAccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>
        }
        deleteMany: {
          args: Prisma.PersonJiraAccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PersonJiraAccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PersonJiraAccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>[]
        }
        upsert: {
          args: Prisma.PersonJiraAccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonJiraAccountPayload>
        }
        aggregate: {
          args: Prisma.PersonJiraAccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePersonJiraAccount>
        }
        groupBy: {
          args: Prisma.PersonJiraAccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PersonJiraAccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.PersonJiraAccountCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.PersonJiraAccountCountAggregateOutputType>
            | number
        }
      }
    }
    UserGithubCredentials: {
      payload: Prisma.$UserGithubCredentialsPayload<ExtArgs>
      fields: Prisma.UserGithubCredentialsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserGithubCredentialsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserGithubCredentialsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>
        }
        findFirst: {
          args: Prisma.UserGithubCredentialsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserGithubCredentialsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>
        }
        findMany: {
          args: Prisma.UserGithubCredentialsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>[]
        }
        create: {
          args: Prisma.UserGithubCredentialsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>
        }
        createMany: {
          args: Prisma.UserGithubCredentialsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserGithubCredentialsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>[]
        }
        delete: {
          args: Prisma.UserGithubCredentialsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>
        }
        update: {
          args: Prisma.UserGithubCredentialsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>
        }
        deleteMany: {
          args: Prisma.UserGithubCredentialsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserGithubCredentialsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserGithubCredentialsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>[]
        }
        upsert: {
          args: Prisma.UserGithubCredentialsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserGithubCredentialsPayload>
        }
        aggregate: {
          args: Prisma.UserGithubCredentialsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserGithubCredentials>
        }
        groupBy: {
          args: Prisma.UserGithubCredentialsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGithubCredentialsGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserGithubCredentialsCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.UserGithubCredentialsCountAggregateOutputType>
            | number
        }
      }
    }
    PersonGithubAccount: {
      payload: Prisma.$PersonGithubAccountPayload<ExtArgs>
      fields: Prisma.PersonGithubAccountFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PersonGithubAccountFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PersonGithubAccountFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>
        }
        findFirst: {
          args: Prisma.PersonGithubAccountFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PersonGithubAccountFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>
        }
        findMany: {
          args: Prisma.PersonGithubAccountFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>[]
        }
        create: {
          args: Prisma.PersonGithubAccountCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>
        }
        createMany: {
          args: Prisma.PersonGithubAccountCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PersonGithubAccountCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>[]
        }
        delete: {
          args: Prisma.PersonGithubAccountDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>
        }
        update: {
          args: Prisma.PersonGithubAccountUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>
        }
        deleteMany: {
          args: Prisma.PersonGithubAccountDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PersonGithubAccountUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PersonGithubAccountUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>[]
        }
        upsert: {
          args: Prisma.PersonGithubAccountUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonGithubAccountPayload>
        }
        aggregate: {
          args: Prisma.PersonGithubAccountAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePersonGithubAccount>
        }
        groupBy: {
          args: Prisma.PersonGithubAccountGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PersonGithubAccountGroupByOutputType>[]
        }
        count: {
          args: Prisma.PersonGithubAccountCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.PersonGithubAccountCountAggregateOutputType>
            | number
        }
      }
    }
    FeedbackCampaign: {
      payload: Prisma.$FeedbackCampaignPayload<ExtArgs>
      fields: Prisma.FeedbackCampaignFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FeedbackCampaignFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FeedbackCampaignFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>
        }
        findFirst: {
          args: Prisma.FeedbackCampaignFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FeedbackCampaignFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>
        }
        findMany: {
          args: Prisma.FeedbackCampaignFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>[]
        }
        create: {
          args: Prisma.FeedbackCampaignCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>
        }
        createMany: {
          args: Prisma.FeedbackCampaignCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FeedbackCampaignCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>[]
        }
        delete: {
          args: Prisma.FeedbackCampaignDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>
        }
        update: {
          args: Prisma.FeedbackCampaignUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>
        }
        deleteMany: {
          args: Prisma.FeedbackCampaignDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FeedbackCampaignUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FeedbackCampaignUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>[]
        }
        upsert: {
          args: Prisma.FeedbackCampaignUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackCampaignPayload>
        }
        aggregate: {
          args: Prisma.FeedbackCampaignAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeedbackCampaign>
        }
        groupBy: {
          args: Prisma.FeedbackCampaignGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeedbackCampaignGroupByOutputType>[]
        }
        count: {
          args: Prisma.FeedbackCampaignCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.FeedbackCampaignCountAggregateOutputType>
            | number
        }
      }
    }
    FeedbackResponse: {
      payload: Prisma.$FeedbackResponsePayload<ExtArgs>
      fields: Prisma.FeedbackResponseFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FeedbackResponseFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FeedbackResponseFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>
        }
        findFirst: {
          args: Prisma.FeedbackResponseFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FeedbackResponseFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>
        }
        findMany: {
          args: Prisma.FeedbackResponseFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>[]
        }
        create: {
          args: Prisma.FeedbackResponseCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>
        }
        createMany: {
          args: Prisma.FeedbackResponseCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FeedbackResponseCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>[]
        }
        delete: {
          args: Prisma.FeedbackResponseDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>
        }
        update: {
          args: Prisma.FeedbackResponseUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>
        }
        deleteMany: {
          args: Prisma.FeedbackResponseDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FeedbackResponseUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FeedbackResponseUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>[]
        }
        upsert: {
          args: Prisma.FeedbackResponseUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackResponsePayload>
        }
        aggregate: {
          args: Prisma.FeedbackResponseAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeedbackResponse>
        }
        groupBy: {
          args: Prisma.FeedbackResponseGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeedbackResponseGroupByOutputType>[]
        }
        count: {
          args: Prisma.FeedbackResponseCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.FeedbackResponseCountAggregateOutputType>
            | number
        }
      }
    }
    FeedbackTemplate: {
      payload: Prisma.$FeedbackTemplatePayload<ExtArgs>
      fields: Prisma.FeedbackTemplateFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FeedbackTemplateFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FeedbackTemplateFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>
        }
        findFirst: {
          args: Prisma.FeedbackTemplateFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FeedbackTemplateFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>
        }
        findMany: {
          args: Prisma.FeedbackTemplateFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>[]
        }
        create: {
          args: Prisma.FeedbackTemplateCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>
        }
        createMany: {
          args: Prisma.FeedbackTemplateCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FeedbackTemplateCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>[]
        }
        delete: {
          args: Prisma.FeedbackTemplateDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>
        }
        update: {
          args: Prisma.FeedbackTemplateUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>
        }
        deleteMany: {
          args: Prisma.FeedbackTemplateDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FeedbackTemplateUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FeedbackTemplateUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>[]
        }
        upsert: {
          args: Prisma.FeedbackTemplateUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackTemplatePayload>
        }
        aggregate: {
          args: Prisma.FeedbackTemplateAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeedbackTemplate>
        }
        groupBy: {
          args: Prisma.FeedbackTemplateGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeedbackTemplateGroupByOutputType>[]
        }
        count: {
          args: Prisma.FeedbackTemplateCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.FeedbackTemplateCountAggregateOutputType>
            | number
        }
      }
    }
    FeedbackQuestion: {
      payload: Prisma.$FeedbackQuestionPayload<ExtArgs>
      fields: Prisma.FeedbackQuestionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FeedbackQuestionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FeedbackQuestionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
        }
        findFirst: {
          args: Prisma.FeedbackQuestionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FeedbackQuestionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
        }
        findMany: {
          args: Prisma.FeedbackQuestionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>[]
        }
        create: {
          args: Prisma.FeedbackQuestionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
        }
        createMany: {
          args: Prisma.FeedbackQuestionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FeedbackQuestionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>[]
        }
        delete: {
          args: Prisma.FeedbackQuestionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
        }
        update: {
          args: Prisma.FeedbackQuestionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
        }
        deleteMany: {
          args: Prisma.FeedbackQuestionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FeedbackQuestionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FeedbackQuestionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>[]
        }
        upsert: {
          args: Prisma.FeedbackQuestionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
        }
        aggregate: {
          args: Prisma.FeedbackQuestionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFeedbackQuestion>
        }
        groupBy: {
          args: Prisma.FeedbackQuestionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FeedbackQuestionGroupByOutputType>[]
        }
        count: {
          args: Prisma.FeedbackQuestionCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.FeedbackQuestionCountAggregateOutputType>
            | number
        }
      }
    }
    Meeting: {
      payload: Prisma.$MeetingPayload<ExtArgs>
      fields: Prisma.MeetingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MeetingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MeetingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>
        }
        findFirst: {
          args: Prisma.MeetingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MeetingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>
        }
        findMany: {
          args: Prisma.MeetingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>[]
        }
        create: {
          args: Prisma.MeetingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>
        }
        createMany: {
          args: Prisma.MeetingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MeetingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>[]
        }
        delete: {
          args: Prisma.MeetingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>
        }
        update: {
          args: Prisma.MeetingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>
        }
        deleteMany: {
          args: Prisma.MeetingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MeetingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MeetingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>[]
        }
        upsert: {
          args: Prisma.MeetingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingPayload>
        }
        aggregate: {
          args: Prisma.MeetingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMeeting>
        }
        groupBy: {
          args: Prisma.MeetingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MeetingGroupByOutputType>[]
        }
        count: {
          args: Prisma.MeetingCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.MeetingCountAggregateOutputType>
            | number
        }
      }
    }
    MeetingParticipant: {
      payload: Prisma.$MeetingParticipantPayload<ExtArgs>
      fields: Prisma.MeetingParticipantFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MeetingParticipantFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MeetingParticipantFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>
        }
        findFirst: {
          args: Prisma.MeetingParticipantFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MeetingParticipantFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>
        }
        findMany: {
          args: Prisma.MeetingParticipantFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>[]
        }
        create: {
          args: Prisma.MeetingParticipantCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>
        }
        createMany: {
          args: Prisma.MeetingParticipantCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MeetingParticipantCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>[]
        }
        delete: {
          args: Prisma.MeetingParticipantDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>
        }
        update: {
          args: Prisma.MeetingParticipantUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>
        }
        deleteMany: {
          args: Prisma.MeetingParticipantDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MeetingParticipantUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MeetingParticipantUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>[]
        }
        upsert: {
          args: Prisma.MeetingParticipantUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingParticipantPayload>
        }
        aggregate: {
          args: Prisma.MeetingParticipantAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMeetingParticipant>
        }
        groupBy: {
          args: Prisma.MeetingParticipantGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MeetingParticipantGroupByOutputType>[]
        }
        count: {
          args: Prisma.MeetingParticipantCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.MeetingParticipantCountAggregateOutputType>
            | number
        }
      }
    }
    MeetingInstance: {
      payload: Prisma.$MeetingInstancePayload<ExtArgs>
      fields: Prisma.MeetingInstanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MeetingInstanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MeetingInstanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>
        }
        findFirst: {
          args: Prisma.MeetingInstanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MeetingInstanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>
        }
        findMany: {
          args: Prisma.MeetingInstanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>[]
        }
        create: {
          args: Prisma.MeetingInstanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>
        }
        createMany: {
          args: Prisma.MeetingInstanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MeetingInstanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>[]
        }
        delete: {
          args: Prisma.MeetingInstanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>
        }
        update: {
          args: Prisma.MeetingInstanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>
        }
        deleteMany: {
          args: Prisma.MeetingInstanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MeetingInstanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MeetingInstanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>[]
        }
        upsert: {
          args: Prisma.MeetingInstanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstancePayload>
        }
        aggregate: {
          args: Prisma.MeetingInstanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMeetingInstance>
        }
        groupBy: {
          args: Prisma.MeetingInstanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MeetingInstanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.MeetingInstanceCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.MeetingInstanceCountAggregateOutputType>
            | number
        }
      }
    }
    MeetingInstanceParticipant: {
      payload: Prisma.$MeetingInstanceParticipantPayload<ExtArgs>
      fields: Prisma.MeetingInstanceParticipantFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MeetingInstanceParticipantFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MeetingInstanceParticipantFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>
        }
        findFirst: {
          args: Prisma.MeetingInstanceParticipantFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MeetingInstanceParticipantFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>
        }
        findMany: {
          args: Prisma.MeetingInstanceParticipantFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>[]
        }
        create: {
          args: Prisma.MeetingInstanceParticipantCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>
        }
        createMany: {
          args: Prisma.MeetingInstanceParticipantCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MeetingInstanceParticipantCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>[]
        }
        delete: {
          args: Prisma.MeetingInstanceParticipantDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>
        }
        update: {
          args: Prisma.MeetingInstanceParticipantUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>
        }
        deleteMany: {
          args: Prisma.MeetingInstanceParticipantDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MeetingInstanceParticipantUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MeetingInstanceParticipantUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>[]
        }
        upsert: {
          args: Prisma.MeetingInstanceParticipantUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MeetingInstanceParticipantPayload>
        }
        aggregate: {
          args: Prisma.MeetingInstanceParticipantAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMeetingInstanceParticipant>
        }
        groupBy: {
          args: Prisma.MeetingInstanceParticipantGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MeetingInstanceParticipantGroupByOutputType>[]
        }
        count: {
          args: Prisma.MeetingInstanceParticipantCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.MeetingInstanceParticipantCountAggregateOutputType>
            | number
        }
      }
    }
    PersonSynopsis: {
      payload: Prisma.$PersonSynopsisPayload<ExtArgs>
      fields: Prisma.PersonSynopsisFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PersonSynopsisFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PersonSynopsisFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>
        }
        findFirst: {
          args: Prisma.PersonSynopsisFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PersonSynopsisFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>
        }
        findMany: {
          args: Prisma.PersonSynopsisFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>[]
        }
        create: {
          args: Prisma.PersonSynopsisCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>
        }
        createMany: {
          args: Prisma.PersonSynopsisCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PersonSynopsisCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>[]
        }
        delete: {
          args: Prisma.PersonSynopsisDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>
        }
        update: {
          args: Prisma.PersonSynopsisUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>
        }
        deleteMany: {
          args: Prisma.PersonSynopsisDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PersonSynopsisUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PersonSynopsisUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>[]
        }
        upsert: {
          args: Prisma.PersonSynopsisUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PersonSynopsisPayload>
        }
        aggregate: {
          args: Prisma.PersonSynopsisAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePersonSynopsis>
        }
        groupBy: {
          args: Prisma.PersonSynopsisGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PersonSynopsisGroupByOutputType>[]
        }
        count: {
          args: Prisma.PersonSynopsisCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.PersonSynopsisCountAggregateOutputType>
            | number
        }
      }
    }
    EntityLink: {
      payload: Prisma.$EntityLinkPayload<ExtArgs>
      fields: Prisma.EntityLinkFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EntityLinkFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EntityLinkFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>
        }
        findFirst: {
          args: Prisma.EntityLinkFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EntityLinkFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>
        }
        findMany: {
          args: Prisma.EntityLinkFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>[]
        }
        create: {
          args: Prisma.EntityLinkCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>
        }
        createMany: {
          args: Prisma.EntityLinkCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EntityLinkCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>[]
        }
        delete: {
          args: Prisma.EntityLinkDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>
        }
        update: {
          args: Prisma.EntityLinkUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>
        }
        deleteMany: {
          args: Prisma.EntityLinkDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EntityLinkUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EntityLinkUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>[]
        }
        upsert: {
          args: Prisma.EntityLinkUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EntityLinkPayload>
        }
        aggregate: {
          args: Prisma.EntityLinkAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEntityLink>
        }
        groupBy: {
          args: Prisma.EntityLinkGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EntityLinkGroupByOutputType>[]
        }
        count: {
          args: Prisma.EntityLinkCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.EntityLinkCountAggregateOutputType>
            | number
        }
      }
    }
    JobRole: {
      payload: Prisma.$JobRolePayload<ExtArgs>
      fields: Prisma.JobRoleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.JobRoleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.JobRoleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>
        }
        findFirst: {
          args: Prisma.JobRoleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.JobRoleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>
        }
        findMany: {
          args: Prisma.JobRoleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>[]
        }
        create: {
          args: Prisma.JobRoleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>
        }
        createMany: {
          args: Prisma.JobRoleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.JobRoleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>[]
        }
        delete: {
          args: Prisma.JobRoleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>
        }
        update: {
          args: Prisma.JobRoleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>
        }
        deleteMany: {
          args: Prisma.JobRoleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.JobRoleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.JobRoleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>[]
        }
        upsert: {
          args: Prisma.JobRoleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobRolePayload>
        }
        aggregate: {
          args: Prisma.JobRoleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateJobRole>
        }
        groupBy: {
          args: Prisma.JobRoleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.JobRoleGroupByOutputType>[]
        }
        count: {
          args: Prisma.JobRoleCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.JobRoleCountAggregateOutputType>
            | number
        }
      }
    }
    JobLevel: {
      payload: Prisma.$JobLevelPayload<ExtArgs>
      fields: Prisma.JobLevelFieldRefs
      operations: {
        findUnique: {
          args: Prisma.JobLevelFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.JobLevelFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>
        }
        findFirst: {
          args: Prisma.JobLevelFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.JobLevelFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>
        }
        findMany: {
          args: Prisma.JobLevelFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>[]
        }
        create: {
          args: Prisma.JobLevelCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>
        }
        createMany: {
          args: Prisma.JobLevelCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.JobLevelCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>[]
        }
        delete: {
          args: Prisma.JobLevelDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>
        }
        update: {
          args: Prisma.JobLevelUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>
        }
        deleteMany: {
          args: Prisma.JobLevelDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.JobLevelUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.JobLevelUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>[]
        }
        upsert: {
          args: Prisma.JobLevelUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobLevelPayload>
        }
        aggregate: {
          args: Prisma.JobLevelAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateJobLevel>
        }
        groupBy: {
          args: Prisma.JobLevelGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.JobLevelGroupByOutputType>[]
        }
        count: {
          args: Prisma.JobLevelCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.JobLevelCountAggregateOutputType>
            | number
        }
      }
    }
    JobDomain: {
      payload: Prisma.$JobDomainPayload<ExtArgs>
      fields: Prisma.JobDomainFieldRefs
      operations: {
        findUnique: {
          args: Prisma.JobDomainFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.JobDomainFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>
        }
        findFirst: {
          args: Prisma.JobDomainFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.JobDomainFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>
        }
        findMany: {
          args: Prisma.JobDomainFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>[]
        }
        create: {
          args: Prisma.JobDomainCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>
        }
        createMany: {
          args: Prisma.JobDomainCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.JobDomainCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>[]
        }
        delete: {
          args: Prisma.JobDomainDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>
        }
        update: {
          args: Prisma.JobDomainUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>
        }
        deleteMany: {
          args: Prisma.JobDomainDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.JobDomainUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.JobDomainUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>[]
        }
        upsert: {
          args: Prisma.JobDomainUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$JobDomainPayload>
        }
        aggregate: {
          args: Prisma.JobDomainAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateJobDomain>
        }
        groupBy: {
          args: Prisma.JobDomainGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.JobDomainGroupByOutputType>[]
        }
        count: {
          args: Prisma.JobDomainCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.JobDomainCountAggregateOutputType>
            | number
        }
      }
    }
    PasswordResetToken: {
      payload: Prisma.$PasswordResetTokenPayload<ExtArgs>
      fields: Prisma.PasswordResetTokenFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PasswordResetTokenFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PasswordResetTokenFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        findFirst: {
          args: Prisma.PasswordResetTokenFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PasswordResetTokenFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        findMany: {
          args: Prisma.PasswordResetTokenFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
        }
        create: {
          args: Prisma.PasswordResetTokenCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        createMany: {
          args: Prisma.PasswordResetTokenCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PasswordResetTokenCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
        }
        delete: {
          args: Prisma.PasswordResetTokenDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        update: {
          args: Prisma.PasswordResetTokenUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        deleteMany: {
          args: Prisma.PasswordResetTokenDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PasswordResetTokenUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PasswordResetTokenUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>[]
        }
        upsert: {
          args: Prisma.PasswordResetTokenUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PasswordResetTokenPayload>
        }
        aggregate: {
          args: Prisma.PasswordResetTokenAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePasswordResetToken>
        }
        groupBy: {
          args: Prisma.PasswordResetTokenGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PasswordResetTokenGroupByOutputType>[]
        }
        count: {
          args: Prisma.PasswordResetTokenCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.PasswordResetTokenCountAggregateOutputType>
            | number
        }
      }
    }
    Notification: {
      payload: Prisma.$NotificationPayload<ExtArgs>
      fields: Prisma.NotificationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.NotificationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        findFirst: {
          args: Prisma.NotificationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        findMany: {
          args: Prisma.NotificationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        create: {
          args: Prisma.NotificationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        createMany: {
          args: Prisma.NotificationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        delete: {
          args: Prisma.NotificationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        update: {
          args: Prisma.NotificationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        deleteMany: {
          args: Prisma.NotificationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.NotificationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[]
        }
        upsert: {
          args: Prisma.NotificationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>
        }
        aggregate: {
          args: Prisma.NotificationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotification>
        }
        groupBy: {
          args: Prisma.NotificationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotificationGroupByOutputType>[]
        }
        count: {
          args: Prisma.NotificationCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.NotificationCountAggregateOutputType>
            | number
        }
      }
    }
    NotificationResponse: {
      payload: Prisma.$NotificationResponsePayload<ExtArgs>
      fields: Prisma.NotificationResponseFieldRefs
      operations: {
        findUnique: {
          args: Prisma.NotificationResponseFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.NotificationResponseFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>
        }
        findFirst: {
          args: Prisma.NotificationResponseFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.NotificationResponseFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>
        }
        findMany: {
          args: Prisma.NotificationResponseFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>[]
        }
        create: {
          args: Prisma.NotificationResponseCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>
        }
        createMany: {
          args: Prisma.NotificationResponseCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.NotificationResponseCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>[]
        }
        delete: {
          args: Prisma.NotificationResponseDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>
        }
        update: {
          args: Prisma.NotificationResponseUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>
        }
        deleteMany: {
          args: Prisma.NotificationResponseDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.NotificationResponseUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.NotificationResponseUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>[]
        }
        upsert: {
          args: Prisma.NotificationResponseUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationResponsePayload>
        }
        aggregate: {
          args: Prisma.NotificationResponseAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotificationResponse>
        }
        groupBy: {
          args: Prisma.NotificationResponseGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NotificationResponseGroupByOutputType>[]
        }
        count: {
          args: Prisma.NotificationResponseCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.NotificationResponseCountAggregateOutputType>
            | number
        }
      }
    }
    CronJobExecution: {
      payload: Prisma.$CronJobExecutionPayload<ExtArgs>
      fields: Prisma.CronJobExecutionFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CronJobExecutionFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CronJobExecutionFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>
        }
        findFirst: {
          args: Prisma.CronJobExecutionFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CronJobExecutionFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>
        }
        findMany: {
          args: Prisma.CronJobExecutionFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>[]
        }
        create: {
          args: Prisma.CronJobExecutionCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>
        }
        createMany: {
          args: Prisma.CronJobExecutionCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CronJobExecutionCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>[]
        }
        delete: {
          args: Prisma.CronJobExecutionDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>
        }
        update: {
          args: Prisma.CronJobExecutionUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>
        }
        deleteMany: {
          args: Prisma.CronJobExecutionDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CronJobExecutionUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CronJobExecutionUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>[]
        }
        upsert: {
          args: Prisma.CronJobExecutionUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CronJobExecutionPayload>
        }
        aggregate: {
          args: Prisma.CronJobExecutionAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCronJobExecution>
        }
        groupBy: {
          args: Prisma.CronJobExecutionGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CronJobExecutionGroupByOutputType>[]
        }
        count: {
          args: Prisma.CronJobExecutionCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.CronJobExecutionCountAggregateOutputType>
            | number
        }
      }
    }
    Report: {
      payload: Prisma.$ReportPayload<ExtArgs>
      fields: Prisma.ReportFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReportFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        findFirst: {
          args: Prisma.ReportFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        findMany: {
          args: Prisma.ReportFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        create: {
          args: Prisma.ReportCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        createMany: {
          args: Prisma.ReportCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        delete: {
          args: Prisma.ReportDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        update: {
          args: Prisma.ReportUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        deleteMany: {
          args: Prisma.ReportDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReportUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[]
        }
        upsert: {
          args: Prisma.ReportUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>
        }
        aggregate: {
          args: Prisma.ReportAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReport>
        }
        groupBy: {
          args: Prisma.ReportGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReportCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.ReportCountAggregateOutputType>
            | number
        }
      }
    }
    ReportInstance: {
      payload: Prisma.$ReportInstancePayload<ExtArgs>
      fields: Prisma.ReportInstanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ReportInstanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ReportInstanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>
        }
        findFirst: {
          args: Prisma.ReportInstanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ReportInstanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>
        }
        findMany: {
          args: Prisma.ReportInstanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>[]
        }
        create: {
          args: Prisma.ReportInstanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>
        }
        createMany: {
          args: Prisma.ReportInstanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ReportInstanceCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>[]
        }
        delete: {
          args: Prisma.ReportInstanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>
        }
        update: {
          args: Prisma.ReportInstanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>
        }
        deleteMany: {
          args: Prisma.ReportInstanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ReportInstanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ReportInstanceUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>[]
        }
        upsert: {
          args: Prisma.ReportInstanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportInstancePayload>
        }
        aggregate: {
          args: Prisma.ReportInstanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateReportInstance>
        }
        groupBy: {
          args: Prisma.ReportInstanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ReportInstanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.ReportInstanceCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.ReportInstanceCountAggregateOutputType>
            | number
        }
      }
    }
    Note: {
      payload: Prisma.$NotePayload<ExtArgs>
      fields: Prisma.NoteFieldRefs
      operations: {
        findUnique: {
          args: Prisma.NoteFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>
        }
        findFirst: {
          args: Prisma.NoteFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>
        }
        findMany: {
          args: Prisma.NoteFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>[]
        }
        create: {
          args: Prisma.NoteCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>
        }
        createMany: {
          args: Prisma.NoteCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>[]
        }
        delete: {
          args: Prisma.NoteDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>
        }
        update: {
          args: Prisma.NoteUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>
        }
        deleteMany: {
          args: Prisma.NoteDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.NoteUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.NoteUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>[]
        }
        upsert: {
          args: Prisma.NoteUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotePayload>
        }
        aggregate: {
          args: Prisma.NoteAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateNote>
        }
        groupBy: {
          args: Prisma.NoteGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.NoteGroupByOutputType>[]
        }
        count: {
          args: Prisma.NoteCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.NoteCountAggregateOutputType>
            | number
        }
      }
    }
    FileAttachment: {
      payload: Prisma.$FileAttachmentPayload<ExtArgs>
      fields: Prisma.FileAttachmentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FileAttachmentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FileAttachmentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
        }
        findFirst: {
          args: Prisma.FileAttachmentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FileAttachmentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
        }
        findMany: {
          args: Prisma.FileAttachmentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>[]
        }
        create: {
          args: Prisma.FileAttachmentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
        }
        createMany: {
          args: Prisma.FileAttachmentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FileAttachmentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>[]
        }
        delete: {
          args: Prisma.FileAttachmentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
        }
        update: {
          args: Prisma.FileAttachmentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
        }
        deleteMany: {
          args: Prisma.FileAttachmentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FileAttachmentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FileAttachmentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>[]
        }
        upsert: {
          args: Prisma.FileAttachmentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
        }
        aggregate: {
          args: Prisma.FileAttachmentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFileAttachment>
        }
        groupBy: {
          args: Prisma.FileAttachmentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileAttachmentGroupByOutputType>[]
        }
        count: {
          args: Prisma.FileAttachmentCountArgs<ExtArgs>
          result:
            | runtime.Types.Utils.Optional<Prisma.FileAttachmentCountAggregateOutputType>
            | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]]
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]]
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]]
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]]
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
} as const)

export type TransactionIsolationLevel =
  (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]

export const OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type OrganizationScalarFieldEnum =
  (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]

export const UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  passwordHash: 'passwordHash',
  role: 'role',
  organizationId: 'organizationId',
  personId: 'personId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type UserScalarFieldEnum =
  (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]

export const TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  avatar: 'avatar',
  organizationId: 'organizationId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type TeamScalarFieldEnum =
  (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]

export const PersonScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  status: 'status',
  birthday: 'birthday',
  avatar: 'avatar',
  employeeType: 'employeeType',
  organizationId: 'organizationId',
  teamId: 'teamId',
  managerId: 'managerId',
  jobRoleId: 'jobRoleId',
  startedAt: 'startedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type PersonScalarFieldEnum =
  (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]

export const InitiativeScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  organizationId: 'organizationId',
  title: 'title',
  summary: 'summary',
  outcome: 'outcome',
  startDate: 'startDate',
  targetDate: 'targetDate',
  status: 'status',
  rag: 'rag',
  confidence: 'confidence',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type InitiativeScalarFieldEnum =
  (typeof InitiativeScalarFieldEnum)[keyof typeof InitiativeScalarFieldEnum]

export const InitiativeOwnerScalarFieldEnum = {
  initiativeId: 'initiativeId',
  personId: 'personId',
  role: 'role',
} as const

export type InitiativeOwnerScalarFieldEnum =
  (typeof InitiativeOwnerScalarFieldEnum)[keyof typeof InitiativeOwnerScalarFieldEnum]

export const ObjectiveScalarFieldEnum = {
  id: 'id',
  initiativeId: 'initiativeId',
  title: 'title',
  keyResult: 'keyResult',
  sortIndex: 'sortIndex',
} as const

export type ObjectiveScalarFieldEnum =
  (typeof ObjectiveScalarFieldEnum)[keyof typeof ObjectiveScalarFieldEnum]

export const TaskScalarFieldEnum = {
  id: 'id',
  objectiveId: 'objectiveId',
  initiativeId: 'initiativeId',
  title: 'title',
  description: 'description',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  status: 'status',
  priority: 'priority',
  estimate: 'estimate',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
} as const

export type TaskScalarFieldEnum =
  (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]

export const CheckInScalarFieldEnum = {
  id: 'id',
  initiativeId: 'initiativeId',
  weekOf: 'weekOf',
  rag: 'rag',
  confidence: 'confidence',
  summary: 'summary',
  blockers: 'blockers',
  nextSteps: 'nextSteps',
  createdById: 'createdById',
  createdAt: 'createdAt',
} as const

export type CheckInScalarFieldEnum =
  (typeof CheckInScalarFieldEnum)[keyof typeof CheckInScalarFieldEnum]

export const OneOnOneScalarFieldEnum = {
  id: 'id',
  managerId: 'managerId',
  reportId: 'reportId',
  scheduledAt: 'scheduledAt',
  notes: 'notes',
} as const

export type OneOnOneScalarFieldEnum =
  (typeof OneOnOneScalarFieldEnum)[keyof typeof OneOnOneScalarFieldEnum]

export const IDPScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  period: 'period',
  summary: 'summary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type IDPScalarFieldEnum =
  (typeof IDPScalarFieldEnum)[keyof typeof IDPScalarFieldEnum]

export const IDPGoalScalarFieldEnum = {
  id: 'id',
  idpId: 'idpId',
  title: 'title',
  metric: 'metric',
  target: 'target',
  status: 'status',
  dueDate: 'dueDate',
} as const

export type IDPGoalScalarFieldEnum =
  (typeof IDPGoalScalarFieldEnum)[keyof typeof IDPGoalScalarFieldEnum]

export const FeedbackScalarFieldEnum = {
  id: 'id',
  aboutId: 'aboutId',
  fromId: 'fromId',
  kind: 'kind',
  isPrivate: 'isPrivate',
  body: 'body',
  createdAt: 'createdAt',
} as const

export type FeedbackScalarFieldEnum =
  (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]

export const MetricScalarFieldEnum = {
  id: 'id',
  initiativeId: 'initiativeId',
  name: 'name',
  unit: 'unit',
  value: 'value',
  capturedAt: 'capturedAt',
} as const

export type MetricScalarFieldEnum =
  (typeof MetricScalarFieldEnum)[keyof typeof MetricScalarFieldEnum]

export const TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
} as const

export type TagScalarFieldEnum =
  (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]

export const TagMapScalarFieldEnum = {
  tagId: 'tagId',
  entity: 'entity',
  entityId: 'entityId',
} as const

export type TagMapScalarFieldEnum =
  (typeof TagMapScalarFieldEnum)[keyof typeof TagMapScalarFieldEnum]

export const OrganizationInvitationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  organizationId: 'organizationId',
  invitedById: 'invitedById',
  status: 'status',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type OrganizationInvitationScalarFieldEnum =
  (typeof OrganizationInvitationScalarFieldEnum)[keyof typeof OrganizationInvitationScalarFieldEnum]

export const EventScalarFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  entity: 'entity',
  entityId: 'entityId',
  action: 'action',
  metadata: 'metadata',
  createdAt: 'createdAt',
} as const

export type EventScalarFieldEnum =
  (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]

export const UserJiraCredentialsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jiraUsername: 'jiraUsername',
  encryptedApiKey: 'encryptedApiKey',
  jiraBaseUrl: 'jiraBaseUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type UserJiraCredentialsScalarFieldEnum =
  (typeof UserJiraCredentialsScalarFieldEnum)[keyof typeof UserJiraCredentialsScalarFieldEnum]

export const PersonJiraAccountScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  jiraAccountId: 'jiraAccountId',
  jiraEmail: 'jiraEmail',
  jiraDisplayName: 'jiraDisplayName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type PersonJiraAccountScalarFieldEnum =
  (typeof PersonJiraAccountScalarFieldEnum)[keyof typeof PersonJiraAccountScalarFieldEnum]

export const UserGithubCredentialsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  githubUsername: 'githubUsername',
  encryptedPat: 'encryptedPat',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type UserGithubCredentialsScalarFieldEnum =
  (typeof UserGithubCredentialsScalarFieldEnum)[keyof typeof UserGithubCredentialsScalarFieldEnum]

export const PersonGithubAccountScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  githubUsername: 'githubUsername',
  githubDisplayName: 'githubDisplayName',
  githubEmail: 'githubEmail',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type PersonGithubAccountScalarFieldEnum =
  (typeof PersonGithubAccountScalarFieldEnum)[keyof typeof PersonGithubAccountScalarFieldEnum]

export const FeedbackCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  userId: 'userId',
  targetPersonId: 'targetPersonId',
  templateId: 'templateId',
  startDate: 'startDate',
  endDate: 'endDate',
  inviteEmails: 'inviteEmails',
  inviteLink: 'inviteLink',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type FeedbackCampaignScalarFieldEnum =
  (typeof FeedbackCampaignScalarFieldEnum)[keyof typeof FeedbackCampaignScalarFieldEnum]

export const FeedbackResponseScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  responderEmail: 'responderEmail',
  responses: 'responses',
  submittedAt: 'submittedAt',
} as const

export type FeedbackResponseScalarFieldEnum =
  (typeof FeedbackResponseScalarFieldEnum)[keyof typeof FeedbackResponseScalarFieldEnum]

export const FeedbackTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type FeedbackTemplateScalarFieldEnum =
  (typeof FeedbackTemplateScalarFieldEnum)[keyof typeof FeedbackTemplateScalarFieldEnum]

export const FeedbackQuestionScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  question: 'question',
  type: 'type',
  required: 'required',
  options: 'options',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type FeedbackQuestionScalarFieldEnum =
  (typeof FeedbackQuestionScalarFieldEnum)[keyof typeof FeedbackQuestionScalarFieldEnum]

export const MeetingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  location: 'location',
  notes: 'notes',
  isRecurring: 'isRecurring',
  recurrenceType: 'recurrenceType',
  isPrivate: 'isPrivate',
  organizationId: 'organizationId',
  teamId: 'teamId',
  initiativeId: 'initiativeId',
  ownerId: 'ownerId',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type MeetingScalarFieldEnum =
  (typeof MeetingScalarFieldEnum)[keyof typeof MeetingScalarFieldEnum]

export const MeetingParticipantScalarFieldEnum = {
  id: 'id',
  meetingId: 'meetingId',
  personId: 'personId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type MeetingParticipantScalarFieldEnum =
  (typeof MeetingParticipantScalarFieldEnum)[keyof typeof MeetingParticipantScalarFieldEnum]

export const MeetingInstanceScalarFieldEnum = {
  id: 'id',
  meetingId: 'meetingId',
  scheduledAt: 'scheduledAt',
  notes: 'notes',
  isPrivate: 'isPrivate',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type MeetingInstanceScalarFieldEnum =
  (typeof MeetingInstanceScalarFieldEnum)[keyof typeof MeetingInstanceScalarFieldEnum]

export const MeetingInstanceParticipantScalarFieldEnum = {
  id: 'id',
  meetingInstanceId: 'meetingInstanceId',
  personId: 'personId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type MeetingInstanceParticipantScalarFieldEnum =
  (typeof MeetingInstanceParticipantScalarFieldEnum)[keyof typeof MeetingInstanceParticipantScalarFieldEnum]

export const PersonSynopsisScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  fromDate: 'fromDate',
  toDate: 'toDate',
  includeFeedback: 'includeFeedback',
  content: 'content',
  sources: 'sources',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type PersonSynopsisScalarFieldEnum =
  (typeof PersonSynopsisScalarFieldEnum)[keyof typeof PersonSynopsisScalarFieldEnum]

export const EntityLinkScalarFieldEnum = {
  id: 'id',
  url: 'url',
  title: 'title',
  description: 'description',
  entityType: 'entityType',
  entityId: 'entityId',
  organizationId: 'organizationId',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type EntityLinkScalarFieldEnum =
  (typeof EntityLinkScalarFieldEnum)[keyof typeof EntityLinkScalarFieldEnum]

export const JobRoleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  organizationId: 'organizationId',
  levelId: 'levelId',
  domainId: 'domainId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type JobRoleScalarFieldEnum =
  (typeof JobRoleScalarFieldEnum)[keyof typeof JobRoleScalarFieldEnum]

export const JobLevelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type JobLevelScalarFieldEnum =
  (typeof JobLevelScalarFieldEnum)[keyof typeof JobLevelScalarFieldEnum]

export const JobDomainScalarFieldEnum = {
  id: 'id',
  name: 'name',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type JobDomainScalarFieldEnum =
  (typeof JobDomainScalarFieldEnum)[keyof typeof JobDomainScalarFieldEnum]

export const PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt',
} as const

export type PasswordResetTokenScalarFieldEnum =
  (typeof PasswordResetTokenScalarFieldEnum)[keyof typeof PasswordResetTokenScalarFieldEnum]

export const NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  organizationId: 'organizationId',
  userId: 'userId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type NotificationScalarFieldEnum =
  (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]

export const NotificationResponseScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  userId: 'userId',
  status: 'status',
  readAt: 'readAt',
  dismissedAt: 'dismissedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type NotificationResponseScalarFieldEnum =
  (typeof NotificationResponseScalarFieldEnum)[keyof typeof NotificationResponseScalarFieldEnum]

export const CronJobExecutionScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  jobName: 'jobName',
  organizationId: 'organizationId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  notificationsCreated: 'notificationsCreated',
  error: 'error',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type CronJobExecutionScalarFieldEnum =
  (typeof CronJobExecutionScalarFieldEnum)[keyof typeof CronJobExecutionScalarFieldEnum]

export const ReportScalarFieldEnum = {
  id: 'id',
  codeId: 'codeId',
  name: 'name',
  description: 'description',
  ownerId: 'ownerId',
  inputSchema: 'inputSchema',
  enabled: 'enabled',
  renderers: 'renderers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type ReportScalarFieldEnum =
  (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]

export const ReportInstanceScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  userId: 'userId',
  organizationId: 'organizationId',
  renderer: 'renderer',
  input: 'input',
  output: 'output',
  status: 'status',
  errorMessage: 'errorMessage',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
} as const

export type ReportInstanceScalarFieldEnum =
  (typeof ReportInstanceScalarFieldEnum)[keyof typeof ReportInstanceScalarFieldEnum]

export const NoteScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  organizationId: 'organizationId',
  content: 'content',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type NoteScalarFieldEnum =
  (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]

export const FileAttachmentScalarFieldEnum = {
  id: 'id',
  noteId: 'noteId',
  entityType: 'entityType',
  entityId: 'entityId',
  organizationId: 'organizationId',
  fileName: 'fileName',
  originalName: 'originalName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  r2Key: 'r2Key',
  r2Url: 'r2Url',
  uploadedById: 'uploadedById',
  createdAt: 'createdAt',
} as const

export type FileAttachmentScalarFieldEnum =
  (typeof FileAttachmentScalarFieldEnum)[keyof typeof FileAttachmentScalarFieldEnum]

export const SortOrder = {
  asc: 'asc',
  desc: 'desc',
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]

export const JsonNullValueInput = {
  JsonNull: JsonNull,
} as const

export type JsonNullValueInput =
  (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]

export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull,
} as const

export type NullableJsonNullValueInput =
  (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]

export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]

export const NullsOrder = {
  first: 'first',
  last: 'last',
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]

export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull,
} as const

export type JsonNullValueFilter =
  (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]

/**
 * Field references
 */

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'String'
>

/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'String[]'
>

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'DateTime'
>

/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'DateTime[]'
>

/**
 * Reference to a field of type 'EmployeeType'
 */
export type EnumEmployeeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'EmployeeType'
>

/**
 * Reference to a field of type 'EmployeeType[]'
 */
export type ListEnumEmployeeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'EmployeeType[]'
>

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Int'
>

/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Int[]'
>

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Boolean'
>

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Float'
>

/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Float[]'
>

/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Json'
>

/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'QueryMode'
>

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}

export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions
  .defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
  'define',
  TypeMapCb,
  runtime.Types.Extensions.DefaultArgs
>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   *
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   *
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   *
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   *
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  organization?: Prisma.OrganizationOmit
  user?: Prisma.UserOmit
  team?: Prisma.TeamOmit
  person?: Prisma.PersonOmit
  initiative?: Prisma.InitiativeOmit
  initiativeOwner?: Prisma.InitiativeOwnerOmit
  objective?: Prisma.ObjectiveOmit
  task?: Prisma.TaskOmit
  checkIn?: Prisma.CheckInOmit
  oneOnOne?: Prisma.OneOnOneOmit
  iDP?: Prisma.IDPOmit
  iDPGoal?: Prisma.IDPGoalOmit
  feedback?: Prisma.FeedbackOmit
  metric?: Prisma.MetricOmit
  tag?: Prisma.TagOmit
  tagMap?: Prisma.TagMapOmit
  organizationInvitation?: Prisma.OrganizationInvitationOmit
  event?: Prisma.EventOmit
  userJiraCredentials?: Prisma.UserJiraCredentialsOmit
  personJiraAccount?: Prisma.PersonJiraAccountOmit
  userGithubCredentials?: Prisma.UserGithubCredentialsOmit
  personGithubAccount?: Prisma.PersonGithubAccountOmit
  feedbackCampaign?: Prisma.FeedbackCampaignOmit
  feedbackResponse?: Prisma.FeedbackResponseOmit
  feedbackTemplate?: Prisma.FeedbackTemplateOmit
  feedbackQuestion?: Prisma.FeedbackQuestionOmit
  meeting?: Prisma.MeetingOmit
  meetingParticipant?: Prisma.MeetingParticipantOmit
  meetingInstance?: Prisma.MeetingInstanceOmit
  meetingInstanceParticipant?: Prisma.MeetingInstanceParticipantOmit
  personSynopsis?: Prisma.PersonSynopsisOmit
  entityLink?: Prisma.EntityLinkOmit
  jobRole?: Prisma.JobRoleOmit
  jobLevel?: Prisma.JobLevelOmit
  jobDomain?: Prisma.JobDomainOmit
  passwordResetToken?: Prisma.PasswordResetTokenOmit
  notification?: Prisma.NotificationOmit
  notificationResponse?: Prisma.NotificationResponseOmit
  cronJobExecution?: Prisma.CronJobExecutionOmit
  report?: Prisma.ReportOmit
  reportInstance?: Prisma.ReportInstanceOmit
  note?: Prisma.NoteOmit
  fileAttachment?: Prisma.FileAttachmentOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>

export type GetEvents<T extends any[]> =
  T extends Array<LogLevel | LogDefinition> ? GetLogType<T[number]> : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */

export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<
  DefaultPrismaClient,
  runtime.ITXClientDenyList
>
