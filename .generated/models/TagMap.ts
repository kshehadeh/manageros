/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `TagMap` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model TagMap
 *
 */
export type TagMapModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TagMapPayload>

export type AggregateTagMap = {
  _count: TagMapCountAggregateOutputType | null
  _min: TagMapMinAggregateOutputType | null
  _max: TagMapMaxAggregateOutputType | null
}

export type TagMapMinAggregateOutputType = {
  tagId: string | null
  entity: string | null
  entityId: string | null
}

export type TagMapMaxAggregateOutputType = {
  tagId: string | null
  entity: string | null
  entityId: string | null
}

export type TagMapCountAggregateOutputType = {
  tagId: number
  entity: number
  entityId: number
  _all: number
}

export type TagMapMinAggregateInputType = {
  tagId?: true
  entity?: true
  entityId?: true
}

export type TagMapMaxAggregateInputType = {
  tagId?: true
  entity?: true
  entityId?: true
}

export type TagMapCountAggregateInputType = {
  tagId?: true
  entity?: true
  entityId?: true
  _all?: true
}

export type TagMapAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TagMap to aggregate.
   */
  where?: Prisma.TagMapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TagMaps to fetch.
   */
  orderBy?:
    | Prisma.TagMapOrderByWithRelationInput
    | Prisma.TagMapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TagMapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TagMaps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TagMaps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TagMaps
   **/
  _count?: true | TagMapCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TagMapMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TagMapMaxAggregateInputType
}

export type GetTagMapAggregateType<T extends TagMapAggregateArgs> = {
  [P in keyof T & keyof AggregateTagMap]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTagMap[P]>
    : Prisma.GetScalarType<T[P], AggregateTagMap[P]>
}

export type TagMapGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TagMapWhereInput
  orderBy?:
    | Prisma.TagMapOrderByWithAggregationInput
    | Prisma.TagMapOrderByWithAggregationInput[]
  by: Prisma.TagMapScalarFieldEnum[] | Prisma.TagMapScalarFieldEnum
  having?: Prisma.TagMapScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TagMapCountAggregateInputType | true
  _min?: TagMapMinAggregateInputType
  _max?: TagMapMaxAggregateInputType
}

export type TagMapGroupByOutputType = {
  tagId: string
  entity: string
  entityId: string
  _count: TagMapCountAggregateOutputType | null
  _min: TagMapMinAggregateOutputType | null
  _max: TagMapMaxAggregateOutputType | null
}

type GetTagMapGroupByPayload<T extends TagMapGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<TagMapGroupByOutputType, T['by']> & {
        [P in keyof T & keyof TagMapGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TagMapGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TagMapGroupByOutputType[P]>
      }
    >
  >

export type TagMapWhereInput = {
  AND?: Prisma.TagMapWhereInput | Prisma.TagMapWhereInput[]
  OR?: Prisma.TagMapWhereInput[]
  NOT?: Prisma.TagMapWhereInput | Prisma.TagMapWhereInput[]
  tagId?: Prisma.StringFilter<'TagMap'> | string
  entity?: Prisma.StringFilter<'TagMap'> | string
  entityId?: Prisma.StringFilter<'TagMap'> | string
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}

export type TagMapOrderByWithRelationInput = {
  tagId?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  tag?: Prisma.TagOrderByWithRelationInput
}

export type TagMapWhereUniqueInput = Prisma.AtLeast<
  {
    tagId_entity_entityId?: Prisma.TagMapTagIdEntityEntityIdCompoundUniqueInput
    AND?: Prisma.TagMapWhereInput | Prisma.TagMapWhereInput[]
    OR?: Prisma.TagMapWhereInput[]
    NOT?: Prisma.TagMapWhereInput | Prisma.TagMapWhereInput[]
    tagId?: Prisma.StringFilter<'TagMap'> | string
    entity?: Prisma.StringFilter<'TagMap'> | string
    entityId?: Prisma.StringFilter<'TagMap'> | string
    tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
  },
  'tagId_entity_entityId'
>

export type TagMapOrderByWithAggregationInput = {
  tagId?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
  _count?: Prisma.TagMapCountOrderByAggregateInput
  _max?: Prisma.TagMapMaxOrderByAggregateInput
  _min?: Prisma.TagMapMinOrderByAggregateInput
}

export type TagMapScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TagMapScalarWhereWithAggregatesInput
    | Prisma.TagMapScalarWhereWithAggregatesInput[]
  OR?: Prisma.TagMapScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.TagMapScalarWhereWithAggregatesInput
    | Prisma.TagMapScalarWhereWithAggregatesInput[]
  tagId?: Prisma.StringWithAggregatesFilter<'TagMap'> | string
  entity?: Prisma.StringWithAggregatesFilter<'TagMap'> | string
  entityId?: Prisma.StringWithAggregatesFilter<'TagMap'> | string
}

export type TagMapCreateInput = {
  entity: string
  entityId: string
  tag: Prisma.TagCreateNestedOneWithoutMapsInput
}

export type TagMapUncheckedCreateInput = {
  tagId: string
  entity: string
  entityId: string
}

export type TagMapUpdateInput = {
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
  tag?: Prisma.TagUpdateOneRequiredWithoutMapsNestedInput
}

export type TagMapUncheckedUpdateInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagMapCreateManyInput = {
  tagId: string
  entity: string
  entityId: string
}

export type TagMapUpdateManyMutationInput = {
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagMapUncheckedUpdateManyInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagMapListRelationFilter = {
  every?: Prisma.TagMapWhereInput
  some?: Prisma.TagMapWhereInput
  none?: Prisma.TagMapWhereInput
}

export type TagMapOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TagMapTagIdEntityEntityIdCompoundUniqueInput = {
  tagId: string
  entity: string
  entityId: string
}

export type TagMapCountOrderByAggregateInput = {
  tagId?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
}

export type TagMapMaxOrderByAggregateInput = {
  tagId?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
}

export type TagMapMinOrderByAggregateInput = {
  tagId?: Prisma.SortOrder
  entity?: Prisma.SortOrder
  entityId?: Prisma.SortOrder
}

export type TagMapCreateNestedManyWithoutTagInput = {
  create?:
    | Prisma.XOR<
        Prisma.TagMapCreateWithoutTagInput,
        Prisma.TagMapUncheckedCreateWithoutTagInput
      >
    | Prisma.TagMapCreateWithoutTagInput[]
    | Prisma.TagMapUncheckedCreateWithoutTagInput[]
  connectOrCreate?:
    | Prisma.TagMapCreateOrConnectWithoutTagInput
    | Prisma.TagMapCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.TagMapCreateManyTagInputEnvelope
  connect?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
}

export type TagMapUncheckedCreateNestedManyWithoutTagInput = {
  create?:
    | Prisma.XOR<
        Prisma.TagMapCreateWithoutTagInput,
        Prisma.TagMapUncheckedCreateWithoutTagInput
      >
    | Prisma.TagMapCreateWithoutTagInput[]
    | Prisma.TagMapUncheckedCreateWithoutTagInput[]
  connectOrCreate?:
    | Prisma.TagMapCreateOrConnectWithoutTagInput
    | Prisma.TagMapCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.TagMapCreateManyTagInputEnvelope
  connect?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
}

export type TagMapUpdateManyWithoutTagNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TagMapCreateWithoutTagInput,
        Prisma.TagMapUncheckedCreateWithoutTagInput
      >
    | Prisma.TagMapCreateWithoutTagInput[]
    | Prisma.TagMapUncheckedCreateWithoutTagInput[]
  connectOrCreate?:
    | Prisma.TagMapCreateOrConnectWithoutTagInput
    | Prisma.TagMapCreateOrConnectWithoutTagInput[]
  upsert?:
    | Prisma.TagMapUpsertWithWhereUniqueWithoutTagInput
    | Prisma.TagMapUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.TagMapCreateManyTagInputEnvelope
  set?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
  disconnect?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
  delete?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
  connect?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
  update?:
    | Prisma.TagMapUpdateWithWhereUniqueWithoutTagInput
    | Prisma.TagMapUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?:
    | Prisma.TagMapUpdateManyWithWhereWithoutTagInput
    | Prisma.TagMapUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.TagMapScalarWhereInput | Prisma.TagMapScalarWhereInput[]
}

export type TagMapUncheckedUpdateManyWithoutTagNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.TagMapCreateWithoutTagInput,
        Prisma.TagMapUncheckedCreateWithoutTagInput
      >
    | Prisma.TagMapCreateWithoutTagInput[]
    | Prisma.TagMapUncheckedCreateWithoutTagInput[]
  connectOrCreate?:
    | Prisma.TagMapCreateOrConnectWithoutTagInput
    | Prisma.TagMapCreateOrConnectWithoutTagInput[]
  upsert?:
    | Prisma.TagMapUpsertWithWhereUniqueWithoutTagInput
    | Prisma.TagMapUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.TagMapCreateManyTagInputEnvelope
  set?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
  disconnect?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
  delete?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
  connect?: Prisma.TagMapWhereUniqueInput | Prisma.TagMapWhereUniqueInput[]
  update?:
    | Prisma.TagMapUpdateWithWhereUniqueWithoutTagInput
    | Prisma.TagMapUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?:
    | Prisma.TagMapUpdateManyWithWhereWithoutTagInput
    | Prisma.TagMapUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.TagMapScalarWhereInput | Prisma.TagMapScalarWhereInput[]
}

export type TagMapCreateWithoutTagInput = {
  entity: string
  entityId: string
}

export type TagMapUncheckedCreateWithoutTagInput = {
  entity: string
  entityId: string
}

export type TagMapCreateOrConnectWithoutTagInput = {
  where: Prisma.TagMapWhereUniqueInput
  create: Prisma.XOR<
    Prisma.TagMapCreateWithoutTagInput,
    Prisma.TagMapUncheckedCreateWithoutTagInput
  >
}

export type TagMapCreateManyTagInputEnvelope = {
  data: Prisma.TagMapCreateManyTagInput | Prisma.TagMapCreateManyTagInput[]
  skipDuplicates?: boolean
}

export type TagMapUpsertWithWhereUniqueWithoutTagInput = {
  where: Prisma.TagMapWhereUniqueInput
  update: Prisma.XOR<
    Prisma.TagMapUpdateWithoutTagInput,
    Prisma.TagMapUncheckedUpdateWithoutTagInput
  >
  create: Prisma.XOR<
    Prisma.TagMapCreateWithoutTagInput,
    Prisma.TagMapUncheckedCreateWithoutTagInput
  >
}

export type TagMapUpdateWithWhereUniqueWithoutTagInput = {
  where: Prisma.TagMapWhereUniqueInput
  data: Prisma.XOR<
    Prisma.TagMapUpdateWithoutTagInput,
    Prisma.TagMapUncheckedUpdateWithoutTagInput
  >
}

export type TagMapUpdateManyWithWhereWithoutTagInput = {
  where: Prisma.TagMapScalarWhereInput
  data: Prisma.XOR<
    Prisma.TagMapUpdateManyMutationInput,
    Prisma.TagMapUncheckedUpdateManyWithoutTagInput
  >
}

export type TagMapScalarWhereInput = {
  AND?: Prisma.TagMapScalarWhereInput | Prisma.TagMapScalarWhereInput[]
  OR?: Prisma.TagMapScalarWhereInput[]
  NOT?: Prisma.TagMapScalarWhereInput | Prisma.TagMapScalarWhereInput[]
  tagId?: Prisma.StringFilter<'TagMap'> | string
  entity?: Prisma.StringFilter<'TagMap'> | string
  entityId?: Prisma.StringFilter<'TagMap'> | string
}

export type TagMapCreateManyTagInput = {
  entity: string
  entityId: string
}

export type TagMapUpdateWithoutTagInput = {
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagMapUncheckedUpdateWithoutTagInput = {
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagMapUncheckedUpdateManyWithoutTagInput = {
  entity?: Prisma.StringFieldUpdateOperationsInput | string
  entityId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TagMapSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    tagId?: boolean
    entity?: boolean
    entityId?: boolean
    tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['tagMap']
>

export type TagMapSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    tagId?: boolean
    entity?: boolean
    entityId?: boolean
    tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['tagMap']
>

export type TagMapSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    tagId?: boolean
    entity?: boolean
    entityId?: boolean
    tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['tagMap']
>

export type TagMapSelectScalar = {
  tagId?: boolean
  entity?: boolean
  entityId?: boolean
}

export type TagMapOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'tagId' | 'entity' | 'entityId',
  ExtArgs['result']['tagMap']
>
export type TagMapInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type TagMapIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type TagMapIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}

export type $TagMapPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'TagMap'
  objects: {
    tag: Prisma.$TagPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      tagId: string
      entity: string
      entityId: string
    },
    ExtArgs['result']['tagMap']
  >
  composites: {}
}

export type TagMapGetPayload<
  S extends boolean | null | undefined | TagMapDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TagMapPayload, S>

export type TagMapCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<TagMapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: TagMapCountAggregateInputType | true
}

export interface TagMapDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['TagMap']
    meta: { name: 'TagMap' }
  }
  /**
   * Find zero or one TagMap that matches the filter.
   * @param {TagMapFindUniqueArgs} args - Arguments to find a TagMap
   * @example
   * // Get one TagMap
   * const tagMap = await prisma.tagMap.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TagMapFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TagMapFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__TagMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one TagMap that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TagMapFindUniqueOrThrowArgs} args - Arguments to find a TagMap
   * @example
   * // Get one TagMap
   * const tagMap = await prisma.tagMap.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TagMapFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TagMapFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TagMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first TagMap that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagMapFindFirstArgs} args - Arguments to find a TagMap
   * @example
   * // Get one TagMap
   * const tagMap = await prisma.tagMap.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TagMapFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TagMapFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__TagMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first TagMap that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagMapFindFirstOrThrowArgs} args - Arguments to find a TagMap
   * @example
   * // Get one TagMap
   * const tagMap = await prisma.tagMap.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TagMapFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TagMapFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__TagMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more TagMaps that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagMapFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TagMaps
   * const tagMaps = await prisma.tagMap.findMany()
   *
   * // Get first 10 TagMaps
   * const tagMaps = await prisma.tagMap.findMany({ take: 10 })
   *
   * // Only select the `tagId`
   * const tagMapWithTagIdOnly = await prisma.tagMap.findMany({ select: { tagId: true } })
   *
   */
  findMany<T extends TagMapFindManyArgs>(
    args?: Prisma.SelectSubset<T, TagMapFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a TagMap.
   * @param {TagMapCreateArgs} args - Arguments to create a TagMap.
   * @example
   * // Create one TagMap
   * const TagMap = await prisma.tagMap.create({
   *   data: {
   *     // ... data to create a TagMap
   *   }
   * })
   *
   */
  create<T extends TagMapCreateArgs>(
    args: Prisma.SelectSubset<T, TagMapCreateArgs<ExtArgs>>
  ): Prisma.Prisma__TagMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many TagMaps.
   * @param {TagMapCreateManyArgs} args - Arguments to create many TagMaps.
   * @example
   * // Create many TagMaps
   * const tagMap = await prisma.tagMap.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TagMapCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TagMapCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TagMaps and returns the data saved in the database.
   * @param {TagMapCreateManyAndReturnArgs} args - Arguments to create many TagMaps.
   * @example
   * // Create many TagMaps
   * const tagMap = await prisma.tagMap.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TagMaps and only return the `tagId`
   * const tagMapWithTagIdOnly = await prisma.tagMap.createManyAndReturn({
   *   select: { tagId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TagMapCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TagMapCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a TagMap.
   * @param {TagMapDeleteArgs} args - Arguments to delete one TagMap.
   * @example
   * // Delete one TagMap
   * const TagMap = await prisma.tagMap.delete({
   *   where: {
   *     // ... filter to delete one TagMap
   *   }
   * })
   *
   */
  delete<T extends TagMapDeleteArgs>(
    args: Prisma.SelectSubset<T, TagMapDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__TagMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one TagMap.
   * @param {TagMapUpdateArgs} args - Arguments to update one TagMap.
   * @example
   * // Update one TagMap
   * const tagMap = await prisma.tagMap.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TagMapUpdateArgs>(
    args: Prisma.SelectSubset<T, TagMapUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__TagMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more TagMaps.
   * @param {TagMapDeleteManyArgs} args - Arguments to filter TagMaps to delete.
   * @example
   * // Delete a few TagMaps
   * const { count } = await prisma.tagMap.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TagMapDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TagMapDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TagMaps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagMapUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TagMaps
   * const tagMap = await prisma.tagMap.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TagMapUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TagMapUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TagMaps and returns the data updated in the database.
   * @param {TagMapUpdateManyAndReturnArgs} args - Arguments to update many TagMaps.
   * @example
   * // Update many TagMaps
   * const tagMap = await prisma.tagMap.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TagMaps and only return the `tagId`
   * const tagMapWithTagIdOnly = await prisma.tagMap.updateManyAndReturn({
   *   select: { tagId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TagMapUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TagMapUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one TagMap.
   * @param {TagMapUpsertArgs} args - Arguments to update or create a TagMap.
   * @example
   * // Update or create a TagMap
   * const tagMap = await prisma.tagMap.upsert({
   *   create: {
   *     // ... data to create a TagMap
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TagMap we want to update
   *   }
   * })
   */
  upsert<T extends TagMapUpsertArgs>(
    args: Prisma.SelectSubset<T, TagMapUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__TagMapClient<
    runtime.Types.Result.GetResult<
      Prisma.$TagMapPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of TagMaps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagMapCountArgs} args - Arguments to filter TagMaps to count.
   * @example
   * // Count the number of TagMaps
   * const count = await prisma.tagMap.count({
   *   where: {
   *     // ... the filter for the TagMaps we want to count
   *   }
   * })
   **/
  count<T extends TagMapCountArgs>(
    args?: Prisma.Subset<T, TagMapCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TagMapCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TagMap.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagMapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TagMapAggregateArgs>(
    args: Prisma.Subset<T, TagMapAggregateArgs>
  ): Prisma.PrismaPromise<GetTagMapAggregateType<T>>

  /**
   * Group by TagMap.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TagMapGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TagMapGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TagMapGroupByArgs['orderBy'] }
      : { orderBy?: TagMapGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TagMapGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetTagMapGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TagMap model
   */
  readonly fields: TagMapFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for TagMap.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TagMapClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  tag<T extends Prisma.TagDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.TagDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__TagClient<
    | runtime.Types.Result.GetResult<
        Prisma.$TagPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the TagMap model
 */
export interface TagMapFieldRefs {
  readonly tagId: Prisma.FieldRef<'TagMap', 'String'>
  readonly entity: Prisma.FieldRef<'TagMap', 'String'>
  readonly entityId: Prisma.FieldRef<'TagMap', 'String'>
}

// Custom InputTypes
/**
 * TagMap findUnique
 */
export type TagMapFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * Filter, which TagMap to fetch.
   */
  where: Prisma.TagMapWhereUniqueInput
}

/**
 * TagMap findUniqueOrThrow
 */
export type TagMapFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * Filter, which TagMap to fetch.
   */
  where: Prisma.TagMapWhereUniqueInput
}

/**
 * TagMap findFirst
 */
export type TagMapFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * Filter, which TagMap to fetch.
   */
  where?: Prisma.TagMapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TagMaps to fetch.
   */
  orderBy?:
    | Prisma.TagMapOrderByWithRelationInput
    | Prisma.TagMapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TagMaps.
   */
  cursor?: Prisma.TagMapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TagMaps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TagMaps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TagMaps.
   */
  distinct?: Prisma.TagMapScalarFieldEnum | Prisma.TagMapScalarFieldEnum[]
}

/**
 * TagMap findFirstOrThrow
 */
export type TagMapFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * Filter, which TagMap to fetch.
   */
  where?: Prisma.TagMapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TagMaps to fetch.
   */
  orderBy?:
    | Prisma.TagMapOrderByWithRelationInput
    | Prisma.TagMapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TagMaps.
   */
  cursor?: Prisma.TagMapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TagMaps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TagMaps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TagMaps.
   */
  distinct?: Prisma.TagMapScalarFieldEnum | Prisma.TagMapScalarFieldEnum[]
}

/**
 * TagMap findMany
 */
export type TagMapFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * Filter, which TagMaps to fetch.
   */
  where?: Prisma.TagMapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TagMaps to fetch.
   */
  orderBy?:
    | Prisma.TagMapOrderByWithRelationInput
    | Prisma.TagMapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TagMaps.
   */
  cursor?: Prisma.TagMapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TagMaps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TagMaps.
   */
  skip?: number
  distinct?: Prisma.TagMapScalarFieldEnum | Prisma.TagMapScalarFieldEnum[]
}

/**
 * TagMap create
 */
export type TagMapCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * The data needed to create a TagMap.
   */
  data: Prisma.XOR<Prisma.TagMapCreateInput, Prisma.TagMapUncheckedCreateInput>
}

/**
 * TagMap createMany
 */
export type TagMapCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many TagMaps.
   */
  data: Prisma.TagMapCreateManyInput | Prisma.TagMapCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TagMap createManyAndReturn
 */
export type TagMapCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * The data used to create many TagMaps.
   */
  data: Prisma.TagMapCreateManyInput | Prisma.TagMapCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TagMap update
 */
export type TagMapUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * The data needed to update a TagMap.
   */
  data: Prisma.XOR<Prisma.TagMapUpdateInput, Prisma.TagMapUncheckedUpdateInput>
  /**
   * Choose, which TagMap to update.
   */
  where: Prisma.TagMapWhereUniqueInput
}

/**
 * TagMap updateMany
 */
export type TagMapUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update TagMaps.
   */
  data: Prisma.XOR<
    Prisma.TagMapUpdateManyMutationInput,
    Prisma.TagMapUncheckedUpdateManyInput
  >
  /**
   * Filter which TagMaps to update
   */
  where?: Prisma.TagMapWhereInput
  /**
   * Limit how many TagMaps to update.
   */
  limit?: number
}

/**
 * TagMap updateManyAndReturn
 */
export type TagMapUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * The data used to update TagMaps.
   */
  data: Prisma.XOR<
    Prisma.TagMapUpdateManyMutationInput,
    Prisma.TagMapUncheckedUpdateManyInput
  >
  /**
   * Filter which TagMaps to update
   */
  where?: Prisma.TagMapWhereInput
  /**
   * Limit how many TagMaps to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TagMap upsert
 */
export type TagMapUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * The filter to search for the TagMap to update in case it exists.
   */
  where: Prisma.TagMapWhereUniqueInput
  /**
   * In case the TagMap found by the `where` argument doesn't exist, create a new TagMap with this data.
   */
  create: Prisma.XOR<
    Prisma.TagMapCreateInput,
    Prisma.TagMapUncheckedCreateInput
  >
  /**
   * In case the TagMap was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.TagMapUpdateInput,
    Prisma.TagMapUncheckedUpdateInput
  >
}

/**
 * TagMap delete
 */
export type TagMapDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
  /**
   * Filter which TagMap to delete.
   */
  where: Prisma.TagMapWhereUniqueInput
}

/**
 * TagMap deleteMany
 */
export type TagMapDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TagMaps to delete
   */
  where?: Prisma.TagMapWhereInput
  /**
   * Limit how many TagMaps to delete.
   */
  limit?: number
}

/**
 * TagMap without action
 */
export type TagMapDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TagMap
   */
  select?: Prisma.TagMapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TagMap
   */
  omit?: Prisma.TagMapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TagMapInclude<ExtArgs> | null
}
