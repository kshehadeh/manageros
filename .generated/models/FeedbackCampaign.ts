/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `FeedbackCampaign` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model FeedbackCampaign
 *
 */
export type FeedbackCampaignModel =
  runtime.Types.Result.DefaultSelection<Prisma.$FeedbackCampaignPayload>

export type AggregateFeedbackCampaign = {
  _count: FeedbackCampaignCountAggregateOutputType | null
  _min: FeedbackCampaignMinAggregateOutputType | null
  _max: FeedbackCampaignMaxAggregateOutputType | null
}

export type FeedbackCampaignMinAggregateOutputType = {
  id: string | null
  name: string | null
  userId: string | null
  targetPersonId: string | null
  templateId: string | null
  startDate: Date | null
  endDate: Date | null
  inviteLink: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackCampaignMaxAggregateOutputType = {
  id: string | null
  name: string | null
  userId: string | null
  targetPersonId: string | null
  templateId: string | null
  startDate: Date | null
  endDate: Date | null
  inviteLink: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type FeedbackCampaignCountAggregateOutputType = {
  id: number
  name: number
  userId: number
  targetPersonId: number
  templateId: number
  startDate: number
  endDate: number
  inviteEmails: number
  inviteLink: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type FeedbackCampaignMinAggregateInputType = {
  id?: true
  name?: true
  userId?: true
  targetPersonId?: true
  templateId?: true
  startDate?: true
  endDate?: true
  inviteLink?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackCampaignMaxAggregateInputType = {
  id?: true
  name?: true
  userId?: true
  targetPersonId?: true
  templateId?: true
  startDate?: true
  endDate?: true
  inviteLink?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type FeedbackCampaignCountAggregateInputType = {
  id?: true
  name?: true
  userId?: true
  targetPersonId?: true
  templateId?: true
  startDate?: true
  endDate?: true
  inviteEmails?: true
  inviteLink?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type FeedbackCampaignAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FeedbackCampaign to aggregate.
   */
  where?: Prisma.FeedbackCampaignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackCampaigns to fetch.
   */
  orderBy?:
    | Prisma.FeedbackCampaignOrderByWithRelationInput
    | Prisma.FeedbackCampaignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.FeedbackCampaignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackCampaigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackCampaigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned FeedbackCampaigns
   **/
  _count?: true | FeedbackCampaignCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: FeedbackCampaignMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: FeedbackCampaignMaxAggregateInputType
}

export type GetFeedbackCampaignAggregateType<
  T extends FeedbackCampaignAggregateArgs,
> = {
  [P in keyof T & keyof AggregateFeedbackCampaign]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFeedbackCampaign[P]>
    : Prisma.GetScalarType<T[P], AggregateFeedbackCampaign[P]>
}

export type FeedbackCampaignGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeedbackCampaignWhereInput
  orderBy?:
    | Prisma.FeedbackCampaignOrderByWithAggregationInput
    | Prisma.FeedbackCampaignOrderByWithAggregationInput[]
  by:
    | Prisma.FeedbackCampaignScalarFieldEnum[]
    | Prisma.FeedbackCampaignScalarFieldEnum
  having?: Prisma.FeedbackCampaignScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FeedbackCampaignCountAggregateInputType | true
  _min?: FeedbackCampaignMinAggregateInputType
  _max?: FeedbackCampaignMaxAggregateInputType
}

export type FeedbackCampaignGroupByOutputType = {
  id: string
  name: string | null
  userId: string
  targetPersonId: string
  templateId: string | null
  startDate: Date
  endDate: Date
  inviteEmails: string[]
  inviteLink: string | null
  status: string
  createdAt: Date
  updatedAt: Date
  _count: FeedbackCampaignCountAggregateOutputType | null
  _min: FeedbackCampaignMinAggregateOutputType | null
  _max: FeedbackCampaignMaxAggregateOutputType | null
}

type GetFeedbackCampaignGroupByPayload<T extends FeedbackCampaignGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<FeedbackCampaignGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof FeedbackCampaignGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FeedbackCampaignGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FeedbackCampaignGroupByOutputType[P]>
      }
    >
  >

export type FeedbackCampaignWhereInput = {
  AND?: Prisma.FeedbackCampaignWhereInput | Prisma.FeedbackCampaignWhereInput[]
  OR?: Prisma.FeedbackCampaignWhereInput[]
  NOT?: Prisma.FeedbackCampaignWhereInput | Prisma.FeedbackCampaignWhereInput[]
  id?: Prisma.StringFilter<'FeedbackCampaign'> | string
  name?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
  userId?: Prisma.StringFilter<'FeedbackCampaign'> | string
  targetPersonId?: Prisma.StringFilter<'FeedbackCampaign'> | string
  templateId?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
  startDate?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
  endDate?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
  inviteEmails?: Prisma.StringNullableListFilter<'FeedbackCampaign'>
  inviteLink?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
  status?: Prisma.StringFilter<'FeedbackCampaign'> | string
  createdAt?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  targetPerson?: Prisma.XOR<
    Prisma.PersonScalarRelationFilter,
    Prisma.PersonWhereInput
  >
  template?: Prisma.XOR<
    Prisma.FeedbackTemplateNullableScalarRelationFilter,
    Prisma.FeedbackTemplateWhereInput
  > | null
  responses?: Prisma.FeedbackResponseListRelationFilter
}

export type FeedbackCampaignOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  targetPersonId?: Prisma.SortOrder
  templateId?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  inviteEmails?: Prisma.SortOrder
  inviteLink?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  targetPerson?: Prisma.PersonOrderByWithRelationInput
  template?: Prisma.FeedbackTemplateOrderByWithRelationInput
  responses?: Prisma.FeedbackResponseOrderByRelationAggregateInput
}

export type FeedbackCampaignWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    AND?:
      | Prisma.FeedbackCampaignWhereInput
      | Prisma.FeedbackCampaignWhereInput[]
    OR?: Prisma.FeedbackCampaignWhereInput[]
    NOT?:
      | Prisma.FeedbackCampaignWhereInput
      | Prisma.FeedbackCampaignWhereInput[]
    name?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
    userId?: Prisma.StringFilter<'FeedbackCampaign'> | string
    targetPersonId?: Prisma.StringFilter<'FeedbackCampaign'> | string
    templateId?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
    startDate?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
    endDate?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
    inviteEmails?: Prisma.StringNullableListFilter<'FeedbackCampaign'>
    inviteLink?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
    status?: Prisma.StringFilter<'FeedbackCampaign'> | string
    createdAt?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
    targetPerson?: Prisma.XOR<
      Prisma.PersonScalarRelationFilter,
      Prisma.PersonWhereInput
    >
    template?: Prisma.XOR<
      Prisma.FeedbackTemplateNullableScalarRelationFilter,
      Prisma.FeedbackTemplateWhereInput
    > | null
    responses?: Prisma.FeedbackResponseListRelationFilter
  },
  'id'
>

export type FeedbackCampaignOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  targetPersonId?: Prisma.SortOrder
  templateId?: Prisma.SortOrderInput | Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  inviteEmails?: Prisma.SortOrder
  inviteLink?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.FeedbackCampaignCountOrderByAggregateInput
  _max?: Prisma.FeedbackCampaignMaxOrderByAggregateInput
  _min?: Prisma.FeedbackCampaignMinOrderByAggregateInput
}

export type FeedbackCampaignScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.FeedbackCampaignScalarWhereWithAggregatesInput
    | Prisma.FeedbackCampaignScalarWhereWithAggregatesInput[]
  OR?: Prisma.FeedbackCampaignScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.FeedbackCampaignScalarWhereWithAggregatesInput
    | Prisma.FeedbackCampaignScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'FeedbackCampaign'> | string
  name?:
    | Prisma.StringNullableWithAggregatesFilter<'FeedbackCampaign'>
    | string
    | null
  userId?: Prisma.StringWithAggregatesFilter<'FeedbackCampaign'> | string
  targetPersonId?:
    | Prisma.StringWithAggregatesFilter<'FeedbackCampaign'>
    | string
  templateId?:
    | Prisma.StringNullableWithAggregatesFilter<'FeedbackCampaign'>
    | string
    | null
  startDate?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackCampaign'>
    | Date
    | string
  endDate?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackCampaign'>
    | Date
    | string
  inviteEmails?: Prisma.StringNullableListFilter<'FeedbackCampaign'>
  inviteLink?:
    | Prisma.StringNullableWithAggregatesFilter<'FeedbackCampaign'>
    | string
    | null
  status?: Prisma.StringWithAggregatesFilter<'FeedbackCampaign'> | string
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackCampaign'>
    | Date
    | string
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'FeedbackCampaign'>
    | Date
    | string
}

export type FeedbackCampaignCreateInput = {
  id?: string
  name?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFeedbackCampaignsInput
  targetPerson: Prisma.PersonCreateNestedOneWithoutFeedbackCampaignsInput
  template?: Prisma.FeedbackTemplateCreateNestedOneWithoutCampaignsInput
  responses?: Prisma.FeedbackResponseCreateNestedManyWithoutCampaignInput
}

export type FeedbackCampaignUncheckedCreateInput = {
  id?: string
  name?: string | null
  userId: string
  targetPersonId: string
  templateId?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  responses?: Prisma.FeedbackResponseUncheckedCreateNestedManyWithoutCampaignInput
}

export type FeedbackCampaignUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFeedbackCampaignsNestedInput
  targetPerson?: Prisma.PersonUpdateOneRequiredWithoutFeedbackCampaignsNestedInput
  template?: Prisma.FeedbackTemplateUpdateOneWithoutCampaignsNestedInput
  responses?: Prisma.FeedbackResponseUpdateManyWithoutCampaignNestedInput
}

export type FeedbackCampaignUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  targetPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  responses?: Prisma.FeedbackResponseUncheckedUpdateManyWithoutCampaignNestedInput
}

export type FeedbackCampaignCreateManyInput = {
  id?: string
  name?: string | null
  userId: string
  targetPersonId: string
  templateId?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackCampaignUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackCampaignUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  targetPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackCampaignListRelationFilter = {
  every?: Prisma.FeedbackCampaignWhereInput
  some?: Prisma.FeedbackCampaignWhereInput
  none?: Prisma.FeedbackCampaignWhereInput
}

export type FeedbackCampaignOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type FeedbackCampaignCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  targetPersonId?: Prisma.SortOrder
  templateId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  inviteEmails?: Prisma.SortOrder
  inviteLink?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackCampaignMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  targetPersonId?: Prisma.SortOrder
  templateId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  inviteLink?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackCampaignMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  targetPersonId?: Prisma.SortOrder
  templateId?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  inviteLink?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type FeedbackCampaignScalarRelationFilter = {
  is?: Prisma.FeedbackCampaignWhereInput
  isNot?: Prisma.FeedbackCampaignWhereInput
}

export type FeedbackCampaignCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutUserInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput
      >
    | Prisma.FeedbackCampaignCreateWithoutUserInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutUserInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyUserInputEnvelope
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
}

export type FeedbackCampaignUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutUserInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput
      >
    | Prisma.FeedbackCampaignCreateWithoutUserInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutUserInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyUserInputEnvelope
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
}

export type FeedbackCampaignUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutUserInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput
      >
    | Prisma.FeedbackCampaignCreateWithoutUserInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutUserInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutUserInput[]
  upsert?:
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutUserInput
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyUserInputEnvelope
  set?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  update?:
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutUserInput
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?:
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutUserInput
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutUserInput[]
  deleteMany?:
    | Prisma.FeedbackCampaignScalarWhereInput
    | Prisma.FeedbackCampaignScalarWhereInput[]
}

export type FeedbackCampaignUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutUserInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput
      >
    | Prisma.FeedbackCampaignCreateWithoutUserInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutUserInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutUserInput[]
  upsert?:
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutUserInput
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyUserInputEnvelope
  set?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  update?:
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutUserInput
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?:
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutUserInput
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutUserInput[]
  deleteMany?:
    | Prisma.FeedbackCampaignScalarWhereInput
    | Prisma.FeedbackCampaignScalarWhereInput[]
}

export type FeedbackCampaignCreateNestedManyWithoutTargetPersonInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutTargetPersonInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput
      >
    | Prisma.FeedbackCampaignCreateWithoutTargetPersonInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTargetPersonInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTargetPersonInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyTargetPersonInputEnvelope
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
}

export type FeedbackCampaignUncheckedCreateNestedManyWithoutTargetPersonInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.FeedbackCampaignCreateWithoutTargetPersonInput,
          Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput
        >
      | Prisma.FeedbackCampaignCreateWithoutTargetPersonInput[]
      | Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput[]
    connectOrCreate?:
      | Prisma.FeedbackCampaignCreateOrConnectWithoutTargetPersonInput
      | Prisma.FeedbackCampaignCreateOrConnectWithoutTargetPersonInput[]
    createMany?: Prisma.FeedbackCampaignCreateManyTargetPersonInputEnvelope
    connect?:
      | Prisma.FeedbackCampaignWhereUniqueInput
      | Prisma.FeedbackCampaignWhereUniqueInput[]
  }

export type FeedbackCampaignUpdateManyWithoutTargetPersonNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutTargetPersonInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput
      >
    | Prisma.FeedbackCampaignCreateWithoutTargetPersonInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTargetPersonInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTargetPersonInput[]
  upsert?:
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutTargetPersonInput
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutTargetPersonInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyTargetPersonInputEnvelope
  set?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  update?:
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutTargetPersonInput
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutTargetPersonInput[]
  updateMany?:
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutTargetPersonInput
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutTargetPersonInput[]
  deleteMany?:
    | Prisma.FeedbackCampaignScalarWhereInput
    | Prisma.FeedbackCampaignScalarWhereInput[]
}

export type FeedbackCampaignUncheckedUpdateManyWithoutTargetPersonNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.FeedbackCampaignCreateWithoutTargetPersonInput,
          Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput
        >
      | Prisma.FeedbackCampaignCreateWithoutTargetPersonInput[]
      | Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput[]
    connectOrCreate?:
      | Prisma.FeedbackCampaignCreateOrConnectWithoutTargetPersonInput
      | Prisma.FeedbackCampaignCreateOrConnectWithoutTargetPersonInput[]
    upsert?:
      | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutTargetPersonInput
      | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutTargetPersonInput[]
    createMany?: Prisma.FeedbackCampaignCreateManyTargetPersonInputEnvelope
    set?:
      | Prisma.FeedbackCampaignWhereUniqueInput
      | Prisma.FeedbackCampaignWhereUniqueInput[]
    disconnect?:
      | Prisma.FeedbackCampaignWhereUniqueInput
      | Prisma.FeedbackCampaignWhereUniqueInput[]
    delete?:
      | Prisma.FeedbackCampaignWhereUniqueInput
      | Prisma.FeedbackCampaignWhereUniqueInput[]
    connect?:
      | Prisma.FeedbackCampaignWhereUniqueInput
      | Prisma.FeedbackCampaignWhereUniqueInput[]
    update?:
      | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutTargetPersonInput
      | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutTargetPersonInput[]
    updateMany?:
      | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutTargetPersonInput
      | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutTargetPersonInput[]
    deleteMany?:
      | Prisma.FeedbackCampaignScalarWhereInput
      | Prisma.FeedbackCampaignScalarWhereInput[]
  }

export type FeedbackCampaignCreateinviteEmailsInput = {
  set: string[]
}

export type FeedbackCampaignUpdateinviteEmailsInput = {
  set?: string[]
  push?: string | string[]
}

export type FeedbackCampaignCreateNestedOneWithoutResponsesInput = {
  create?: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutResponsesInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutResponsesInput
  >
  connectOrCreate?: Prisma.FeedbackCampaignCreateOrConnectWithoutResponsesInput
  connect?: Prisma.FeedbackCampaignWhereUniqueInput
}

export type FeedbackCampaignUpdateOneRequiredWithoutResponsesNestedInput = {
  create?: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutResponsesInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutResponsesInput
  >
  connectOrCreate?: Prisma.FeedbackCampaignCreateOrConnectWithoutResponsesInput
  upsert?: Prisma.FeedbackCampaignUpsertWithoutResponsesInput
  connect?: Prisma.FeedbackCampaignWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.FeedbackCampaignUpdateToOneWithWhereWithoutResponsesInput,
      Prisma.FeedbackCampaignUpdateWithoutResponsesInput
    >,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutResponsesInput
  >
}

export type FeedbackCampaignCreateNestedManyWithoutTemplateInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutTemplateInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput
      >
    | Prisma.FeedbackCampaignCreateWithoutTemplateInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTemplateInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTemplateInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyTemplateInputEnvelope
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
}

export type FeedbackCampaignUncheckedCreateNestedManyWithoutTemplateInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutTemplateInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput
      >
    | Prisma.FeedbackCampaignCreateWithoutTemplateInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTemplateInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTemplateInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyTemplateInputEnvelope
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
}

export type FeedbackCampaignUpdateManyWithoutTemplateNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutTemplateInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput
      >
    | Prisma.FeedbackCampaignCreateWithoutTemplateInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTemplateInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTemplateInput[]
  upsert?:
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutTemplateInput
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutTemplateInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyTemplateInputEnvelope
  set?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  update?:
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutTemplateInput
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutTemplateInput[]
  updateMany?:
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutTemplateInput
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutTemplateInput[]
  deleteMany?:
    | Prisma.FeedbackCampaignScalarWhereInput
    | Prisma.FeedbackCampaignScalarWhereInput[]
}

export type FeedbackCampaignUncheckedUpdateManyWithoutTemplateNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.FeedbackCampaignCreateWithoutTemplateInput,
        Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput
      >
    | Prisma.FeedbackCampaignCreateWithoutTemplateInput[]
    | Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput[]
  connectOrCreate?:
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTemplateInput
    | Prisma.FeedbackCampaignCreateOrConnectWithoutTemplateInput[]
  upsert?:
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutTemplateInput
    | Prisma.FeedbackCampaignUpsertWithWhereUniqueWithoutTemplateInput[]
  createMany?: Prisma.FeedbackCampaignCreateManyTemplateInputEnvelope
  set?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  disconnect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  delete?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  connect?:
    | Prisma.FeedbackCampaignWhereUniqueInput
    | Prisma.FeedbackCampaignWhereUniqueInput[]
  update?:
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutTemplateInput
    | Prisma.FeedbackCampaignUpdateWithWhereUniqueWithoutTemplateInput[]
  updateMany?:
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutTemplateInput
    | Prisma.FeedbackCampaignUpdateManyWithWhereWithoutTemplateInput[]
  deleteMany?:
    | Prisma.FeedbackCampaignScalarWhereInput
    | Prisma.FeedbackCampaignScalarWhereInput[]
}

export type FeedbackCampaignCreateWithoutUserInput = {
  id?: string
  name?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  targetPerson: Prisma.PersonCreateNestedOneWithoutFeedbackCampaignsInput
  template?: Prisma.FeedbackTemplateCreateNestedOneWithoutCampaignsInput
  responses?: Prisma.FeedbackResponseCreateNestedManyWithoutCampaignInput
}

export type FeedbackCampaignUncheckedCreateWithoutUserInput = {
  id?: string
  name?: string | null
  targetPersonId: string
  templateId?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  responses?: Prisma.FeedbackResponseUncheckedCreateNestedManyWithoutCampaignInput
}

export type FeedbackCampaignCreateOrConnectWithoutUserInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutUserInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput
  >
}

export type FeedbackCampaignCreateManyUserInputEnvelope = {
  data:
    | Prisma.FeedbackCampaignCreateManyUserInput
    | Prisma.FeedbackCampaignCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type FeedbackCampaignUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  update: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateWithoutUserInput,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutUserInput
  >
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutUserInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutUserInput
  >
}

export type FeedbackCampaignUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateWithoutUserInput,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutUserInput
  >
}

export type FeedbackCampaignUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.FeedbackCampaignScalarWhereInput
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateManyMutationInput,
    Prisma.FeedbackCampaignUncheckedUpdateManyWithoutUserInput
  >
}

export type FeedbackCampaignScalarWhereInput = {
  AND?:
    | Prisma.FeedbackCampaignScalarWhereInput
    | Prisma.FeedbackCampaignScalarWhereInput[]
  OR?: Prisma.FeedbackCampaignScalarWhereInput[]
  NOT?:
    | Prisma.FeedbackCampaignScalarWhereInput
    | Prisma.FeedbackCampaignScalarWhereInput[]
  id?: Prisma.StringFilter<'FeedbackCampaign'> | string
  name?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
  userId?: Prisma.StringFilter<'FeedbackCampaign'> | string
  targetPersonId?: Prisma.StringFilter<'FeedbackCampaign'> | string
  templateId?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
  startDate?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
  endDate?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
  inviteEmails?: Prisma.StringNullableListFilter<'FeedbackCampaign'>
  inviteLink?: Prisma.StringNullableFilter<'FeedbackCampaign'> | string | null
  status?: Prisma.StringFilter<'FeedbackCampaign'> | string
  createdAt?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'FeedbackCampaign'> | Date | string
}

export type FeedbackCampaignCreateWithoutTargetPersonInput = {
  id?: string
  name?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFeedbackCampaignsInput
  template?: Prisma.FeedbackTemplateCreateNestedOneWithoutCampaignsInput
  responses?: Prisma.FeedbackResponseCreateNestedManyWithoutCampaignInput
}

export type FeedbackCampaignUncheckedCreateWithoutTargetPersonInput = {
  id?: string
  name?: string | null
  userId: string
  templateId?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  responses?: Prisma.FeedbackResponseUncheckedCreateNestedManyWithoutCampaignInput
}

export type FeedbackCampaignCreateOrConnectWithoutTargetPersonInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutTargetPersonInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput
  >
}

export type FeedbackCampaignCreateManyTargetPersonInputEnvelope = {
  data:
    | Prisma.FeedbackCampaignCreateManyTargetPersonInput
    | Prisma.FeedbackCampaignCreateManyTargetPersonInput[]
  skipDuplicates?: boolean
}

export type FeedbackCampaignUpsertWithWhereUniqueWithoutTargetPersonInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  update: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateWithoutTargetPersonInput,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutTargetPersonInput
  >
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutTargetPersonInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutTargetPersonInput
  >
}

export type FeedbackCampaignUpdateWithWhereUniqueWithoutTargetPersonInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateWithoutTargetPersonInput,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutTargetPersonInput
  >
}

export type FeedbackCampaignUpdateManyWithWhereWithoutTargetPersonInput = {
  where: Prisma.FeedbackCampaignScalarWhereInput
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateManyMutationInput,
    Prisma.FeedbackCampaignUncheckedUpdateManyWithoutTargetPersonInput
  >
}

export type FeedbackCampaignCreateWithoutResponsesInput = {
  id?: string
  name?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFeedbackCampaignsInput
  targetPerson: Prisma.PersonCreateNestedOneWithoutFeedbackCampaignsInput
  template?: Prisma.FeedbackTemplateCreateNestedOneWithoutCampaignsInput
}

export type FeedbackCampaignUncheckedCreateWithoutResponsesInput = {
  id?: string
  name?: string | null
  userId: string
  targetPersonId: string
  templateId?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackCampaignCreateOrConnectWithoutResponsesInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutResponsesInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutResponsesInput
  >
}

export type FeedbackCampaignUpsertWithoutResponsesInput = {
  update: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateWithoutResponsesInput,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutResponsesInput
  >
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutResponsesInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutResponsesInput
  >
  where?: Prisma.FeedbackCampaignWhereInput
}

export type FeedbackCampaignUpdateToOneWithWhereWithoutResponsesInput = {
  where?: Prisma.FeedbackCampaignWhereInput
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateWithoutResponsesInput,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutResponsesInput
  >
}

export type FeedbackCampaignUpdateWithoutResponsesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFeedbackCampaignsNestedInput
  targetPerson?: Prisma.PersonUpdateOneRequiredWithoutFeedbackCampaignsNestedInput
  template?: Prisma.FeedbackTemplateUpdateOneWithoutCampaignsNestedInput
}

export type FeedbackCampaignUncheckedUpdateWithoutResponsesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  targetPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackCampaignCreateWithoutTemplateInput = {
  id?: string
  name?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFeedbackCampaignsInput
  targetPerson: Prisma.PersonCreateNestedOneWithoutFeedbackCampaignsInput
  responses?: Prisma.FeedbackResponseCreateNestedManyWithoutCampaignInput
}

export type FeedbackCampaignUncheckedCreateWithoutTemplateInput = {
  id?: string
  name?: string | null
  userId: string
  targetPersonId: string
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  responses?: Prisma.FeedbackResponseUncheckedCreateNestedManyWithoutCampaignInput
}

export type FeedbackCampaignCreateOrConnectWithoutTemplateInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutTemplateInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput
  >
}

export type FeedbackCampaignCreateManyTemplateInputEnvelope = {
  data:
    | Prisma.FeedbackCampaignCreateManyTemplateInput
    | Prisma.FeedbackCampaignCreateManyTemplateInput[]
  skipDuplicates?: boolean
}

export type FeedbackCampaignUpsertWithWhereUniqueWithoutTemplateInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  update: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateWithoutTemplateInput,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutTemplateInput
  >
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateWithoutTemplateInput,
    Prisma.FeedbackCampaignUncheckedCreateWithoutTemplateInput
  >
}

export type FeedbackCampaignUpdateWithWhereUniqueWithoutTemplateInput = {
  where: Prisma.FeedbackCampaignWhereUniqueInput
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateWithoutTemplateInput,
    Prisma.FeedbackCampaignUncheckedUpdateWithoutTemplateInput
  >
}

export type FeedbackCampaignUpdateManyWithWhereWithoutTemplateInput = {
  where: Prisma.FeedbackCampaignScalarWhereInput
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateManyMutationInput,
    Prisma.FeedbackCampaignUncheckedUpdateManyWithoutTemplateInput
  >
}

export type FeedbackCampaignCreateManyUserInput = {
  id?: string
  name?: string | null
  targetPersonId: string
  templateId?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackCampaignUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  targetPerson?: Prisma.PersonUpdateOneRequiredWithoutFeedbackCampaignsNestedInput
  template?: Prisma.FeedbackTemplateUpdateOneWithoutCampaignsNestedInput
  responses?: Prisma.FeedbackResponseUpdateManyWithoutCampaignNestedInput
}

export type FeedbackCampaignUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  targetPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  responses?: Prisma.FeedbackResponseUncheckedUpdateManyWithoutCampaignNestedInput
}

export type FeedbackCampaignUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  targetPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackCampaignCreateManyTargetPersonInput = {
  id?: string
  name?: string | null
  userId: string
  templateId?: string | null
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackCampaignUpdateWithoutTargetPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFeedbackCampaignsNestedInput
  template?: Prisma.FeedbackTemplateUpdateOneWithoutCampaignsNestedInput
  responses?: Prisma.FeedbackResponseUpdateManyWithoutCampaignNestedInput
}

export type FeedbackCampaignUncheckedUpdateWithoutTargetPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  responses?: Prisma.FeedbackResponseUncheckedUpdateManyWithoutCampaignNestedInput
}

export type FeedbackCampaignUncheckedUpdateManyWithoutTargetPersonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  templateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FeedbackCampaignCreateManyTemplateInput = {
  id?: string
  name?: string | null
  userId: string
  targetPersonId: string
  startDate: Date | string
  endDate: Date | string
  inviteEmails?: Prisma.FeedbackCampaignCreateinviteEmailsInput | string[]
  inviteLink?: string | null
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type FeedbackCampaignUpdateWithoutTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFeedbackCampaignsNestedInput
  targetPerson?: Prisma.PersonUpdateOneRequiredWithoutFeedbackCampaignsNestedInput
  responses?: Prisma.FeedbackResponseUpdateManyWithoutCampaignNestedInput
}

export type FeedbackCampaignUncheckedUpdateWithoutTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  targetPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  responses?: Prisma.FeedbackResponseUncheckedUpdateManyWithoutCampaignNestedInput
}

export type FeedbackCampaignUncheckedUpdateManyWithoutTemplateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  targetPersonId?: Prisma.StringFieldUpdateOperationsInput | string
  startDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endDate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  inviteEmails?: Prisma.FeedbackCampaignUpdateinviteEmailsInput | string[]
  inviteLink?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

/**
 * Count Type FeedbackCampaignCountOutputType
 */

export type FeedbackCampaignCountOutputType = {
  responses: number
}

export type FeedbackCampaignCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  responses?: boolean | FeedbackCampaignCountOutputTypeCountResponsesArgs
}

/**
 * FeedbackCampaignCountOutputType without action
 */
export type FeedbackCampaignCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaignCountOutputType
   */
  select?: Prisma.FeedbackCampaignCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FeedbackCampaignCountOutputType without action
 */
export type FeedbackCampaignCountOutputTypeCountResponsesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.FeedbackResponseWhereInput
}

export type FeedbackCampaignSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    userId?: boolean
    targetPersonId?: boolean
    templateId?: boolean
    startDate?: boolean
    endDate?: boolean
    inviteEmails?: boolean
    inviteLink?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
    targetPerson?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
    template?: boolean | Prisma.FeedbackCampaign$templateArgs<ExtArgs>
    responses?: boolean | Prisma.FeedbackCampaign$responsesArgs<ExtArgs>
    _count?:
      | boolean
      | Prisma.FeedbackCampaignCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackCampaign']
>

export type FeedbackCampaignSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    userId?: boolean
    targetPersonId?: boolean
    templateId?: boolean
    startDate?: boolean
    endDate?: boolean
    inviteEmails?: boolean
    inviteLink?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
    targetPerson?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
    template?: boolean | Prisma.FeedbackCampaign$templateArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackCampaign']
>

export type FeedbackCampaignSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    userId?: boolean
    targetPersonId?: boolean
    templateId?: boolean
    startDate?: boolean
    endDate?: boolean
    inviteEmails?: boolean
    inviteLink?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
    targetPerson?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
    template?: boolean | Prisma.FeedbackCampaign$templateArgs<ExtArgs>
  },
  ExtArgs['result']['feedbackCampaign']
>

export type FeedbackCampaignSelectScalar = {
  id?: boolean
  name?: boolean
  userId?: boolean
  targetPersonId?: boolean
  templateId?: boolean
  startDate?: boolean
  endDate?: boolean
  inviteEmails?: boolean
  inviteLink?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type FeedbackCampaignOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'name'
  | 'userId'
  | 'targetPersonId'
  | 'templateId'
  | 'startDate'
  | 'endDate'
  | 'inviteEmails'
  | 'inviteLink'
  | 'status'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['feedbackCampaign']
>
export type FeedbackCampaignInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  targetPerson?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  template?: boolean | Prisma.FeedbackCampaign$templateArgs<ExtArgs>
  responses?: boolean | Prisma.FeedbackCampaign$responsesArgs<ExtArgs>
  _count?: boolean | Prisma.FeedbackCampaignCountOutputTypeDefaultArgs<ExtArgs>
}
export type FeedbackCampaignIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  targetPerson?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  template?: boolean | Prisma.FeedbackCampaign$templateArgs<ExtArgs>
}
export type FeedbackCampaignIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  targetPerson?: boolean | Prisma.PersonDefaultArgs<ExtArgs>
  template?: boolean | Prisma.FeedbackCampaign$templateArgs<ExtArgs>
}

export type $FeedbackCampaignPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'FeedbackCampaign'
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    targetPerson: Prisma.$PersonPayload<ExtArgs>
    template: Prisma.$FeedbackTemplatePayload<ExtArgs> | null
    responses: Prisma.$FeedbackResponsePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      name: string | null
      userId: string
      targetPersonId: string
      templateId: string | null
      startDate: Date
      endDate: Date
      inviteEmails: string[]
      inviteLink: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['feedbackCampaign']
  >
  composites: {}
}

export type FeedbackCampaignGetPayload<
  S extends boolean | null | undefined | FeedbackCampaignDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$FeedbackCampaignPayload, S>

export type FeedbackCampaignCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  FeedbackCampaignFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: FeedbackCampaignCountAggregateInputType | true
}

export interface FeedbackCampaignDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['FeedbackCampaign']
    meta: { name: 'FeedbackCampaign' }
  }
  /**
   * Find zero or one FeedbackCampaign that matches the filter.
   * @param {FeedbackCampaignFindUniqueArgs} args - Arguments to find a FeedbackCampaign
   * @example
   * // Get one FeedbackCampaign
   * const feedbackCampaign = await prisma.feedbackCampaign.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FeedbackCampaignFindUniqueArgs>(
    args: Prisma.SelectSubset<T, FeedbackCampaignFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one FeedbackCampaign that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FeedbackCampaignFindUniqueOrThrowArgs} args - Arguments to find a FeedbackCampaign
   * @example
   * // Get one FeedbackCampaign
   * const feedbackCampaign = await prisma.feedbackCampaign.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FeedbackCampaignFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, FeedbackCampaignFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first FeedbackCampaign that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackCampaignFindFirstArgs} args - Arguments to find a FeedbackCampaign
   * @example
   * // Get one FeedbackCampaign
   * const feedbackCampaign = await prisma.feedbackCampaign.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FeedbackCampaignFindFirstArgs>(
    args?: Prisma.SelectSubset<T, FeedbackCampaignFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first FeedbackCampaign that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackCampaignFindFirstOrThrowArgs} args - Arguments to find a FeedbackCampaign
   * @example
   * // Get one FeedbackCampaign
   * const feedbackCampaign = await prisma.feedbackCampaign.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FeedbackCampaignFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, FeedbackCampaignFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more FeedbackCampaigns that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackCampaignFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FeedbackCampaigns
   * const feedbackCampaigns = await prisma.feedbackCampaign.findMany()
   *
   * // Get first 10 FeedbackCampaigns
   * const feedbackCampaigns = await prisma.feedbackCampaign.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const feedbackCampaignWithIdOnly = await prisma.feedbackCampaign.findMany({ select: { id: true } })
   *
   */
  findMany<T extends FeedbackCampaignFindManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackCampaignFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a FeedbackCampaign.
   * @param {FeedbackCampaignCreateArgs} args - Arguments to create a FeedbackCampaign.
   * @example
   * // Create one FeedbackCampaign
   * const FeedbackCampaign = await prisma.feedbackCampaign.create({
   *   data: {
   *     // ... data to create a FeedbackCampaign
   *   }
   * })
   *
   */
  create<T extends FeedbackCampaignCreateArgs>(
    args: Prisma.SelectSubset<T, FeedbackCampaignCreateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many FeedbackCampaigns.
   * @param {FeedbackCampaignCreateManyArgs} args - Arguments to create many FeedbackCampaigns.
   * @example
   * // Create many FeedbackCampaigns
   * const feedbackCampaign = await prisma.feedbackCampaign.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends FeedbackCampaignCreateManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackCampaignCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FeedbackCampaigns and returns the data saved in the database.
   * @param {FeedbackCampaignCreateManyAndReturnArgs} args - Arguments to create many FeedbackCampaigns.
   * @example
   * // Create many FeedbackCampaigns
   * const feedbackCampaign = await prisma.feedbackCampaign.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many FeedbackCampaigns and only return the `id`
   * const feedbackCampaignWithIdOnly = await prisma.feedbackCampaign.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends FeedbackCampaignCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      FeedbackCampaignCreateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a FeedbackCampaign.
   * @param {FeedbackCampaignDeleteArgs} args - Arguments to delete one FeedbackCampaign.
   * @example
   * // Delete one FeedbackCampaign
   * const FeedbackCampaign = await prisma.feedbackCampaign.delete({
   *   where: {
   *     // ... filter to delete one FeedbackCampaign
   *   }
   * })
   *
   */
  delete<T extends FeedbackCampaignDeleteArgs>(
    args: Prisma.SelectSubset<T, FeedbackCampaignDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one FeedbackCampaign.
   * @param {FeedbackCampaignUpdateArgs} args - Arguments to update one FeedbackCampaign.
   * @example
   * // Update one FeedbackCampaign
   * const feedbackCampaign = await prisma.feedbackCampaign.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends FeedbackCampaignUpdateArgs>(
    args: Prisma.SelectSubset<T, FeedbackCampaignUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more FeedbackCampaigns.
   * @param {FeedbackCampaignDeleteManyArgs} args - Arguments to filter FeedbackCampaigns to delete.
   * @example
   * // Delete a few FeedbackCampaigns
   * const { count } = await prisma.feedbackCampaign.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends FeedbackCampaignDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, FeedbackCampaignDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackCampaigns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackCampaignUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FeedbackCampaigns
   * const feedbackCampaign = await prisma.feedbackCampaign.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends FeedbackCampaignUpdateManyArgs>(
    args: Prisma.SelectSubset<T, FeedbackCampaignUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FeedbackCampaigns and returns the data updated in the database.
   * @param {FeedbackCampaignUpdateManyAndReturnArgs} args - Arguments to update many FeedbackCampaigns.
   * @example
   * // Update many FeedbackCampaigns
   * const feedbackCampaign = await prisma.feedbackCampaign.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more FeedbackCampaigns and only return the `id`
   * const feedbackCampaignWithIdOnly = await prisma.feedbackCampaign.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends FeedbackCampaignUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      FeedbackCampaignUpdateManyAndReturnArgs<ExtArgs>
    >
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one FeedbackCampaign.
   * @param {FeedbackCampaignUpsertArgs} args - Arguments to update or create a FeedbackCampaign.
   * @example
   * // Update or create a FeedbackCampaign
   * const feedbackCampaign = await prisma.feedbackCampaign.upsert({
   *   create: {
   *     // ... data to create a FeedbackCampaign
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FeedbackCampaign we want to update
   *   }
   * })
   */
  upsert<T extends FeedbackCampaignUpsertArgs>(
    args: Prisma.SelectSubset<T, FeedbackCampaignUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackCampaignClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackCampaignPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of FeedbackCampaigns.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackCampaignCountArgs} args - Arguments to filter FeedbackCampaigns to count.
   * @example
   * // Count the number of FeedbackCampaigns
   * const count = await prisma.feedbackCampaign.count({
   *   where: {
   *     // ... the filter for the FeedbackCampaigns we want to count
   *   }
   * })
   **/
  count<T extends FeedbackCampaignCountArgs>(
    args?: Prisma.Subset<T, FeedbackCampaignCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            FeedbackCampaignCountAggregateOutputType
          >
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FeedbackCampaign.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackCampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends FeedbackCampaignAggregateArgs>(
    args: Prisma.Subset<T, FeedbackCampaignAggregateArgs>
  ): Prisma.PrismaPromise<GetFeedbackCampaignAggregateType<T>>

  /**
   * Group by FeedbackCampaign.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FeedbackCampaignGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends FeedbackCampaignGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FeedbackCampaignGroupByArgs['orderBy'] }
      : { orderBy?: FeedbackCampaignGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      FeedbackCampaignGroupByArgs,
      OrderByArg
    > &
      InputErrors
  ): {} extends InputErrors
    ? GetFeedbackCampaignGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackCampaign model
   */
  readonly fields: FeedbackCampaignFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for FeedbackCampaign.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FeedbackCampaignClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  targetPerson<T extends Prisma.PersonDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.PersonDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__PersonClient<
    | runtime.Types.Result.GetResult<
        Prisma.$PersonPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  template<T extends Prisma.FeedbackCampaign$templateArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeedbackCampaign$templateArgs<ExtArgs>>
  ): Prisma.Prisma__FeedbackTemplateClient<
    runtime.Types.Result.GetResult<
      Prisma.$FeedbackTemplatePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >
  responses<T extends Prisma.FeedbackCampaign$responsesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.FeedbackCampaign$responsesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$FeedbackResponsePayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the FeedbackCampaign model
 */
export interface FeedbackCampaignFieldRefs {
  readonly id: Prisma.FieldRef<'FeedbackCampaign', 'String'>
  readonly name: Prisma.FieldRef<'FeedbackCampaign', 'String'>
  readonly userId: Prisma.FieldRef<'FeedbackCampaign', 'String'>
  readonly targetPersonId: Prisma.FieldRef<'FeedbackCampaign', 'String'>
  readonly templateId: Prisma.FieldRef<'FeedbackCampaign', 'String'>
  readonly startDate: Prisma.FieldRef<'FeedbackCampaign', 'DateTime'>
  readonly endDate: Prisma.FieldRef<'FeedbackCampaign', 'DateTime'>
  readonly inviteEmails: Prisma.FieldRef<'FeedbackCampaign', 'String[]'>
  readonly inviteLink: Prisma.FieldRef<'FeedbackCampaign', 'String'>
  readonly status: Prisma.FieldRef<'FeedbackCampaign', 'String'>
  readonly createdAt: Prisma.FieldRef<'FeedbackCampaign', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'FeedbackCampaign', 'DateTime'>
}

// Custom InputTypes
/**
 * FeedbackCampaign findUnique
 */
export type FeedbackCampaignFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackCampaign to fetch.
   */
  where: Prisma.FeedbackCampaignWhereUniqueInput
}

/**
 * FeedbackCampaign findUniqueOrThrow
 */
export type FeedbackCampaignFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackCampaign to fetch.
   */
  where: Prisma.FeedbackCampaignWhereUniqueInput
}

/**
 * FeedbackCampaign findFirst
 */
export type FeedbackCampaignFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackCampaign to fetch.
   */
  where?: Prisma.FeedbackCampaignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackCampaigns to fetch.
   */
  orderBy?:
    | Prisma.FeedbackCampaignOrderByWithRelationInput
    | Prisma.FeedbackCampaignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FeedbackCampaigns.
   */
  cursor?: Prisma.FeedbackCampaignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackCampaigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackCampaigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FeedbackCampaigns.
   */
  distinct?:
    | Prisma.FeedbackCampaignScalarFieldEnum
    | Prisma.FeedbackCampaignScalarFieldEnum[]
}

/**
 * FeedbackCampaign findFirstOrThrow
 */
export type FeedbackCampaignFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackCampaign to fetch.
   */
  where?: Prisma.FeedbackCampaignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackCampaigns to fetch.
   */
  orderBy?:
    | Prisma.FeedbackCampaignOrderByWithRelationInput
    | Prisma.FeedbackCampaignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for FeedbackCampaigns.
   */
  cursor?: Prisma.FeedbackCampaignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackCampaigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackCampaigns.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of FeedbackCampaigns.
   */
  distinct?:
    | Prisma.FeedbackCampaignScalarFieldEnum
    | Prisma.FeedbackCampaignScalarFieldEnum[]
}

/**
 * FeedbackCampaign findMany
 */
export type FeedbackCampaignFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * Filter, which FeedbackCampaigns to fetch.
   */
  where?: Prisma.FeedbackCampaignWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of FeedbackCampaigns to fetch.
   */
  orderBy?:
    | Prisma.FeedbackCampaignOrderByWithRelationInput
    | Prisma.FeedbackCampaignOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing FeedbackCampaigns.
   */
  cursor?: Prisma.FeedbackCampaignWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` FeedbackCampaigns from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` FeedbackCampaigns.
   */
  skip?: number
  distinct?:
    | Prisma.FeedbackCampaignScalarFieldEnum
    | Prisma.FeedbackCampaignScalarFieldEnum[]
}

/**
 * FeedbackCampaign create
 */
export type FeedbackCampaignCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * The data needed to create a FeedbackCampaign.
   */
  data: Prisma.XOR<
    Prisma.FeedbackCampaignCreateInput,
    Prisma.FeedbackCampaignUncheckedCreateInput
  >
}

/**
 * FeedbackCampaign createMany
 */
export type FeedbackCampaignCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many FeedbackCampaigns.
   */
  data:
    | Prisma.FeedbackCampaignCreateManyInput
    | Prisma.FeedbackCampaignCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FeedbackCampaign createManyAndReturn
 */
export type FeedbackCampaignCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * The data used to create many FeedbackCampaigns.
   */
  data:
    | Prisma.FeedbackCampaignCreateManyInput
    | Prisma.FeedbackCampaignCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackCampaign update
 */
export type FeedbackCampaignUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * The data needed to update a FeedbackCampaign.
   */
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateInput,
    Prisma.FeedbackCampaignUncheckedUpdateInput
  >
  /**
   * Choose, which FeedbackCampaign to update.
   */
  where: Prisma.FeedbackCampaignWhereUniqueInput
}

/**
 * FeedbackCampaign updateMany
 */
export type FeedbackCampaignUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update FeedbackCampaigns.
   */
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateManyMutationInput,
    Prisma.FeedbackCampaignUncheckedUpdateManyInput
  >
  /**
   * Filter which FeedbackCampaigns to update
   */
  where?: Prisma.FeedbackCampaignWhereInput
  /**
   * Limit how many FeedbackCampaigns to update.
   */
  limit?: number
}

/**
 * FeedbackCampaign updateManyAndReturn
 */
export type FeedbackCampaignUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * The data used to update FeedbackCampaigns.
   */
  data: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateManyMutationInput,
    Prisma.FeedbackCampaignUncheckedUpdateManyInput
  >
  /**
   * Filter which FeedbackCampaigns to update
   */
  where?: Prisma.FeedbackCampaignWhereInput
  /**
   * Limit how many FeedbackCampaigns to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FeedbackCampaign upsert
 */
export type FeedbackCampaignUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * The filter to search for the FeedbackCampaign to update in case it exists.
   */
  where: Prisma.FeedbackCampaignWhereUniqueInput
  /**
   * In case the FeedbackCampaign found by the `where` argument doesn't exist, create a new FeedbackCampaign with this data.
   */
  create: Prisma.XOR<
    Prisma.FeedbackCampaignCreateInput,
    Prisma.FeedbackCampaignUncheckedCreateInput
  >
  /**
   * In case the FeedbackCampaign was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.FeedbackCampaignUpdateInput,
    Prisma.FeedbackCampaignUncheckedUpdateInput
  >
}

/**
 * FeedbackCampaign delete
 */
export type FeedbackCampaignDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
  /**
   * Filter which FeedbackCampaign to delete.
   */
  where: Prisma.FeedbackCampaignWhereUniqueInput
}

/**
 * FeedbackCampaign deleteMany
 */
export type FeedbackCampaignDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which FeedbackCampaigns to delete
   */
  where?: Prisma.FeedbackCampaignWhereInput
  /**
   * Limit how many FeedbackCampaigns to delete.
   */
  limit?: number
}

/**
 * FeedbackCampaign.template
 */
export type FeedbackCampaign$templateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackTemplate
   */
  select?: Prisma.FeedbackTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackTemplate
   */
  omit?: Prisma.FeedbackTemplateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackTemplateInclude<ExtArgs> | null
  where?: Prisma.FeedbackTemplateWhereInput
}

/**
 * FeedbackCampaign.responses
 */
export type FeedbackCampaign$responsesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackResponse
   */
  select?: Prisma.FeedbackResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackResponse
   */
  omit?: Prisma.FeedbackResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackResponseInclude<ExtArgs> | null
  where?: Prisma.FeedbackResponseWhereInput
  orderBy?:
    | Prisma.FeedbackResponseOrderByWithRelationInput
    | Prisma.FeedbackResponseOrderByWithRelationInput[]
  cursor?: Prisma.FeedbackResponseWhereUniqueInput
  take?: number
  skip?: number
  distinct?:
    | Prisma.FeedbackResponseScalarFieldEnum
    | Prisma.FeedbackResponseScalarFieldEnum[]
}

/**
 * FeedbackCampaign without action
 */
export type FeedbackCampaignDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the FeedbackCampaign
   */
  select?: Prisma.FeedbackCampaignSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FeedbackCampaign
   */
  omit?: Prisma.FeedbackCampaignOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackCampaignInclude<ExtArgs> | null
}
