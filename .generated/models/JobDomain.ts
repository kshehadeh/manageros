/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `JobDomain` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums'
import type * as Prisma from '../internal/prismaNamespace'

/**
 * Model JobDomain
 *
 */
export type JobDomainModel =
  runtime.Types.Result.DefaultSelection<Prisma.$JobDomainPayload>

export type AggregateJobDomain = {
  _count: JobDomainCountAggregateOutputType | null
  _min: JobDomainMinAggregateOutputType | null
  _max: JobDomainMaxAggregateOutputType | null
}

export type JobDomainMinAggregateOutputType = {
  id: string | null
  name: string | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type JobDomainMaxAggregateOutputType = {
  id: string | null
  name: string | null
  organizationId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type JobDomainCountAggregateOutputType = {
  id: number
  name: number
  organizationId: number
  createdAt: number
  updatedAt: number
  _all: number
}

export type JobDomainMinAggregateInputType = {
  id?: true
  name?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type JobDomainMaxAggregateInputType = {
  id?: true
  name?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
}

export type JobDomainCountAggregateInputType = {
  id?: true
  name?: true
  organizationId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type JobDomainAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which JobDomain to aggregate.
   */
  where?: Prisma.JobDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of JobDomains to fetch.
   */
  orderBy?:
    | Prisma.JobDomainOrderByWithRelationInput
    | Prisma.JobDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.JobDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` JobDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` JobDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned JobDomains
   **/
  _count?: true | JobDomainCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: JobDomainMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: JobDomainMaxAggregateInputType
}

export type GetJobDomainAggregateType<T extends JobDomainAggregateArgs> = {
  [P in keyof T & keyof AggregateJobDomain]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateJobDomain[P]>
    : Prisma.GetScalarType<T[P], AggregateJobDomain[P]>
}

export type JobDomainGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.JobDomainWhereInput
  orderBy?:
    | Prisma.JobDomainOrderByWithAggregationInput
    | Prisma.JobDomainOrderByWithAggregationInput[]
  by: Prisma.JobDomainScalarFieldEnum[] | Prisma.JobDomainScalarFieldEnum
  having?: Prisma.JobDomainScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: JobDomainCountAggregateInputType | true
  _min?: JobDomainMinAggregateInputType
  _max?: JobDomainMaxAggregateInputType
}

export type JobDomainGroupByOutputType = {
  id: string
  name: string
  organizationId: string
  createdAt: Date
  updatedAt: Date
  _count: JobDomainCountAggregateOutputType | null
  _min: JobDomainMinAggregateOutputType | null
  _max: JobDomainMaxAggregateOutputType | null
}

type GetJobDomainGroupByPayload<T extends JobDomainGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<JobDomainGroupByOutputType, T['by']> & {
        [P in keyof T & keyof JobDomainGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], JobDomainGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], JobDomainGroupByOutputType[P]>
      }
    >
  >

export type JobDomainWhereInput = {
  AND?: Prisma.JobDomainWhereInput | Prisma.JobDomainWhereInput[]
  OR?: Prisma.JobDomainWhereInput[]
  NOT?: Prisma.JobDomainWhereInput | Prisma.JobDomainWhereInput[]
  id?: Prisma.StringFilter<'JobDomain'> | string
  name?: Prisma.StringFilter<'JobDomain'> | string
  organizationId?: Prisma.StringFilter<'JobDomain'> | string
  createdAt?: Prisma.DateTimeFilter<'JobDomain'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'JobDomain'> | Date | string
  organization?: Prisma.XOR<
    Prisma.OrganizationScalarRelationFilter,
    Prisma.OrganizationWhereInput
  >
  jobRoles?: Prisma.JobRoleListRelationFilter
}

export type JobDomainOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  jobRoles?: Prisma.JobRoleOrderByRelationAggregateInput
}

export type JobDomainWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string
    name_organizationId?: Prisma.JobDomainNameOrganizationIdCompoundUniqueInput
    AND?: Prisma.JobDomainWhereInput | Prisma.JobDomainWhereInput[]
    OR?: Prisma.JobDomainWhereInput[]
    NOT?: Prisma.JobDomainWhereInput | Prisma.JobDomainWhereInput[]
    name?: Prisma.StringFilter<'JobDomain'> | string
    organizationId?: Prisma.StringFilter<'JobDomain'> | string
    createdAt?: Prisma.DateTimeFilter<'JobDomain'> | Date | string
    updatedAt?: Prisma.DateTimeFilter<'JobDomain'> | Date | string
    organization?: Prisma.XOR<
      Prisma.OrganizationScalarRelationFilter,
      Prisma.OrganizationWhereInput
    >
    jobRoles?: Prisma.JobRoleListRelationFilter
  },
  'id' | 'name_organizationId'
>

export type JobDomainOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.JobDomainCountOrderByAggregateInput
  _max?: Prisma.JobDomainMaxOrderByAggregateInput
  _min?: Prisma.JobDomainMinOrderByAggregateInput
}

export type JobDomainScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.JobDomainScalarWhereWithAggregatesInput
    | Prisma.JobDomainScalarWhereWithAggregatesInput[]
  OR?: Prisma.JobDomainScalarWhereWithAggregatesInput[]
  NOT?:
    | Prisma.JobDomainScalarWhereWithAggregatesInput
    | Prisma.JobDomainScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<'JobDomain'> | string
  name?: Prisma.StringWithAggregatesFilter<'JobDomain'> | string
  organizationId?: Prisma.StringWithAggregatesFilter<'JobDomain'> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'JobDomain'> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'JobDomain'> | Date | string
}

export type JobDomainCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutDomainsInput
  jobRoles?: Prisma.JobRoleCreateNestedManyWithoutDomainInput
}

export type JobDomainUncheckedCreateInput = {
  id?: string
  name: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  jobRoles?: Prisma.JobRoleUncheckedCreateNestedManyWithoutDomainInput
}

export type JobDomainUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutDomainsNestedInput
  jobRoles?: Prisma.JobRoleUpdateManyWithoutDomainNestedInput
}

export type JobDomainUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jobRoles?: Prisma.JobRoleUncheckedUpdateManyWithoutDomainNestedInput
}

export type JobDomainCreateManyInput = {
  id?: string
  name: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type JobDomainUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobDomainUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobDomainListRelationFilter = {
  every?: Prisma.JobDomainWhereInput
  some?: Prisma.JobDomainWhereInput
  none?: Prisma.JobDomainWhereInput
}

export type JobDomainOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type JobDomainScalarRelationFilter = {
  is?: Prisma.JobDomainWhereInput
  isNot?: Prisma.JobDomainWhereInput
}

export type JobDomainNameOrganizationIdCompoundUniqueInput = {
  name: string
  organizationId: string
}

export type JobDomainCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type JobDomainMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type JobDomainMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type JobDomainCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.JobDomainCreateWithoutOrganizationInput,
        Prisma.JobDomainUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.JobDomainCreateWithoutOrganizationInput[]
    | Prisma.JobDomainUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.JobDomainCreateOrConnectWithoutOrganizationInput
    | Prisma.JobDomainCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.JobDomainCreateManyOrganizationInputEnvelope
  connect?:
    | Prisma.JobDomainWhereUniqueInput
    | Prisma.JobDomainWhereUniqueInput[]
}

export type JobDomainUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.JobDomainCreateWithoutOrganizationInput,
        Prisma.JobDomainUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.JobDomainCreateWithoutOrganizationInput[]
    | Prisma.JobDomainUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.JobDomainCreateOrConnectWithoutOrganizationInput
    | Prisma.JobDomainCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.JobDomainCreateManyOrganizationInputEnvelope
  connect?:
    | Prisma.JobDomainWhereUniqueInput
    | Prisma.JobDomainWhereUniqueInput[]
}

export type JobDomainUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.JobDomainCreateWithoutOrganizationInput,
        Prisma.JobDomainUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.JobDomainCreateWithoutOrganizationInput[]
    | Prisma.JobDomainUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.JobDomainCreateOrConnectWithoutOrganizationInput
    | Prisma.JobDomainCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.JobDomainUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.JobDomainUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.JobDomainCreateManyOrganizationInputEnvelope
  set?: Prisma.JobDomainWhereUniqueInput | Prisma.JobDomainWhereUniqueInput[]
  disconnect?:
    | Prisma.JobDomainWhereUniqueInput
    | Prisma.JobDomainWhereUniqueInput[]
  delete?: Prisma.JobDomainWhereUniqueInput | Prisma.JobDomainWhereUniqueInput[]
  connect?:
    | Prisma.JobDomainWhereUniqueInput
    | Prisma.JobDomainWhereUniqueInput[]
  update?:
    | Prisma.JobDomainUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.JobDomainUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.JobDomainUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.JobDomainUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.JobDomainScalarWhereInput
    | Prisma.JobDomainScalarWhereInput[]
}

export type JobDomainUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.JobDomainCreateWithoutOrganizationInput,
        Prisma.JobDomainUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.JobDomainCreateWithoutOrganizationInput[]
    | Prisma.JobDomainUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?:
    | Prisma.JobDomainCreateOrConnectWithoutOrganizationInput
    | Prisma.JobDomainCreateOrConnectWithoutOrganizationInput[]
  upsert?:
    | Prisma.JobDomainUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.JobDomainUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.JobDomainCreateManyOrganizationInputEnvelope
  set?: Prisma.JobDomainWhereUniqueInput | Prisma.JobDomainWhereUniqueInput[]
  disconnect?:
    | Prisma.JobDomainWhereUniqueInput
    | Prisma.JobDomainWhereUniqueInput[]
  delete?: Prisma.JobDomainWhereUniqueInput | Prisma.JobDomainWhereUniqueInput[]
  connect?:
    | Prisma.JobDomainWhereUniqueInput
    | Prisma.JobDomainWhereUniqueInput[]
  update?:
    | Prisma.JobDomainUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.JobDomainUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?:
    | Prisma.JobDomainUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.JobDomainUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?:
    | Prisma.JobDomainScalarWhereInput
    | Prisma.JobDomainScalarWhereInput[]
}

export type JobDomainCreateNestedOneWithoutJobRolesInput = {
  create?: Prisma.XOR<
    Prisma.JobDomainCreateWithoutJobRolesInput,
    Prisma.JobDomainUncheckedCreateWithoutJobRolesInput
  >
  connectOrCreate?: Prisma.JobDomainCreateOrConnectWithoutJobRolesInput
  connect?: Prisma.JobDomainWhereUniqueInput
}

export type JobDomainUpdateOneRequiredWithoutJobRolesNestedInput = {
  create?: Prisma.XOR<
    Prisma.JobDomainCreateWithoutJobRolesInput,
    Prisma.JobDomainUncheckedCreateWithoutJobRolesInput
  >
  connectOrCreate?: Prisma.JobDomainCreateOrConnectWithoutJobRolesInput
  upsert?: Prisma.JobDomainUpsertWithoutJobRolesInput
  connect?: Prisma.JobDomainWhereUniqueInput
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.JobDomainUpdateToOneWithWhereWithoutJobRolesInput,
      Prisma.JobDomainUpdateWithoutJobRolesInput
    >,
    Prisma.JobDomainUncheckedUpdateWithoutJobRolesInput
  >
}

export type JobDomainCreateWithoutOrganizationInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  jobRoles?: Prisma.JobRoleCreateNestedManyWithoutDomainInput
}

export type JobDomainUncheckedCreateWithoutOrganizationInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  jobRoles?: Prisma.JobRoleUncheckedCreateNestedManyWithoutDomainInput
}

export type JobDomainCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.JobDomainWhereUniqueInput
  create: Prisma.XOR<
    Prisma.JobDomainCreateWithoutOrganizationInput,
    Prisma.JobDomainUncheckedCreateWithoutOrganizationInput
  >
}

export type JobDomainCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.JobDomainCreateManyOrganizationInput
    | Prisma.JobDomainCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type JobDomainUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.JobDomainWhereUniqueInput
  update: Prisma.XOR<
    Prisma.JobDomainUpdateWithoutOrganizationInput,
    Prisma.JobDomainUncheckedUpdateWithoutOrganizationInput
  >
  create: Prisma.XOR<
    Prisma.JobDomainCreateWithoutOrganizationInput,
    Prisma.JobDomainUncheckedCreateWithoutOrganizationInput
  >
}

export type JobDomainUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.JobDomainWhereUniqueInput
  data: Prisma.XOR<
    Prisma.JobDomainUpdateWithoutOrganizationInput,
    Prisma.JobDomainUncheckedUpdateWithoutOrganizationInput
  >
}

export type JobDomainUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.JobDomainScalarWhereInput
  data: Prisma.XOR<
    Prisma.JobDomainUpdateManyMutationInput,
    Prisma.JobDomainUncheckedUpdateManyWithoutOrganizationInput
  >
}

export type JobDomainScalarWhereInput = {
  AND?: Prisma.JobDomainScalarWhereInput | Prisma.JobDomainScalarWhereInput[]
  OR?: Prisma.JobDomainScalarWhereInput[]
  NOT?: Prisma.JobDomainScalarWhereInput | Prisma.JobDomainScalarWhereInput[]
  id?: Prisma.StringFilter<'JobDomain'> | string
  name?: Prisma.StringFilter<'JobDomain'> | string
  organizationId?: Prisma.StringFilter<'JobDomain'> | string
  createdAt?: Prisma.DateTimeFilter<'JobDomain'> | Date | string
  updatedAt?: Prisma.DateTimeFilter<'JobDomain'> | Date | string
}

export type JobDomainCreateWithoutJobRolesInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutDomainsInput
}

export type JobDomainUncheckedCreateWithoutJobRolesInput = {
  id?: string
  name: string
  organizationId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type JobDomainCreateOrConnectWithoutJobRolesInput = {
  where: Prisma.JobDomainWhereUniqueInput
  create: Prisma.XOR<
    Prisma.JobDomainCreateWithoutJobRolesInput,
    Prisma.JobDomainUncheckedCreateWithoutJobRolesInput
  >
}

export type JobDomainUpsertWithoutJobRolesInput = {
  update: Prisma.XOR<
    Prisma.JobDomainUpdateWithoutJobRolesInput,
    Prisma.JobDomainUncheckedUpdateWithoutJobRolesInput
  >
  create: Prisma.XOR<
    Prisma.JobDomainCreateWithoutJobRolesInput,
    Prisma.JobDomainUncheckedCreateWithoutJobRolesInput
  >
  where?: Prisma.JobDomainWhereInput
}

export type JobDomainUpdateToOneWithWhereWithoutJobRolesInput = {
  where?: Prisma.JobDomainWhereInput
  data: Prisma.XOR<
    Prisma.JobDomainUpdateWithoutJobRolesInput,
    Prisma.JobDomainUncheckedUpdateWithoutJobRolesInput
  >
}

export type JobDomainUpdateWithoutJobRolesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutDomainsNestedInput
}

export type JobDomainUncheckedUpdateWithoutJobRolesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type JobDomainCreateManyOrganizationInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type JobDomainUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jobRoles?: Prisma.JobRoleUpdateManyWithoutDomainNestedInput
}

export type JobDomainUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  jobRoles?: Prisma.JobRoleUncheckedUpdateManyWithoutDomainNestedInput
}

export type JobDomainUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

/**
 * Count Type JobDomainCountOutputType
 */

export type JobDomainCountOutputType = {
  jobRoles: number
}

export type JobDomainCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  jobRoles?: boolean | JobDomainCountOutputTypeCountJobRolesArgs
}

/**
 * JobDomainCountOutputType without action
 */
export type JobDomainCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomainCountOutputType
   */
  select?: Prisma.JobDomainCountOutputTypeSelect<ExtArgs> | null
}

/**
 * JobDomainCountOutputType without action
 */
export type JobDomainCountOutputTypeCountJobRolesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.JobRoleWhereInput
}

export type JobDomainSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
    jobRoles?: boolean | Prisma.JobDomain$jobRolesArgs<ExtArgs>
    _count?: boolean | Prisma.JobDomainCountOutputTypeDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['jobDomain']
>

export type JobDomainSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['jobDomain']
>

export type JobDomainSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean
    name?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  },
  ExtArgs['result']['jobDomain']
>

export type JobDomainSelectScalar = {
  id?: boolean
  name?: boolean
  organizationId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type JobDomainOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'organizationId' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['jobDomain']
>
export type JobDomainInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  jobRoles?: boolean | Prisma.JobDomain$jobRolesArgs<ExtArgs>
  _count?: boolean | Prisma.JobDomainCountOutputTypeDefaultArgs<ExtArgs>
}
export type JobDomainIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type JobDomainIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $JobDomainPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'JobDomain'
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    jobRoles: Prisma.$JobRolePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string
      name: string
      organizationId: string
      createdAt: Date
      updatedAt: Date
    },
    ExtArgs['result']['jobDomain']
  >
  composites: {}
}

export type JobDomainGetPayload<
  S extends boolean | null | undefined | JobDomainDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$JobDomainPayload, S>

export type JobDomainCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<JobDomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: JobDomainCountAggregateInputType | true
}

export interface JobDomainDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['JobDomain']
    meta: { name: 'JobDomain' }
  }
  /**
   * Find zero or one JobDomain that matches the filter.
   * @param {JobDomainFindUniqueArgs} args - Arguments to find a JobDomain
   * @example
   * // Get one JobDomain
   * const jobDomain = await prisma.jobDomain.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends JobDomainFindUniqueArgs>(
    args: Prisma.SelectSubset<T, JobDomainFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__JobDomainClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find one JobDomain that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {JobDomainFindUniqueOrThrowArgs} args - Arguments to find a JobDomain
   * @example
   * // Get one JobDomain
   * const jobDomain = await prisma.jobDomain.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends JobDomainFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, JobDomainFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__JobDomainClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first JobDomain that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobDomainFindFirstArgs} args - Arguments to find a JobDomain
   * @example
   * // Get one JobDomain
   * const jobDomain = await prisma.jobDomain.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends JobDomainFindFirstArgs>(
    args?: Prisma.SelectSubset<T, JobDomainFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__JobDomainClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find the first JobDomain that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobDomainFindFirstOrThrowArgs} args - Arguments to find a JobDomain
   * @example
   * // Get one JobDomain
   * const jobDomain = await prisma.jobDomain.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends JobDomainFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, JobDomainFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__JobDomainClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Find zero or more JobDomains that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobDomainFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all JobDomains
   * const jobDomains = await prisma.jobDomain.findMany()
   *
   * // Get first 10 JobDomains
   * const jobDomains = await prisma.jobDomain.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const jobDomainWithIdOnly = await prisma.jobDomain.findMany({ select: { id: true } })
   *
   */
  findMany<T extends JobDomainFindManyArgs>(
    args?: Prisma.SelectSubset<T, JobDomainFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >

  /**
   * Create a JobDomain.
   * @param {JobDomainCreateArgs} args - Arguments to create a JobDomain.
   * @example
   * // Create one JobDomain
   * const JobDomain = await prisma.jobDomain.create({
   *   data: {
   *     // ... data to create a JobDomain
   *   }
   * })
   *
   */
  create<T extends JobDomainCreateArgs>(
    args: Prisma.SelectSubset<T, JobDomainCreateArgs<ExtArgs>>
  ): Prisma.Prisma__JobDomainClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Create many JobDomains.
   * @param {JobDomainCreateManyArgs} args - Arguments to create many JobDomains.
   * @example
   * // Create many JobDomains
   * const jobDomain = await prisma.jobDomain.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends JobDomainCreateManyArgs>(
    args?: Prisma.SelectSubset<T, JobDomainCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many JobDomains and returns the data saved in the database.
   * @param {JobDomainCreateManyAndReturnArgs} args - Arguments to create many JobDomains.
   * @example
   * // Create many JobDomains
   * const jobDomain = await prisma.jobDomain.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many JobDomains and only return the `id`
   * const jobDomainWithIdOnly = await prisma.jobDomain.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends JobDomainCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, JobDomainCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Delete a JobDomain.
   * @param {JobDomainDeleteArgs} args - Arguments to delete one JobDomain.
   * @example
   * // Delete one JobDomain
   * const JobDomain = await prisma.jobDomain.delete({
   *   where: {
   *     // ... filter to delete one JobDomain
   *   }
   * })
   *
   */
  delete<T extends JobDomainDeleteArgs>(
    args: Prisma.SelectSubset<T, JobDomainDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__JobDomainClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Update one JobDomain.
   * @param {JobDomainUpdateArgs} args - Arguments to update one JobDomain.
   * @example
   * // Update one JobDomain
   * const jobDomain = await prisma.jobDomain.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends JobDomainUpdateArgs>(
    args: Prisma.SelectSubset<T, JobDomainUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__JobDomainClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Delete zero or more JobDomains.
   * @param {JobDomainDeleteManyArgs} args - Arguments to filter JobDomains to delete.
   * @example
   * // Delete a few JobDomains
   * const { count } = await prisma.jobDomain.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends JobDomainDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, JobDomainDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more JobDomains.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobDomainUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many JobDomains
   * const jobDomain = await prisma.jobDomain.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends JobDomainUpdateManyArgs>(
    args: Prisma.SelectSubset<T, JobDomainUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more JobDomains and returns the data updated in the database.
   * @param {JobDomainUpdateManyAndReturnArgs} args - Arguments to update many JobDomains.
   * @example
   * // Update many JobDomains
   * const jobDomain = await prisma.jobDomain.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more JobDomains and only return the `id`
   * const jobDomainWithIdOnly = await prisma.jobDomain.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends JobDomainUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, JobDomainUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >

  /**
   * Create or update one JobDomain.
   * @param {JobDomainUpsertArgs} args - Arguments to update or create a JobDomain.
   * @example
   * // Update or create a JobDomain
   * const jobDomain = await prisma.jobDomain.upsert({
   *   create: {
   *     // ... data to create a JobDomain
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the JobDomain we want to update
   *   }
   * })
   */
  upsert<T extends JobDomainUpsertArgs>(
    args: Prisma.SelectSubset<T, JobDomainUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__JobDomainClient<
    runtime.Types.Result.GetResult<
      Prisma.$JobDomainPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >

  /**
   * Count the number of JobDomains.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobDomainCountArgs} args - Arguments to filter JobDomains to count.
   * @example
   * // Count the number of JobDomains
   * const count = await prisma.jobDomain.count({
   *   where: {
   *     // ... the filter for the JobDomains we want to count
   *   }
   * })
   **/
  count<T extends JobDomainCountArgs>(
    args?: Prisma.Subset<T, JobDomainCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], JobDomainCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a JobDomain.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobDomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends JobDomainAggregateArgs>(
    args: Prisma.Subset<T, JobDomainAggregateArgs>
  ): Prisma.PrismaPromise<GetJobDomainAggregateType<T>>

  /**
   * Group by JobDomain.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {JobDomainGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends JobDomainGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: JobDomainGroupByArgs['orderBy'] }
      : { orderBy?: JobDomainGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ]
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, JobDomainGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetJobDomainGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobDomain model
   */
  readonly fields: JobDomainFieldRefs
}

/**
 * The delegate class that acts as a "Promise-like" for JobDomain.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__JobDomainClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise'
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__OrganizationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrganizationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >
  jobRoles<T extends Prisma.JobDomain$jobRolesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.JobDomain$jobRolesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$JobRolePayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the JobDomain model
 */
export interface JobDomainFieldRefs {
  readonly id: Prisma.FieldRef<'JobDomain', 'String'>
  readonly name: Prisma.FieldRef<'JobDomain', 'String'>
  readonly organizationId: Prisma.FieldRef<'JobDomain', 'String'>
  readonly createdAt: Prisma.FieldRef<'JobDomain', 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<'JobDomain', 'DateTime'>
}

// Custom InputTypes
/**
 * JobDomain findUnique
 */
export type JobDomainFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * Filter, which JobDomain to fetch.
   */
  where: Prisma.JobDomainWhereUniqueInput
}

/**
 * JobDomain findUniqueOrThrow
 */
export type JobDomainFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * Filter, which JobDomain to fetch.
   */
  where: Prisma.JobDomainWhereUniqueInput
}

/**
 * JobDomain findFirst
 */
export type JobDomainFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * Filter, which JobDomain to fetch.
   */
  where?: Prisma.JobDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of JobDomains to fetch.
   */
  orderBy?:
    | Prisma.JobDomainOrderByWithRelationInput
    | Prisma.JobDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for JobDomains.
   */
  cursor?: Prisma.JobDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` JobDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` JobDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of JobDomains.
   */
  distinct?: Prisma.JobDomainScalarFieldEnum | Prisma.JobDomainScalarFieldEnum[]
}

/**
 * JobDomain findFirstOrThrow
 */
export type JobDomainFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * Filter, which JobDomain to fetch.
   */
  where?: Prisma.JobDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of JobDomains to fetch.
   */
  orderBy?:
    | Prisma.JobDomainOrderByWithRelationInput
    | Prisma.JobDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for JobDomains.
   */
  cursor?: Prisma.JobDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` JobDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` JobDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of JobDomains.
   */
  distinct?: Prisma.JobDomainScalarFieldEnum | Prisma.JobDomainScalarFieldEnum[]
}

/**
 * JobDomain findMany
 */
export type JobDomainFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * Filter, which JobDomains to fetch.
   */
  where?: Prisma.JobDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of JobDomains to fetch.
   */
  orderBy?:
    | Prisma.JobDomainOrderByWithRelationInput
    | Prisma.JobDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing JobDomains.
   */
  cursor?: Prisma.JobDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` JobDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` JobDomains.
   */
  skip?: number
  distinct?: Prisma.JobDomainScalarFieldEnum | Prisma.JobDomainScalarFieldEnum[]
}

/**
 * JobDomain create
 */
export type JobDomainCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * The data needed to create a JobDomain.
   */
  data: Prisma.XOR<
    Prisma.JobDomainCreateInput,
    Prisma.JobDomainUncheckedCreateInput
  >
}

/**
 * JobDomain createMany
 */
export type JobDomainCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many JobDomains.
   */
  data: Prisma.JobDomainCreateManyInput | Prisma.JobDomainCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * JobDomain createManyAndReturn
 */
export type JobDomainCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * The data used to create many JobDomains.
   */
  data: Prisma.JobDomainCreateManyInput | Prisma.JobDomainCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * JobDomain update
 */
export type JobDomainUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * The data needed to update a JobDomain.
   */
  data: Prisma.XOR<
    Prisma.JobDomainUpdateInput,
    Prisma.JobDomainUncheckedUpdateInput
  >
  /**
   * Choose, which JobDomain to update.
   */
  where: Prisma.JobDomainWhereUniqueInput
}

/**
 * JobDomain updateMany
 */
export type JobDomainUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update JobDomains.
   */
  data: Prisma.XOR<
    Prisma.JobDomainUpdateManyMutationInput,
    Prisma.JobDomainUncheckedUpdateManyInput
  >
  /**
   * Filter which JobDomains to update
   */
  where?: Prisma.JobDomainWhereInput
  /**
   * Limit how many JobDomains to update.
   */
  limit?: number
}

/**
 * JobDomain updateManyAndReturn
 */
export type JobDomainUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * The data used to update JobDomains.
   */
  data: Prisma.XOR<
    Prisma.JobDomainUpdateManyMutationInput,
    Prisma.JobDomainUncheckedUpdateManyInput
  >
  /**
   * Filter which JobDomains to update
   */
  where?: Prisma.JobDomainWhereInput
  /**
   * Limit how many JobDomains to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * JobDomain upsert
 */
export type JobDomainUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * The filter to search for the JobDomain to update in case it exists.
   */
  where: Prisma.JobDomainWhereUniqueInput
  /**
   * In case the JobDomain found by the `where` argument doesn't exist, create a new JobDomain with this data.
   */
  create: Prisma.XOR<
    Prisma.JobDomainCreateInput,
    Prisma.JobDomainUncheckedCreateInput
  >
  /**
   * In case the JobDomain was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.JobDomainUpdateInput,
    Prisma.JobDomainUncheckedUpdateInput
  >
}

/**
 * JobDomain delete
 */
export type JobDomainDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
  /**
   * Filter which JobDomain to delete.
   */
  where: Prisma.JobDomainWhereUniqueInput
}

/**
 * JobDomain deleteMany
 */
export type JobDomainDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which JobDomains to delete
   */
  where?: Prisma.JobDomainWhereInput
  /**
   * Limit how many JobDomains to delete.
   */
  limit?: number
}

/**
 * JobDomain.jobRoles
 */
export type JobDomain$jobRolesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobRole
   */
  select?: Prisma.JobRoleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobRole
   */
  omit?: Prisma.JobRoleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobRoleInclude<ExtArgs> | null
  where?: Prisma.JobRoleWhereInput
  orderBy?:
    | Prisma.JobRoleOrderByWithRelationInput
    | Prisma.JobRoleOrderByWithRelationInput[]
  cursor?: Prisma.JobRoleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.JobRoleScalarFieldEnum | Prisma.JobRoleScalarFieldEnum[]
}

/**
 * JobDomain without action
 */
export type JobDomainDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the JobDomain
   */
  select?: Prisma.JobDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the JobDomain
   */
  omit?: Prisma.JobDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.JobDomainInclude<ExtArgs> | null
}
